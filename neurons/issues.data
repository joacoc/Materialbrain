{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11170","id":1166349026,"node_id":"I_kwDOCkIcu85FhRLi","number":11170,"title":"regression: SELECT against a postgres source never returns","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-11T12:15:03Z","updated_at":"2022-03-11T12:15:03Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nc5e680282b\n\n### How did you install Materialize?\n\nDocker image\n\n### What was the issue?\n\nThis has happened once in CI https://buildkite.com/materialize/tests/builds/30325#0839949a-2e35-4cde-876f-5dd54f88e358 and once for me on a scratch machine. The symphoms are as follows:\r\n\r\n1. querying the postgres source hangs and never returns.\r\n2. It is possible to create new connections to the database, so the coordinator is not wedged\r\n3. It is possible to query other tables\r\n4. COPY TAIL does not return anything\r\n5.  AS OF 0 and AS OF very_large_number also hang\r\n6. It is posssible to use Ctrl+C to terminate the query\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11169","id":1166073540,"node_id":"PR_kwDOCkIcu840SBWo","number":11169,"title":"dataflow-types: partition StorageCommand::Insert by hash of data","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-11T07:02:57Z","updated_at":"2022-03-11T11:43:13Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11169","html_url":"https://github.com/MaterializeInc/materialize/pull/11169","diff_url":"https://github.com/MaterializeInc/materialize/pull/11169.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11169.patch","merged_at":null},"body":"Previously the inserts were partitioned by their position in the\r\ncommand. This impeded compaction, because it was likely that the\r\nretraction of a piece of data would land on a different worker than the\r\nthe original presentation of that data landed on.\r\n\r\nThis glitch was responsible for the ever-increasing time to `UPDATE` a\r\nnonmaterialized table.\r\n\r\nFix #11071.\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n### Testing\r\n\r\n- [?] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11168","id":1166001724,"node_id":"PR_kwDOCkIcu840RyXm","number":11168,"title":"coord: make session and dataflow builder generic","user":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-11T04:55:35Z","updated_at":"2022-03-11T05:01:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11168","html_url":"https://github.com/MaterializeInc/materialize/pull/11168","diff_url":"https://github.com/MaterializeInc/materialize/pull/11168.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11168.patch","merged_at":null},"body":"Transaction ops live in Sessions, and they hold Timestamps for Peek operations. Also work on dataflow builder while here. Start a new CoordTimestamp trait as a common place to dump trait definitions instead of copying them all over.\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - No user-facing changes.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11167","id":1165997206,"node_id":"PR_kwDOCkIcu840RxdE","number":11167,"title":"pgcopy: invert dependency on sql","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-11T04:45:30Z","updated_at":"2022-03-11T04:48:25Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11167","html_url":"https://github.com/MaterializeInc/materialize/pull/11167","diff_url":"https://github.com/MaterializeInc/materialize/pull/11167.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11167.patch","merged_at":null},"body":"Make sql depend on pgcopy, rather than vice-versa. This prevents changes\r\nto sql requiring that the dataflow crate be recompiled, which is slow.\r\n(dataflow depends on pgcopy).\r\n\r\nDoing it this way is also keeps the responsbility for translating a SQL\r\nAST into a more structured type *in* the sql crate. The previous\r\nCopyParams struct exported by the sql crate was basically just the AST\r\nfor the COPY statement, and the responsibility of validating that AST\r\nwas kicked downstream (i.e., to pgcopy). Better for pgcopy to assert its\r\nneeds (via the properly-structured CopyFormatParams type) and let the\r\nsql crate do the hard work of producing that struct.\r\n\r\n### Motivation\r\n\r\n* This PR refactors existing code to make compiling the sql crate fast again!\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11166","id":1165943860,"node_id":"I_kwDOCkIcu85FfuQ0","number":11166,"title":"sql: `coalesce` with `char` returns wrong result","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":2240473760,"node_id":"MDU6TGFiZWwyMjQwNDczNzYw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-correctness","name":"T-correctness","color":"695bd3","default":false,"description":"Theme: relates to consistency and correctness of results."}],"state":"open","locked":false,"assignee":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"assignees":[{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-03-11T03:01:50Z","updated_at":"2022-03-11T11:48:31Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nccd258eff\r\n\r\n### How did you install Materialize?\r\n\r\nBuilt from source\r\n\r\n### What was the issue?\r\n\r\nIn Materialize:\r\n\r\n```\r\nmaterialize=> select coalesce(null::char(1), 'abc');\r\n coalesce \r\n----------\r\n a\r\n(1 row)\r\n```\r\n\r\nIn PostgreSQL:\r\n\r\n```\r\nbenesch=# select coalesce(null::char(1), 'abc');;\r\n coalesce \r\n----------\r\n abc\r\n(1 row)\r\n```\r\n\r\ncc @sploiselle\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11164","id":1165814446,"node_id":"PR_kwDOCkIcu840RLxw","number":11164,"title":"sql: support typmods in the catalog","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-10T23:00:23Z","updated_at":"2022-03-11T12:06:42Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11164","html_url":"https://github.com/MaterializeInc/materialize/pull/11164","diff_url":"https://github.com/MaterializeInc/materialize/pull/11164.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11164.patch","merged_at":null},"body":"@pH14 or @sploiselle: would one of you be up for picking this up? I left a TODO in the code about validating the typmod, and we need release notes, maybe docs, and lots of tests. But it works in some manual testing!\r\n\r\n----\r\n\r\nFix #4884.\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - To be written!\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11163","id":1165753969,"node_id":"PR_kwDOCkIcu840Q_XO","number":11163,"title":"coord: make the TimestampOracle generic","user":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-10T21:39:54Z","updated_at":"2022-03-11T00:57:44Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11163","html_url":"https://github.com/MaterializeInc/materialize/pull/11163","diff_url":"https://github.com/MaterializeInc/materialize/pull/11163.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11163.patch","merged_at":null},"body":"Force callers to specify exactly how to generate a next timestamp\r\ninstead of always adding 1. This allows us to incorporate `now()` into\r\nnew timestamp generation instead of having that be dependent on calling\r\nfast_forward.\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - No user-facing changes.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11162","id":1165712142,"node_id":"PR_kwDOCkIcu840Q2QK","number":11162,"title":"consolidate the type of the current_values map in upsert_core","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T21:00:04Z","updated_at":"2022-03-10T21:01:59Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11162","html_url":"https://github.com/MaterializeInc/materialize/pull/11162","diff_url":"https://github.com/MaterializeInc/materialize/pull/11162.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11162.patch","merged_at":null},"body":"In this pr, I switch the `current_values` map in `upsert_core` to be a map of `Result<Row, ...> -> Result<Row, DataflowError>`\r\nThis is primarily to clean this code up to ready it for the merge with `persistent_upsert`, which manages key-values without the easy path of \"just send an `(error, t, +1)` if the key fails to decode. \r\n\r\nAdditionally, we NEVER retract if the decoded key is an `Err`. This is the match the previous behavior of the `upsert` operator. (When I merge persistent_upsert into this code, their will be a subtlety for me to point out in a comment; basically, persist may pre-populate the `current_values` map with decode error keys, but they may never be observed, unless a new decode error key comes along; the error case being propagated seems to be happen here: https://github.com/MaterializeInc/materialize/blob/main/src/persist/src/operators/upsert.rs#L277-L290. I will make sure my comment explains this (I hope its accurate) in the later pr. In that case, this pr is mostly a mechanical type change that makes that pr easier to review and digest)\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11161","id":1165623880,"node_id":"PR_kwDOCkIcu840QjdY","number":11161,"title":"Refactor Postgres source metrics using table metadata","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T19:18:07Z","updated_at":"2022-03-10T19:59:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11161","html_url":"https://github.com/MaterializeInc/materialize/pull/11161","diff_url":"https://github.com/MaterializeInc/materialize/pull/11161.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11161.patch","merged_at":null},"body":"This PR reworks the Postgres metrics to tag all relevant metrics with per table stats and consolidates insert/update/delete statements into \"mz_postgres_per_source_operations\" with an operation tag to allow distinguishing by type. Since cardinality is fixed and low using tags for these is a more \"Prometheus\"-y way of reporting which eliminates the need for a separate metric or doing arithmetic during queries to determine the total operations processed. \r\n\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n      - This updates the Postgres metrics to use tags with all of the metadata we have allowing for more precise analysis of the behavior of the Postgres source.\r\n\r\n### Tips for reviewer\r\nWhile the core user visible change here is metrics which are more specific but also more conducive to aggregation there is also a change to the exposure of instrumentation details to the code being instrumented. Originally this struct just held these wrapped structs and handed out references to them but with this PR I am trying out using associated functions to encapsulate the details of figuring out which counter to manipulate in what way with function calls that only accept arguments with types that are `Send` so that in the future if desirable this function call boundary can be used to immediately move the counter manipulation work off to another thread since it involves locking at some level whether its atomic types or more sophisticated locks.\r\n\r\n### Testing\r\n\r\n- [X] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Small changes to the Postgres per source metrics, `mz_postgres_per_source_inserts`, `mz_postgres_per_source_updates`, `mz_postgres_per_source_deletes`, and `mz_postgres_per_source_messages_total` have been removed in favor of `mz_postgres_per_source_operations` which includes an `operation` tag that distinguishes between the three operations. The value of this counter when not filtering by the `operation` tag will be the same as the `mz_postgres_per_source_messages_total` was previously. `mz_postgres_per_source_ignored` will also now include insert/update/delete messages for tables which are not part of the source (such as tables added to the Postgres publication after the Materialize source was created) where previously it only reported the number of `Origin` and `Type` messages received.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11159","id":1165514458,"node_id":"PR_kwDOCkIcu840QMWV","number":11159,"title":"Add test for create views from source after an alter table","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T17:27:33Z","updated_at":"2022-03-10T19:24:04Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11159","html_url":"https://github.com/MaterializeInc/materialize/pull/11159","diff_url":"https://github.com/MaterializeInc/materialize/pull/11159.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11159.patch","merged_at":null},"body":"This PR introduces a new test focused on verifying behavior of create views from source in the face of upstream alter tables being run in Postgres. An alter expected to cause the source to error is validated to allow view creation but no queries to succeed, and then an alter expected to be ignored by the source is validated to allow view creation and querying.\r\n\r\n### Motivation\r\n   * This PR refactors existing code.\r\n\r\n      - Existing code lacked sufficient testing of these interactions, especially since the view creation could logically be expected to fail but it succeeds and then queries fail. This test therefor not only validates behavior but serves as documentation that this slightly unexpected behavior is actually correct.\r\n\r\n### Testing\r\n\r\n- [X] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - No user facing changes here, only tests.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11158","id":1165434400,"node_id":"I_kwDOCkIcu85Fdx4g","number":11158,"title":"The field 'TABLE_SCHEMA' has a type currently unknown to Npgsql (OID 25)","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T16:18:43Z","updated_at":"2022-03-10T16:23:18Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.21.1\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nUsing PowerBI Desktop I attempted to add a new datasource with the postgresql driver to connect to the materialize instance. Received the error when the driver attempted to connect, happens regardless of Import or DirectQuery setting and whether or not \"Include Relationship Columns\" or \"Navigate using full hierarchy\" were checked.\r\n\r\n\r\nThis looks like the same issue reported with CockroachDB in https://github.com/npgsql/npgsql/issues/1321 and https://github.com/cockroachdb/cockroach/issues/63146\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11156","id":1165243290,"node_id":"PR_kwDOCkIcu840PTMy","number":11156,"title":"sql: support SHOW CLUSTERS","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T13:41:57Z","updated_at":"2022-03-11T04:06:02Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11156","html_url":"https://github.com/MaterializeInc/materialize/pull/11156","diff_url":"https://github.com/MaterializeInc/materialize/pull/11156.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11156.patch","merged_at":null},"body":"### Motivation\r\n\r\nThis PR adds a known-desirable feature. Closes #11128\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - no user-facing behavior changes\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11155","id":1165156697,"node_id":"I_kwDOCkIcu85FcuFZ","number":11155,"title":"regression: Creating many indexes over DIFFERENT columns of same table causes OOM","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465753202,"node_id":"MDU6TGFiZWwxNDY1NzUzMjAy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dataflow","name":"A-dataflow","color":"5fefa7","default":false,"description":"Area: dataflow"},{"id":2321764790,"node_id":"MDU6TGFiZWwyMzIxNzY0Nzkw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-memory","name":"T-memory","color":"695bd3","default":false,"description":"Theme: memory"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-10T12:24:23Z","updated_at":"2022-03-10T13:02:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.22.1-dev (0b34555fb)\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nEven with the fix in https://github.com/MaterializeInc/materialize/pull/11154 , the case where many different indexes are being created on the same table still causes OOM. The memory consumption is 100MB/index even in the case where the table has no data.\r\n\r\nTo reproduce, pipe the output of this through `testdrive -`:\r\n\r\n```\r\nprint(f\"> CREATE TABLE t (f1 INTEGER)\")\r\nfor i in range (1,1000):\r\n    print(f\"> CREATE INDEX i{i} ON t(f1+{i})\")\r\n```\r\n\r\nThis same case works like charm on `v0.22.0 (a7c727ac4)` , so it appears different from #4887 that has been there forever. Note that the test case does not ingest any data nor it runs any `SELECT`s.  \n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11153","id":1164928912,"node_id":"PR_kwDOCkIcu840OQKL","number":11153,"title":"scratch: Improve debugging of test failures in CI","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T08:48:51Z","updated_at":"2022-03-10T08:48:51Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11153","html_url":"https://github.com/MaterializeInc/materialize/pull/11153","diff_url":"https://github.com/MaterializeInc/materialize/pull/11153.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11153.patch","merged_at":null},"body":"- Add a \"ci\" instance type that matches the AWS instance type\r\ncurrently used by Buildkite\r\n- Install the psql command-line tool on provision\r\n\r\n### Motivation\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\nI have had the need to use the two suggested enhancements on a daily basis.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11152","id":1164620446,"node_id":"PR_kwDOCkIcu840NP4s","number":11152,"title":"Update pg source docs","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T01:03:21Z","updated_at":"2022-03-10T16:32:58Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11152","html_url":"https://github.com/MaterializeInc/materialize/pull/11152","diff_url":"https://github.com/MaterializeInc/materialize/pull/11152.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11152.patch","merged_at":null},"body":"This PR updates the docs for creating Postgres sources to reflect the latest behavior after #10721 and \r\n#11083 have merged, specifically calling out that when a postgres source is created that we take a snapshot of the tables in the publication and their schemas and then use that to detect DDL changes during replication since they are not part of the protocol.\r\n\r\n\r\n### Motivation\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n      - Documentation of the new Postgres source behavior.\r\n\r\n\r\n\r\n### Testing\r\n\r\n- [X] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - There are no user facing changes, this is a docs only change\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11148","id":1164512814,"node_id":"PR_kwDOCkIcu840M5gB","number":11148,"title":"Add prometheus metric for per partition high watermark","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T22:35:07Z","updated_at":"2022-03-09T23:21:07Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11148","html_url":"https://github.com/MaterializeInc/materialize/pull/11148","diff_url":"https://github.com/MaterializeInc/materialize/pull/11148.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11148.patch","merged_at":null},"body":"As mentioned in https://github.com/MaterializeInc/cloud/issues/2355 there is a desire to have the broker reported high watermark for each partition available in metrics which was lost when the interaction with kafka was reworked. This PR adds the metric `mz_kafka_partition_offset_max` with tags for `topic`, `source_id`, `source_instance` and `partition_id` to the set exported by prometheus which also puts it into the `mz_metrics` system table.\r\n\r\n### Motivation\r\n\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\nhttps://github.com/MaterializeInc/cloud/issues/2355\r\n\r\n### Tips for reviewer\r\n\r\nNo, high watermark is not the correct spelling but its what kafka and rdkafka use so we will all have to wonder exactly what happens to a watermark to get it high or low.\r\n\r\n### Testing\r\n\r\n- [X] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Add metric mz_kafka_partition_offset_max which records the per partition high_watermark reported by the broker. This metric is available via the prometheus metrics endpoint and the mz_metrics system table.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11147","id":1164482687,"node_id":"I_kwDOCkIcu85FaJh_","number":11147,"title":"dataflow: merge `persistent_upsert` into `mz_dataflow::render::upsert`","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"assignees":[{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-03-09T21:56:26Z","updated_at":"2022-03-09T21:57:07Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"To finally close https://github.com/MaterializeInc/materialize/issues/9551\r\n\r\n\r\nSee https://github.com/MaterializeInc/materialize/issues/9914 for the basic overview of the options.\r\n\r\nAfter talking to @aljoscha, moving `persistent_upsert` into the `dataflow` crate should suffice to simplify the code","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11145","id":1164365726,"node_id":"I_kwDOCkIcu85FZs-e","number":11145,"title":"`jsonb_object_agg` doesn't fail for null keys","user":{"login":"andrioni","id":159177,"node_id":"MDQ6VXNlcjE1OTE3Nw==","avatar_url":"https://avatars.githubusercontent.com/u/159177?v=4","gravatar_id":"","url":"https://api.github.com/users/andrioni","html_url":"https://github.com/andrioni","followers_url":"https://api.github.com/users/andrioni/followers","following_url":"https://api.github.com/users/andrioni/following{/other_user}","gists_url":"https://api.github.com/users/andrioni/gists{/gist_id}","starred_url":"https://api.github.com/users/andrioni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrioni/subscriptions","organizations_url":"https://api.github.com/users/andrioni/orgs","repos_url":"https://api.github.com/users/andrioni/repos","events_url":"https://api.github.com/users/andrioni/events{/privacy}","received_events_url":"https://api.github.com/users/andrioni/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-09T19:47:50Z","updated_at":"2022-03-09T19:56:23Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.22.1-dev (502f90dc8)\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nPostgres rejects null keys on `jsonb_object_agg`, as JSON keys have to be non-null strings, but Materialize silently drops those key-value pairs:\r\n\r\n### Postgres\r\n```\r\nalessandro=# select jsonb_object_agg(null, 2);\r\nERROR:  field name must not be null\r\n\r\nalessandro=# select jsonb_object_agg(a, b) from (values (1, 2), (null, 4)) v(a, b);\r\nERROR:  field name must not be null\r\n```\r\n\r\n### Materialize\r\n```\r\nmaterialize=> select jsonb_object_agg(null, 2);\r\n jsonb_object_agg\r\n------------------\r\n {}\r\n(1 row)\r\n\r\nmaterialize=> select jsonb_object_agg(a, b) from (values (1, 2), (null, 4)) v(a, b);\r\n jsonb_object_agg\r\n------------------\r\n {\"1\":2}\r\n(1 row)\r\n```\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11144","id":1164228090,"node_id":"PR_kwDOCkIcu840L-qj","number":11144,"title":"sql-parser: add support for ALTER SECRET","user":{"login":"mkysel","id":7513948,"node_id":"MDQ6VXNlcjc1MTM5NDg=","avatar_url":"https://avatars.githubusercontent.com/u/7513948?v=4","gravatar_id":"","url":"https://api.github.com/users/mkysel","html_url":"https://github.com/mkysel","followers_url":"https://api.github.com/users/mkysel/followers","following_url":"https://api.github.com/users/mkysel/following{/other_user}","gists_url":"https://api.github.com/users/mkysel/gists{/gist_id}","starred_url":"https://api.github.com/users/mkysel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkysel/subscriptions","organizations_url":"https://api.github.com/users/mkysel/orgs","repos_url":"https://api.github.com/users/mkysel/repos","events_url":"https://api.github.com/users/mkysel/events{/privacy}","received_events_url":"https://api.github.com/users/mkysel/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-09T17:22:20Z","updated_at":"2022-03-09T18:02:47Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11144","html_url":"https://github.com/MaterializeInc/materialize/pull/11144","diff_url":"https://github.com/MaterializeInc/materialize/pull/11144.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11144.patch","merged_at":null},"body":"Add support for ALTER SECRET required for the platform. For the motivation see https://github.com/MaterializeInc/materialize/pull/11022\r\n\r\nTested manually, all cases parse as expected.\r\n```\r\nmaterialize=> alter secret foo;\r\nERROR:  Expected one of AS or RENAME, found semicolon\r\nLINE 1: alter secret foo;\r\n                        ^\r\n\r\nmaterialize=> alter secret foo as bar;\r\nERROR:  ALTER SECRET not yet supported\r\n\r\nmaterialize=> alter secret foo rename to bar;\r\nERROR:  unknown catalog item 'foo'\r\n\r\nmaterialize=> alter secret if exists foo rename to bar;\r\nALTER INDEX\r\n\r\nmaterialize=> alter secret if exists foo as bar;\r\nERROR:  ALTER SECRET not yet supported\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11143","id":1164179040,"node_id":"PR_kwDOCkIcu840L0cV","number":11143,"title":"debugging: add hidden flag to print tracing log level","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-09T16:40:29Z","updated_at":"2022-03-10T20:44:02Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11143","html_url":"https://github.com/MaterializeInc/materialize/pull/11143","diff_url":"https://github.com/MaterializeInc/materialize/pull/11143.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11143.patch","merged_at":null},"body":"I keep having to add this println locally to debug, and because as we add more filters and change things, its important to ensure the default hits the fast path in tracing macros where the max level is `INFO`, this helps confirm that things are working as intended\r\n\r\n### Motivation\r\n  * This PR adds a feature that has not yet been specified.\r\nLocal testing hidden feature\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11141","id":1164110785,"node_id":"PR_kwDOCkIcu840LmE9","number":11141,"title":"pg-cdc: add timeouts to connection / copy out postgres calls","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T15:42:26Z","updated_at":"2022-03-09T17:50:10Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11141","html_url":"https://github.com/MaterializeInc/materialize/pull/11141","diff_url":"https://github.com/MaterializeInc/materialize/pull/11141.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11141.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\nAs further protection against network-related-stalls (https://github.com/MaterializeInc/materialize/issues/10938) this PR adds in a basic Postgres replication client connection timeout, as well as a per-row timeout for our `CopyOutStream`. Since adding in these timeouts, I have not been able to reproduce the pg-cdc-resumption test failures we were seeing in the linked issue.\r\n\r\n### Motivation\r\n\r\nFixes https://github.com/MaterializeInc/materialize/issues/10938\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A - Same release note as https://github.com/MaterializeInc/materialize/pull/11098","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11138","id":1163954160,"node_id":"I_kwDOCkIcu85FYIfw","number":11138,"title":"regression: substantial increase of the records of indexes on a table","user":{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T13:40:25Z","updated_at":"2022-03-09T13:40:25Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.20.0\n\n### How did you install Materialize?\n\nDocker image\n\n### What was the issue?\n\nAfter an upgrade from 0.15.0 to 0.22.0 there seems to be a substantial increase of the records in indexes on a table.\r\n\r\nSteps to reproduce:\r\n\r\n- Create a table and an index:\r\n\r\n```sql\r\nCREATE table t1 (f1 bigint, f2 bigint);\r\nCREATE INDEX t1_f2_idx ON t1 (f2);\r\n```\r\n\r\n- Generate some records:\r\n\r\n```bash\r\nfor i in {1..1000}; do\r\n    psql -U materialize -h localhost -p 6875 -c \"INSERT INTO t1 (f1, f2) VALUES ($i, $i);\"\r\ndone\r\n```\r\n\r\n- Update and delete some of the records:\r\n\r\n```sql\r\nUPDATE t1 SET f1 = f1 + 1 WHERE (f2 > 500);\r\nDELETE FROM t1 WHERE f2 > 500;\r\n\r\nUPDATE t1 SET f1 = f1 + 1 WHERE (f2 < 500);\r\nDELETE FROM t1 WHERE f2 < 250;\r\n```\r\n\r\n- Check the count of the total records:\r\n\r\n```sql\r\nSELECT COUNT(*) from t1;\r\n// output: 251\r\n```\r\n\r\nBut the records in the index are growing exponentially:\r\n\r\n<img width=\"479\" alt=\"image\" src=\"https://user-images.githubusercontent.com/21223421/157452812-9c51cd95-ec69-40d6-a259-66d0001d6ac3.png\">\r\n\r\nCompaction does not seem to be kicking in.\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11137","id":1163897794,"node_id":"I_kwDOCkIcu85FX6vC","number":11137,"title":"performance regression: Index creation with `--persistent-user-tables` is 2.5-5x slower ","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1469366247,"node_id":"MDU6TGFiZWwxNDY5MzY2MjQ3","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-performance","name":"T-performance","color":"695bd3","default":false,"description":"Theme: performance improvements"},{"id":1771623161,"node_id":"MDU6TGFiZWwxNzcxNjIzMTYx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-persistence","name":"A-persistence","color":"5fefa7","default":false,"description":"Area: persistence of (meta)data"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-03-09T12:47:45Z","updated_at":"2022-03-11T12:39:16Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.22.1-dev (253c608b1)\n\n### How did you install Materialize?\n\nDocker image\n\n### What was the issue?\n\n```\r\nCreateIndex               \\|       0.588 \\|       0.256 \\|    !!YES!!    \\| 2.3 TIMES slower\r\n```\r\n\r\nThe regression:\r\n- seems specific to `--persistent-user-tables`\r\n- is proportional to the size of the table, that is, it is not a one-time startup cost\r\n- the test uses a single table \r\nTo reproduce:\r\n\r\n```\r\n./mzcompose run default --this-tag=unstable-$THIS_SHA --other-tag --root-scenario=CreateIndex --max-runs=\r\n```\r\n\r\nBisection reports the following commit:\r\n\r\n```\r\n3f7aedf33e91b8497c2f1622a4333da15a37de10 is the first bad commit\r\ncommit 3f7aedf33e91b8497c2f1622a4333da15a37de10\r\nMerge: 588a9e720 253c608b1\r\nAuthor: Nikhil Benesch <nikhil.benesch@gmail.com>\r\nDate:   Sat Mar 5 19:50:34 2022 -0500\r\n\r\n    Merge pull request #10883 from benesch/table-unspecial\r\n    \r\n    coord,dataflow: remove special cases for table indexes\r\n```\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11136","id":1163869453,"node_id":"I_kwDOCkIcu85FXz0N","number":11136,"title":"panic: \"timestamp should not go backwards\" with testdrive and --persistent-user-tables","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1771623161,"node_id":"MDU6TGFiZWwxNzcxNjIzMTYx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-persistence","name":"A-persistence","color":"5fefa7","default":false,"description":"Area: persistence of (meta)data"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-09T12:20:24Z","updated_at":"2022-03-09T15:22:03Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nv0.22.1-dev (95905bb1b)\r\n\r\n### How did you install Materialize?\r\n\r\nDocker image\r\n\r\n### What was the issue?\r\n\r\nNightly testdrive with `--persistent-user-tables` has failed:\r\n\r\nhttps://buildkite.com/materialize/nightlies/builds/718#76fd38e9-cb99-4175-85ce-60298226316e\r\n\r\nNote that this is the less-strict form of the assertion, that is, the timestamps are not equal to one another but are spaced apart by 1 timestamp-interval minus 1ms\r\n\r\n```\r\nmaterialized_1     | 2022-03-08T12:48:05.854898Z ERROR panic: timestamp should not go backwards, but 1646743684200 < 1646743684299\r\nmaterialized_1     | thread: timely:work-1\r\nmaterialized_1     | location: src/dataflow/src/source/timestamp.rs:202:13\r\nmaterialized_1     | version: 0.22.1-dev (95905bb1bf021f0b8349df42b32447c9b3a7e73f)\r\nmaterialized_1     | backtrace:\r\nmaterialized_1     |    0: materialized::handle_panic\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/materialized/src/bin/materialized/main.rs:937:21\r\nmaterialized_1     |    1: core::ops::function::Fn::call\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/ops/function.rs:70:5\r\nmaterialized_1     |    2: std::panicking::rust_panic_with_hook\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:610:17\r\nmaterialized_1     |    3: std::panicking::begin_panic_handler::{{closure}}\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:502:13\r\nmaterialized_1     |    4: std::sys_common::backtrace::__rust_end_short_backtrace\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/sys_common/backtrace.rs:139:18\r\nmaterialized_1     |    5: rust_begin_unwind\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:498:5\r\nmaterialized_1     |    6: core::panicking::panic_fmt\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/panicking.rs:116:14\r\nmaterialized_1     |    7: mz_dataflow::source::timestamp::TimestampBindingBox::add_binding\r\nmaterialized_1     |    8: mz_dataflow::source::timestamp::TimestampBindingBox::update_timestamp\r\nmaterialized_1     |       mz_dataflow::source::timestamp::TimestampBindingRc::update_timestamp\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/dataflow/src/source/timestamp.rs:579:9\r\nmaterialized_1     |    9: mz_dataflow::server::storage_state::ActiveStorageState<A,B>::update_rt_timestamps\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/dataflow/src/server/storage_state.rs:472:13\r\nmaterialized_1     |       mz_dataflow::server::Worker<A,SC,CR>::run\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/dataflow/src/server.rs:273:13\r\nmaterialized_1     |   10: mz_dataflow::server::serve_boundary::{{closure}}\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/dataflow/src/server.rs:163:9\r\nmaterialized_1     |       timely::execute::execute::{{closure}}\r\nmaterialized_1     |              at cargo/git/checkouts/timely-dataflow-4c0cc365061cd263/4db679a/timely/src/execute.rs:285:22\r\nmaterialized_1     |       timely_communication::initialize::initialize_from::{{closure}}\r\nmaterialized_1     |              at cargo/git/checkouts/timely-dataflow-4c0cc365061cd263/4db679a/communication/src/initialize.rs:316:33\r\nmaterialized_1     |       std::sys_common::backtrace::__rust_begin_short_backtrace\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/sys_common/backtrace.rs:123:18\r\nmaterialized_1     |   11: std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/thread/mod.rs:477:17\r\nmaterialized_1     |       <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/panic/unwind_safe.rs:271:9\r\nmaterialized_1     |       std::panicking::try::do_call\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:406:40\r\nmaterialized_1     |       std::panicking::try\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:370:19\r\nmaterialized_1     |       std::panic::catch_unwind\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panic.rs:133:14\r\nmaterialized_1     |       std::thread::Builder::spawn_unchecked::{{closure}}\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/thread/mod.rs:476:30\r\nmaterialized_1     |       core::ops::function::FnOnce::call_once{{vtable.shim}}\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/ops/function.rs:227:5\r\nmaterialized_1     |   12: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/alloc/src/boxed.rs:1854:9\r\nmaterialized_1     |       <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/alloc/src/boxed.rs:1854:9\r\nmaterialized_1     |       std::sys::unix::thread::Thread::new::thread_start\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/sys/unix/thread.rs:108:17\r\nmaterialized_1     |   13: start_thread\r\nmaterialized_1     |   14: clone\r\nmaterialized_1     | \r\n```\r\n\r\n### Relevant log output\r\n\r\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11133","id":1163706824,"node_id":"I_kwDOCkIcu85FXMHI","number":11133,"title":"coord: fix cancel peek with clusters","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":3908056952,"node_id":"LA_kwDOCkIcu87o8Dd4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-platform","name":"A-platform","color":"5fefa7","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T09:41:51Z","updated_at":"2022-03-09T09:41:51Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The coordinator's tracking of pending peeks needs to become cluster aware. There's an implementation in @sploiselle/my WIP branch that can be stolen here: https://github.com/MaterializeInc/materialize/compare/MaterializeInc:74d4dc1...benesch:c3eaa4d#","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11132","id":1163667890,"node_id":"PR_kwDOCkIcu840KHo5","number":11132,"title":"Attempt to wire up materialized with remote compute","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-03-09T09:04:29Z","updated_at":"2022-03-09T22:01:33Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11132","html_url":"https://github.com/MaterializeInc/materialize/pull/11132","diff_url":"https://github.com/MaterializeInc/materialize/pull/11132.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11132.patch","merged_at":null},"body":"~Do not merge.~ Idk could merge.\r\n\r\nAttempt to have `materialized` serve two flavors of dataflow server: either a \"conventional\" single process server that uses an in-process event-link boundary between Storage and Compute, or a server that uses TCP for the boundary and which responds to `create_instance` commands to remote instances by attempting a connection.\r\n\r\n### Motivation\r\n\r\nAllow platform experimentation.\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11131","id":1163653636,"node_id":"I_kwDOCkIcu85FW_IE","number":11131,"title":"sql: cluster tracking issue","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T08:49:23Z","updated_at":"2022-03-10T13:42:43Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"This is a tracking issue for the SQL changes required to support clusters.\r\n\r\nDesign doc: https://github.com/MaterializeInc/materialize/blob/main/doc%2Fdeveloper%2Fdesign%2F20220214_create_cluster.md#cluster-sql-syntax-and-semantics\r\n\r\nOutstanding work:\r\n\r\n * [x] #11126\r\n * [x] #11127\r\n * [x] #11128\r\n * [ ] #11129\r\n * [ ] #11130\r\n * [ ] #11133\r\n\r\n@sploiselle I figured I'd file this up so you can work on these slash farm them out as you like! The only one that's sort of urgent is #11127—would be nice to be able to exercise the `drop_compute_instance` code path. Everything else is cosmetic.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11130","id":1163651127,"node_id":"I_kwDOCkIcu85FW-g3","number":11130,"title":"sql: convert cluster IDs back to names in `SHOW CREATE INDEX`","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":3908056952,"node_id":"LA_kwDOCkIcu87o8Dd4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-platform","name":"A-platform","color":"5fefa7","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-09T08:46:36Z","updated_at":"2022-03-09T13:48:02Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"#11126 is likely to land with an ugly defect in `SHOW CREATE INDEX`:\r\n\r\n    CREATE INDEX foo IN CLUSTER [1] ON table (col)\r\n\r\nWe need to unresolve that ID back into a cluster name when we go to print the statement.\r\n\r\n@jkosh44, perhaps you'd like to pick this one up as part of your name resolution work?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11129","id":1163648842,"node_id":"I_kwDOCkIcu85FW99K","number":11129,"title":"Add `cluster_id` to `mz_indexes` and `mz_sinks`","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":3908056952,"node_id":"LA_kwDOCkIcu87o8Dd4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-platform","name":"A-platform","color":"5fefa7","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T08:44:06Z","updated_at":"2022-03-09T08:44:06Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nSee: https://github.com/MaterializeInc/materialize/blob/main/doc%2Fdeveloper%2Fdesign%2F20220214_create_cluster.md#system-catalog-changes\r\n\r\nThis task should also include updating `SHOW INDEXES` and `SHOW SINKS` to display the cluster name, and add the `IN CLUSTER` filter clause.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11128","id":1163647778,"node_id":"I_kwDOCkIcu85FW9si","number":11128,"title":"sql: support `SHOW CLUSTERS`","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T08:42:54Z","updated_at":"2022-03-09T08:42:54Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nSee: https://github.com/MaterializeInc/materialize/blob/main/doc%2Fdeveloper%2Fdesign%2F20220214_create_cluster.md#cluster-sql-syntax-and-semantics","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11123","id":1163392271,"node_id":"I_kwDOCkIcu85FV_UP","number":11123,"title":"catalog: reconsider `i64` as ID type","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"},{"id":3908815277,"node_id":"LA_kwDOCkIcu87o-8mt","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/M-platform-blocker","name":"M-platform-blocker","color":"A71B80","default":false,"description":"Issue that will hold back shipping Materialize Platform"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T01:39:47Z","updated_at":"2022-03-09T01:40:04Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Databases, schemas, and (soon) compute instances use `i64` as their ID type. These would more properly be `u64`s, but due to a SQLite limitation they are presently `i64`s. We should reconsider this decision before committing to it.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11117","id":1163179663,"node_id":"PR_kwDOCkIcu840Ifin","number":11117,"title":"WIP persist apiv2 impl prototype","user":{"login":"danhhz","id":52528,"node_id":"MDQ6VXNlcjUyNTI4","avatar_url":"https://avatars.githubusercontent.com/u/52528?v=4","gravatar_id":"","url":"https://api.github.com/users/danhhz","html_url":"https://github.com/danhhz","followers_url":"https://api.github.com/users/danhhz/followers","following_url":"https://api.github.com/users/danhhz/following{/other_user}","gists_url":"https://api.github.com/users/danhhz/gists{/gist_id}","starred_url":"https://api.github.com/users/danhhz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danhhz/subscriptions","organizations_url":"https://api.github.com/users/danhhz/orgs","repos_url":"https://api.github.com/users/danhhz/repos","events_url":"https://api.github.com/users/danhhz/events{/privacy}","received_events_url":"https://api.github.com/users/danhhz/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-08T21:53:53Z","updated_at":"2022-03-10T23:47:29Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11117","html_url":"https://github.com/MaterializeInc/materialize/pull/11117","diff_url":"https://github.com/MaterializeInc/materialize/pull/11117.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11117.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11116","id":1163176906,"node_id":"PR_kwDOCkIcu840IfGs","number":11116,"title":"persist: disallow empty trace batch parts","user":{"login":"ruchirK","id":4015012,"node_id":"MDQ6VXNlcjQwMTUwMTI=","avatar_url":"https://avatars.githubusercontent.com/u/4015012?v=4","gravatar_id":"","url":"https://api.github.com/users/ruchirK","html_url":"https://github.com/ruchirK","followers_url":"https://api.github.com/users/ruchirK/followers","following_url":"https://api.github.com/users/ruchirK/following{/other_user}","gists_url":"https://api.github.com/users/ruchirK/gists{/gist_id}","starred_url":"https://api.github.com/users/ruchirK/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruchirK/subscriptions","organizations_url":"https://api.github.com/users/ruchirK/orgs","repos_url":"https://api.github.com/users/ruchirK/repos","events_url":"https://api.github.com/users/ruchirK/events{/privacy}","received_events_url":"https://api.github.com/users/ruchirK/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-08T21:51:38Z","updated_at":"2022-03-09T19:58:21Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11116","html_url":"https://github.com/MaterializeInc/materialize/pull/11116","diff_url":"https://github.com/MaterializeInc/materialize/pull/11116.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11116.patch","merged_at":null},"body":"This commit introduces a new invariant that trace batch parts cannot be empty.\r\nPreviously, empty trace batch parts were used to denote empty trace batches. Now,\r\nthere's only one way to represent that: with an empty list of keys.\r\n\r\nThis commit also bumps the encoding version and corresponding golden and upgrade\r\ntests.\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11109","id":1162959607,"node_id":"I_kwDOCkIcu85FUVr3","number":11109,"title":"Combine `SHOW CREATE INDEX` and `pg_get_indexdef` implementations","user":{"login":"jkosh44","id":10800303,"node_id":"MDQ6VXNlcjEwODAwMzAz","avatar_url":"https://avatars.githubusercontent.com/u/10800303?v=4","gravatar_id":"","url":"https://api.github.com/users/jkosh44","html_url":"https://github.com/jkosh44","followers_url":"https://api.github.com/users/jkosh44/followers","following_url":"https://api.github.com/users/jkosh44/following{/other_user}","gists_url":"https://api.github.com/users/jkosh44/gists{/gist_id}","starred_url":"https://api.github.com/users/jkosh44/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkosh44/subscriptions","organizations_url":"https://api.github.com/users/jkosh44/orgs","repos_url":"https://api.github.com/users/jkosh44/repos","events_url":"https://api.github.com/users/jkosh44/events{/privacy}","received_events_url":"https://api.github.com/users/jkosh44/received_events","type":"User","site_admin":false},"labels":[{"id":1244583500,"node_id":"MDU6TGFiZWwxMjQ0NTgzNTAw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/D-good%20first%20issue","name":"D-good first issue","color":"eac638","default":false,"description":"Difficulty: Good for newcomers"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-08T18:01:36Z","updated_at":"2022-03-08T18:01:36Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"<!-- Contributor use only. -->\r\nIn #10980 I added support for the `pg_get_index` function which recreates the command used to create the index. I was not aware that [`SHOW CREATE INDEX`](https://materialize.com/docs/sql/show-create-index/) already existed with the same functionality. Ideally the `pg_get_indexdef` implementation should be refactored to re-use the `SHOW CREATE INDEX` implementation.\r\n\r\nNote: `pg_get_indexdef` adds the `USING <index-type>` syntax to the output to match PostgreSQL behavior and so that the meta-command `\\d <object>` can properly parse the output. `SHOW CREATE INDEX` does not contain this syntax in the output currently. Since Materialize only supports a single index type, it's valid syntax to include `USING arrangement` when creating an index, but it's ignored. I think this output should be added to `SHOW CREATE INDEX`, still it's something to consider.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11105","id":1162843742,"node_id":"PR_kwDOCkIcu840HYkH","number":11105,"title":"docs:tail new features","user":{"login":"joacoc","id":11491779,"node_id":"MDQ6VXNlcjExNDkxNzc5","avatar_url":"https://avatars.githubusercontent.com/u/11491779?v=4","gravatar_id":"","url":"https://api.github.com/users/joacoc","html_url":"https://github.com/joacoc","followers_url":"https://api.github.com/users/joacoc/followers","following_url":"https://api.github.com/users/joacoc/following{/other_user}","gists_url":"https://api.github.com/users/joacoc/gists{/gist_id}","starred_url":"https://api.github.com/users/joacoc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joacoc/subscriptions","organizations_url":"https://api.github.com/users/joacoc/orgs","repos_url":"https://api.github.com/users/joacoc/repos","events_url":"https://api.github.com/users/joacoc/events{/privacy}","received_events_url":"https://api.github.com/users/joacoc/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-08T16:10:15Z","updated_at":"2022-03-08T21:56:20Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11105","html_url":"https://github.com/MaterializeInc/materialize/pull/11105","diff_url":"https://github.com/MaterializeInc/materialize/pull/11105.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11105.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n**Try to improve how TAIL is perceived and what is capable to do.**\r\n\r\nSince `TAIL` now has `SNAPSHOT` enabled by default and is now able to stream updates from an arbitrary `SELECT` statement, it makes easier to experience what is possible to acchieve. \r\n\r\nAs a side effect:\r\n* Doing `tail table` becomes a shorthand for `tail (select * from table)` \r\n* Using a `tail` by default will `query` (Snapshot) and `stream` updates.\r\n\r\nObjectives:\r\n* Setting the focus in the feature `tail (statement)` rather than `tail object`\r\n* Turning examples into plug & play\r\n* Add more languages examples: PHP and JAVA.  [GO Pending]\r\n* Help troubleshoot how many TAILS are currently running in Materialize\r\n* Guidethrough on how to use `AS OF` with `TAIL`\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11103","id":1162756926,"node_id":"PR_kwDOCkIcu840HGM9","number":11103,"title":"Command reconciliation","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-08T14:56:42Z","updated_at":"2022-03-10T18:35:38Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11103","html_url":"https://github.com/MaterializeInc/materialize/pull/11103","diff_url":"https://github.com/MaterializeInc/materialize/pull/11103.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11103.patch","merged_at":null},"body":"Add a client that reconciles commands from the ADAPTER to COMPUTE/STORAGE.\r\n\r\nThis is a work-in-progress.\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11100","id":1162710540,"node_id":"I_kwDOCkIcu85FTY4M","number":11100,"title":"creating a source from a kafka topic generated by debezium + transforms (logical table)","user":{"login":"docteurklein","id":109846,"node_id":"MDQ6VXNlcjEwOTg0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/109846?v=4","gravatar_id":"","url":"https://api.github.com/users/docteurklein","html_url":"https://github.com/docteurklein","followers_url":"https://api.github.com/users/docteurklein/followers","following_url":"https://api.github.com/users/docteurklein/following{/other_user}","gists_url":"https://api.github.com/users/docteurklein/gists{/gist_id}","starred_url":"https://api.github.com/users/docteurklein/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/docteurklein/subscriptions","organizations_url":"https://api.github.com/users/docteurklein/orgs","repos_url":"https://api.github.com/users/docteurklein/repos","events_url":"https://api.github.com/users/docteurklein/events{/privacy}","received_events_url":"https://api.github.com/users/docteurklein/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-03-08T14:16:36Z","updated_at":"2022-03-11T09:18:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.22.0\n\n### How did you install Materialize?\n\nDocker image\n\n### What was the issue?\n\nthe avro registry doesn't seem to include the extra key added by debezium `ByLogicalTableRouter` transformer (https://debezium.io/documentation/reference/1.8/transformations/topic-routing.html#_ensure_unique_key).\r\n\r\nHere is my debezium connector config:\r\n```\r\ncurl --request POST --url 0:8083/connectors --header 'Content-Type: application/json' --data @- << EOF\r\n{\r\n  \"name\": \"$1\",\r\n  \"config\": {\r\n    \"connector.class\": \"io.debezium.connector.mysql.MySqlConnector\",\r\n    \"tasks.max\": \"1\",\r\n    \"database.hostname\": \"mysql\",\r\n    \"database.port\": \"3306\",\r\n    \"database.user\": \"root\",\r\n    \"database.password\": \"root\",\r\n    \"database.server.name\": \"$1\",\r\n    \"database.include.list\": \"$1\",\r\n    \"database.history.kafka.bootstrap.servers\": \"redpanda:9092\",\r\n    \"database.history.kafka.topic\": \"schema-changes.$1\",\r\n    \"database.allowPublicKeyRetrieval\": true,\r\n    \"transforms\": \"Reroute\",\r\n    \"transforms.Reroute.type\": \"io.debezium.transforms.ByLogicalTableRouter\",\r\n    \"transforms.Reroute.topic.regex\": \"^$1\\\\\\.$1\\\\\\.(.*)$\",\r\n    \"transforms.Reroute.topic.replacement\": \"all_pim.\\$1\",\r\n    \"transforms.Reroute.key.field.name\": \"tenant\",\r\n    \"transforms.Reroute.key.field.regex\": \".*\",\r\n    \"transforms.Reroute.key.field.replacement\": \"$1\"\r\n  }\r\n}\r\nEOF\r\n\r\n```\r\n\r\nWhen I try to create a source from it, it fails about a lacking key: \r\n```\r\ncreate source all_pim.product\r\n  from kafka broker 'redpanda:9092'\r\n  topic 'all_pim.pim_catalog_product'\r\n  format avro\r\n  using confluent schema registry 'http://redpanda:8081'\r\n  envelope debezium\r\n;\r\nERROR:  Value schema missing primary key column: tenant\r\n```\r\n\r\nAm I missing something?\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11097","id":1162500008,"node_id":"I_kwDOCkIcu85FSleo","number":11097,"title":"Introduce a headless controller to enable COMPUTE development without waiting for ADAPTER","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":1465753202,"node_id":"MDU6TGFiZWwxNDY1NzUzMjAy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dataflow","name":"A-dataflow","color":"5fefa7","default":false,"description":"Area: dataflow"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-08T10:44:30Z","updated_at":"2022-03-08T10:44:30Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nCurrently, all features provided by COMPUTE need a corresponding implementation within ADAPTER to expose them to users and testing. This limits the speed at which COMPUTE features can be developed and tested.\r\n\r\nFor this reason, it would be good to introduce a headless controller that receives inputs using the same protocol that ADAPTER speaks but which would allow us to rapidly test COMPUTE's features.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11096","id":1162357204,"node_id":"I_kwDOCkIcu85FSCnU","number":11096,"title":"feature-benchmark: Allow detection of progressive slowdowns during the execution of a single scenario","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1467666356,"node_id":"MDU6TGFiZWwxNDY3NjY2MzU2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/D-good%20second%20issue","name":"D-good second issue","color":"eac638","default":false,"description":"Difficulty: Good for a newcomer who's warmed up"},{"id":1741965254,"node_id":"MDU6TGFiZWwxNzQxOTY1MjU0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-testing","name":"T-testing","color":"695bd3","default":false,"description":"Theme: tests or test infrastructure"}],"state":"open","locked":false,"assignee":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"assignees":[{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-03-08T08:21:48Z","updated_at":"2022-03-08T08:35:55Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Goal(s)\n\nIn https://github.com/MaterializeInc/materialize/issues/11071 we had a situation where a scenario was getting progressively slower between individual measurements. Since the feature benchmark framework takes the minimum measurement, this gradual degradation was not visible until the logs were manually reviewed.\r\n\r\nTo catch such situations in the future we could do one of the following:\r\n1. the `min` strategy can be replaced with a more conventional benchmark measurement using the average, percentiles, outlier removal, etc. A scenario that is getting progressively slower would have scored badly on such a measurement and a regression would have been signaled.\r\n2. we could keep the `min` strategy and add a follow-up check for performance degradation. We can collect all the measurements and pass them through a linear regression library. The slope of the line that is thus produced will tell us if there is an ongoing slowdown or not.\r\n\r\nThe advantage of doing No 2 is that the existing feature benchmark will be minimally perturbed so that there is no long followup stabilization period that will come from changing the measurement strategy.\n\n### Steps\n\n1. Pick a python library that does linear regression\r\n2. Implement an aggregator that accumulates the measurements and reports the slope of the linear function\r\n3. Figure out a way to signal failure for a particular scenario if the angle of the slope is steeper than some degree.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11087","id":1161967655,"node_id":"I_kwDOCkIcu85FQjgn","number":11087,"title":"Relax logical compaction to source frequency","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-07T21:57:41Z","updated_at":"2022-03-07T21:57:41Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nOur logical compaction is \"aggressive\" in that it uses 1ms as permission to compact. When a collection ticks at a coarser frequency, say once per second, this compaction leaves us with a collection that is unusable for a second: the `upper` ticks forward by one second, and compaction announces \"render it invalid until that next second minus one millisecond\".\r\n\r\nWe could fix this by having the minimum compaction for a source be a known lower bound on the frequency with which it ticks. If a source ticks once per second, the minimum compaction should be one second.\r\n\r\ncc: @mjibson who is regularly frustrated by this.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11085","id":1161829470,"node_id":"I_kwDOCkIcu85FQBxe","number":11085,"title":"[kafka resumption tests] Enable toxiproxy-timeout-hold.td error mode","user":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":2187378159,"node_id":"MDU6TGFiZWwyMTg3Mzc4MTU5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sink","name":"A-sink","color":"5fefa7","default":false,"description":"Area: sinks"}],"state":"open","locked":false,"assignee":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"assignees":[{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-03-07T19:25:01Z","updated_at":"2022-03-07T19:25:01Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nmaster\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nWe should enable this.  It currently sometimes fails so it's not reliable enough to be a part of the blocking CI suite.\r\n\r\nI don't believe this to be a correctness issue because we do fail with a fatal error if this occurs -- the sink is just hosed.  So the UX is not ideal but correctness is not an issue as far as I can tell.\r\n\r\nHere's an example failure: https://buildkite.com/materialize/tests/builds/29568#ab6fdea4-29bd-498b-9cb9-8744a99a81e8\n\n### Relevant log output\n\n```source\nmaterialized_1     | 2022-02-25T22:08:06.183479Z  INFO mz_coord::catalog: create sink materialize.public.output (u6)\r\nmaterialized_1     | 2022-02-25T22:08:11.672458Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:16.673554Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:21.673941Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:26.674894Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:31.675868Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:36.264893Z  INFO librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Disconnected (after 30073ms in state UP)\r\nmaterialized_1     | 2022-02-25T22:08:36.264982Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: Disconnected (after 30073ms in state UP)\r\nmaterialized_1     | 2022-02-25T22:08:36.676654Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:40.190312Z  WARN librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Disconnected (after 33999ms in state UP)\r\nmaterialized_1     | 2022-02-25T22:08:40.190393Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: Disconnected (after 33999ms in state UP)\r\nmaterialized_1     | 2022-02-25T22:08:50.262868Z  INFO librdkafka: REQTMOUT [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Timed out ApiVersionRequest in flight (after 10072ms, timeout #0)\r\nmaterialized_1     | 2022-02-25T22:08:50.262961Z  WARN librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: ApiVersionRequest failed: Local: Timed out: probably due to broker version < 0.10 (see api.version.request configuration) (after 10072ms in state APIVERSION_QUERY)\r\nmaterialized_1     | 2022-02-25T22:08:50.263000Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: ApiVersionRequest failed: Local: Timed out: probably due to broker version < 0.10 (see api.version.request configuration) (after 10072ms in state APIVERSION_QUERY)\r\nmaterialized_1     | 2022-02-25T22:08:50.263055Z  WARN librdkafka: REQTMOUT [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Timed out 1 in-flight, 0 retry-queued, 0 out-queue, 0 partially-sent requests\r\nmaterialized_1     | 2022-02-25T22:09:00.515944Z  INFO librdkafka: REQTMOUT [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Timed out ApiVersionRequest in flight (after 10009ms, timeout #0)\r\nmaterialized_1     | 2022-02-25T22:09:00.516036Z  WARN librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: ApiVersionRequest failed: Local: Timed out: probably due to broker version < 0.10 (see api.version.request configuration) (after 10009ms in state APIVERSION_QUERY, 1 identical error(s) suppressed)\r\nmaterialized_1     | 2022-02-25T22:09:00.516109Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: ApiVersionRequest failed: Local: Timed out: probably due to broker version < 0.10 (see api.version.request configuration) (after 10009ms in state APIVERSION_QUERY, 1 identical error(s) suppressed)\r\nmaterialized_1     | 2022-02-25T22:09:00.516147Z  WARN librdkafka: REQTMOUT [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Timed out 1 in-flight, 0 retry-queued, 0 out-queue, 0 partially-sent requests\r\nmaterialized_1     | 2022-02-25T22:09:07.340075Z  INFO librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Disconnected while requesting ApiVersion: might be caused by incorrect security.protocol configuration (connecting to a SSL listener?) or broker version is < 0.10 (see api.version.request) (after 5766ms in state APIVERSION_QUERY)\r\nmaterialized_1     | 2022-02-25T22:09:07.340125Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: Disconnected while requesting ApiVersion: might be caused by incorrect security.protocol configuration (connecting to a SSL listener?) or broker version is < 0.10 (see api.version.request) (after 5766ms in state APIVERSION_QUERY)\r\nmaterialized_1     | 2022-02-25T22:09:07.486988Z ERROR mz_dataflow_types::client::controller::compute: COMPUTE::allow_compaction attempted frontier regression for id Transient(54): Antichain { elements: [] } to Antichain { elements: [1645826947440] }\r\nmaterialized_1     | 2022-02-25T22:09:10.798491Z  INFO mz_coord::catalog: drop sink materialize.public.output (u6)\r\n```\n```\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11084","id":1161791408,"node_id":"PR_kwDOCkIcu840D6sG","number":11084,"title":"Expand formalism docs","user":{"login":"aphyr","id":3748,"node_id":"MDQ6VXNlcjM3NDg=","avatar_url":"https://avatars.githubusercontent.com/u/3748?v=4","gravatar_id":"","url":"https://api.github.com/users/aphyr","html_url":"https://github.com/aphyr","followers_url":"https://api.github.com/users/aphyr/followers","following_url":"https://api.github.com/users/aphyr/following{/other_user}","gists_url":"https://api.github.com/users/aphyr/gists{/gist_id}","starred_url":"https://api.github.com/users/aphyr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aphyr/subscriptions","organizations_url":"https://api.github.com/users/aphyr/orgs","repos_url":"https://api.github.com/users/aphyr/repos","events_url":"https://api.github.com/users/aphyr/events{/privacy}","received_events_url":"https://api.github.com/users/aphyr/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-07T18:46:30Z","updated_at":"2022-03-10T22:05:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11084","html_url":"https://github.com/MaterializeInc/materialize/pull/11084","diff_url":"https://github.com/MaterializeInc/materialize/pull/11084.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11084.patch","merged_at":null},"body":"This rewrites and expands the developer platform formalism docs up to the storage & compute layer discussion. It begins with a quick sketch of the entire document, introduces new terms and properties for implicit concepts, adds a diagram to help clarify the way that frontiers bound pTVC times, uses partial orders for times throughout, decouples time-function from update-set representations of TVCs and partial TVCs, discusses compacting and appending to pTVCs and gestures vaguely in the direction of those transformations' correctness, and makes immutability/mutability and modeled vs real time explicit.\r\n\r\n### Motivation\r\n\r\nThis PR aims to help make the formalism docs more approachable for new readers.\r\n\r\n### Tips for reviewer\r\n\r\nSeveral things in this rewrite I've guessed at or come up with names from scratch, so I'd appreciate detailed review!\r\n\r\nSee the rich markdown diff view!\r\n\r\n### Testing\r\n\r\nThere are no code changes required\r\n\r\n### Release notes\r\n\r\nThere are no user-facing changes, other than documentation.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11081","id":1161644017,"node_id":"I_kwDOCkIcu85FPUfx","number":11081,"title":"Validate order of correlated quantifiers.","user":{"login":"wangandi","id":5522362,"node_id":"MDQ6VXNlcjU1MjIzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/5522362?v=4","gravatar_id":"","url":"https://api.github.com/users/wangandi","html_url":"https://github.com/wangandi","followers_url":"https://api.github.com/users/wangandi/followers","following_url":"https://api.github.com/users/wangandi/following{/other_user}","gists_url":"https://api.github.com/users/wangandi/gists{/gist_id}","starred_url":"https://api.github.com/users/wangandi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wangandi/subscriptions","organizations_url":"https://api.github.com/users/wangandi/orgs","repos_url":"https://api.github.com/users/wangandi/repos","events_url":"https://api.github.com/users/wangandi/events{/privacy}","received_events_url":"https://api.github.com/users/wangandi/received_events","type":"User","site_admin":false},"labels":[{"id":2339219515,"node_id":"MDU6TGFiZWwyMzM5MjE5NTE1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/needs-details","name":"needs-details","color":"F9D0C4","default":false,"description":"Needs more details before work proceeds"},{"id":2456706162,"node_id":"MDU6TGFiZWwyNDU2NzA2MTYy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/needs-discussion","name":"needs-discussion","color":"F9D0C4","default":false,"description":"Requires discussion before work proceeds"},{"id":3020087139,"node_id":"MDU6TGFiZWwzMDIwMDg3MTM5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-optimization","name":"A-optimization","color":"5fefa7","default":false,"description":"Area: query optimization and transformation"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-07T16:28:18Z","updated_at":"2022-03-07T17:51:58Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"See discussion at https://github.com/MaterializeInc/materialize/pull/10901#discussion_r819167043 and https://github.com/MaterializeInc/materialize/pull/10901#discussion_r819153981.\r\n\r\nCurrently, a Query Graph Model is structured such that post-order visitation will visit the input box of a particular quantifier `Qi` before the input box of the correlated quantifier `Qj` that depends on it. This is quite convenient because it means that we know that attributes have already been computed for `Qi` when we are trying to perform an operation on `Qj`.\r\n\r\nWe should ensure that the structure preserves this property as we add more features to QGM by adding a constraint to the QGM validator.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11078","id":1161522016,"node_id":"I_kwDOCkIcu85FO2tg","number":11078,"title":"Refactor `Client` trait into independent stream and sink.","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[{"id":1465753202,"node_id":"MDU6TGFiZWwxNDY1NzUzMjAy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dataflow","name":"A-dataflow","color":"5fefa7","default":false,"description":"Area: dataflow"},{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-07T14:51:55Z","updated_at":"2022-03-07T14:51:55Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The `Client` trait serves as a well-defined boundary between the coordinator and dataflow layer. It allows sending commands and receiving responses:\r\n```\r\n/// A client to a running dataflow server.\r\n#[async_trait(?Send)]\r\npub trait Client<T = mz_repr::Timestamp> {\r\n    /// Sends a command to the dataflow server.\r\n    ///\r\n    /// The command can error for various reasons.\r\n    async fn send(&mut self, cmd: Command<T>) -> Result<(), anyhow::Error>;\r\n\r\n    /// Receives the next response from the dataflow server.\r\n    ///\r\n    /// This method blocks until the next response is available, or, if the\r\n    /// dataflow server has been shut down, returns `None`.\r\n    async fn recv(&mut self) -> Option<Response<T>>;\r\n}\r\n```\r\n\r\nWe could refactor the code to work on `Stream` and `Sink`, which would avoid the use of the `Client` trait and provide more idiomatic building blocks to compose streams and sinks.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11076","id":1161510984,"node_id":"PR_kwDOCkIcu840C_EN","number":11076,"title":"sql: move unnest to pg_catalog","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-07T14:42:53Z","updated_at":"2022-03-07T19:42:19Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11076","html_url":"https://github.com/MaterializeInc/materialize/pull/11076","diff_url":"https://github.com/MaterializeInc/materialize/pull/11076.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11076.patch","merged_at":null},"body":"The version of `unnest` that takes arrays as arguments rightly belongs in `pg_catalog`, not `mz_catalog`.\r\n\r\n### Motivation\r\n\r\nThis PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Move `unnest(arrayany)` to the `pg_catalog` schema. Previously, it had unintentionally been in the `mz_catalog` schema.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11072","id":1161298980,"node_id":"I_kwDOCkIcu85FOAQk","number":11072,"title":"regression: wrong result when joining with an unmaterialized source ","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":2240473760,"node_id":"MDU6TGFiZWwyMjQwNDczNzYw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-correctness","name":"T-correctness","color":"695bd3","default":false,"description":"Theme: relates to consistency and correctness of results."},{"id":3052793141,"node_id":"MDU6TGFiZWwzMDUyNzkzMTQx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/P1","name":"P1","color":"d10000","default":false,"description":"Priority: critical issue, panic, etc. drop what you're doing and fix immediately"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-03-07T11:33:39Z","updated_at":"2022-03-11T00:01:58Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nv0.22.1-dev (9611cc695)\r\n\r\n### How did you install Materialize?\r\n\r\nDocker image\r\n\r\n### What was the issue?\r\n\r\nThe `joins.td` test fails repeatably as follows:\r\n\r\n```\r\n> CREATE SOURCE mods_unmat FROM KAFKA BROKER 'kafka:9092' TOPIC 'testdrive-mods-3568222347' FORMAT AVRO USING SCHEMA '{   \"type\": \"record\",   \"name\": \"envelope\",   \"fields\": [     {       \"name\": \"before\",       \"type\": [         {           \"name\": \"row\",           \"type\": \"record\",           \"fields\": [             {\"name\": \"num\", \"type\": \"long\"},             {\"name\": \"mod\", \"type\": \"string\"}           ]         },         \"null\"       ]     },     { \"name\": \"after\", \"type\": [\"row\", \"null\"] }   ] }' ENVELOPE DEBEZIUM\r\n--\r\n  | rows match; continuing at ts 1646637643.033189\r\n  | > CREATE VIEW test15 (names_num, names_name, mods_num, mods_mod) AS SELECT * FROM names FULL OUTER JOIN mods_unmat ON 1 = 0;\r\n  | rows match; continuing at ts 1646637643.0903223\r\n  | > SELECT * FROM test15;\r\n  | rows didn't match; sleeping to see if dataflow catches up 50ms 75ms 112ms 169ms 253ms 380ms 570ms 854ms 1s 2s 3s 4s 6s 10s 893ms\r\n  | joins.td:237:1: error: non-matching rows: expected:\r\n  | [[\"1\", \"one\", \"<null>\", \"<null>\"], [\"2\", \"two\", \"<null>\", \"<null>\"], [\"3\", \"three\", \"<null>\", \"<null>\"], [\"<null>\", \"<null>\", \"0\", \"even\"], [\"<null>\", \"<null>\", \"1\", \"odd\"], [\"<null>\", \"<null>\", \"2\", \"even\"]]\r\n  | got:\r\n  | [[\"1\", \"one\", \"<null>\", \"<null>\"], [\"2\", \"two\", \"<null>\", \"<null>\"], [\"3\", \"three\", \"<null>\", \"<null>\"]]\r\n  | Diff:\r\n  | row missing: [\"<null>\", \"<null>\", \"0\", \"even\"]\r\n  | row missing: [\"<null>\", \"<null>\", \"1\", \"odd\"]\r\n  | row missing: [\"<null>\", \"<null>\", \"2\", \"even\"]\r\n  |  \r\n  | \\|\r\n  | 236 \\|\r\n  | 237 \\| > SELECT * FROM test15;\r\n  | \\| ^\r\n\r\n```\r\n\r\nThe failure is:\r\n- permanent, that is, the result never becomes correct no matter the timeout/retries\r\n- goes away if the source is dropped and recreated\r\n\r\nThis is seen both on the `--workers 1` and the `cluster` Nightly tests. I am able to reproduce it by running the following loop on a `c5.2xlarge` machine:\r\n\r\n```\r\n while bash -c -e \"./mzcompose down -v ; ./mzcompose run default --workers 1 joins.td\" ; do : ; done\r\n```\r\n\r\nBisection reports the following commit:\r\n\r\n```\r\n3af43e25388609cb43b7ab352ffe03d34f89d552 is the first bad commit\r\ncommit 3af43e25388609cb43b7ab352ffe03d34f89d552\r\nAuthor: Nikhil Benesch <nikhil.benesch@gmail.com>\r\nDate:   Sat Mar 5 14:53:30 2022 -0500\r\n\r\n    coord: allow SELECTing from unmaterialized sources\r\n```\r\n\r\n### Relevant log output\r\n\r\n```source\r\nNo errors in the Mz logs.\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11071","id":1161090986,"node_id":"I_kwDOCkIcu85FNNeq","number":11071,"title":"performance regression: UPDATE statements now ~50% slower against user tables","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"assignees":[{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false}],"milestone":null,"comments":17,"created_at":"2022-03-07T08:58:04Z","updated_at":"2022-03-11T07:03:41Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\n3f7aedf33e91b8497c2f1622a4333da15a37de10\r\n\r\n### How did you install Materialize?\r\n\r\nDocker image\r\n\r\n### What was the issue?\r\n\r\nThe `Update` feature benchmark is consistently reporting a performance regression:\r\n\r\n```\r\nUpdate                    \\|       1.606 \\|       1.096 \\|    !!YES!!    \\| 46.5 pct   slower  |  \r\n```\r\n\r\ngit bisect reports the following revision:\r\n\r\n```\r\n3f7aedf33e91b8497c2f1622a4333da15a37de10 is the first bad commit\r\ncommit 3f7aedf33e91b8497c2f1622a4333da15a37de10\r\nMerge: 588a9e720 253c608b1\r\nAuthor: Nikhil Benesch <nikhil.benesch@gmail.com>\r\nDate:   Sat Mar 5 19:50:34 2022 -0500\r\n\r\n    Merge pull request #10883 from benesch/table-unspecial\r\n    \r\n    coord,dataflow: remove special cases for table indexes\r\n\r\n```\r\n\r\nThe feature benchmark reports the **fastest** time the workload could execute in a given revision. There is also the problem that repeated executions of the same workload get progressively slower and slower:\r\n\r\n\r\n```\r\nMeasurement: 1.6061623096466064\r\nMeasurement: 1.9834446907043457\r\nMeasurement: 2.016334056854248\r\nMeasurement: 2.423788547515869\r\nMeasurement: 2.916515827178955\r\n...\r\nMeasurement: 9.298703670501709\r\nMeasurement: 9.861934185028076\r\nMeasurement: 8.153981685638428\r\nMeasurement: 8.687877178192139\r\nMeasurement: 8.837841987609863\r\nMeasurement: 9.046060562133789\r\nMeasurement: 9.261691808700562\r\n```\r\n\r\nWhat is special about the `Update` benchmark workload is that individual measurements operate on the same table without dropping it between measurements. The performance numbers indicate that some cruft is being accumulated in the process, e.g. no compaction is happening or something else long those lines.\r\n\r\n### Relevant log output\r\n\r\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11070","id":1160980116,"node_id":"PR_kwDOCkIcu840BVBm","number":11070,"title":"dataflow-types: beef up IndexDesc and use it more","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-07T06:53:23Z","updated_at":"2022-03-08T11:37:22Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11070","html_url":"https://github.com/MaterializeInc/materialize/pull/11070","diff_url":"https://github.com/MaterializeInc/materialize/pull/11070.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11070.patch","merged_at":null},"body":"Add two additional fields to the `IndexDesc` that are often stashed\r\nalongside it: the ID of the index itself and the type of the relation on\r\nwhich the index is built. The only cost is that the `index_imports`\r\nfield now stores index IDs twice, but that seems like a small price to\r\npay.\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11055","id":1160728279,"node_id":"PR_kwDOCkIcu840AgcI","number":11055,"title":"build(deps): bump parquet2 from 0.8.1 to 0.10.3","user":{"login":"dependabot[bot]","id":49699333,"node_id":"MDM6Qm90NDk2OTkzMzM=","avatar_url":"https://avatars.githubusercontent.com/in/29110?v=4","gravatar_id":"","url":"https://api.github.com/users/dependabot%5Bbot%5D","html_url":"https://github.com/apps/dependabot","followers_url":"https://api.github.com/users/dependabot%5Bbot%5D/followers","following_url":"https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dependabot%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/dependabot%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/dependabot%5Bbot%5D/repos","events_url":"https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/dependabot%5Bbot%5D/received_events","type":"Bot","site_admin":false},"labels":[{"id":1372937472,"node_id":"MDU6TGFiZWwxMzcyOTM3NDcy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dependencies","name":"A-dependencies","color":"5fefa7","default":false,"description":"Area: dependency upgrades"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-06T22:03:58Z","updated_at":"2022-03-07T18:39:27Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11055","html_url":"https://github.com/MaterializeInc/materialize/pull/11055","diff_url":"https://github.com/MaterializeInc/materialize/pull/11055.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11055.patch","merged_at":null},"body":"Bumps parquet2 from 0.8.1 to 0.10.3.\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=parquet2&package-manager=cargo&previous-version=0.8.1&new-version=0.10.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11048","id":1160654783,"node_id":"I_kwDOCkIcu85FLi-_","number":11048,"title":"RT inputs should provide linearizability properties","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-06T16:32:18Z","updated_at":"2022-03-06T16:32:18Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nOur RT sources assign timestamps as they read data, not as soon as they know data exists. For example, `FILE` sources know the length of a file as it is opened, and *could* assign `since` to all of the timestamps for existing offsets. By so doing, all subsequent uses of that source would be certain to have complete data in it.\r\n\r\nThis is a repetition of https://github.com/MaterializeInc/materialize/issues/2310 but with a correctness angle rather than a performance angle. We cannot test RT sources without retries until this is fixed. More fundamentally, this is really a glaring consistency issue: folks look at their data and know that it is there, and then query MZ and it is not reflected yet despite us announcing it as up to date.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11041","id":1160480349,"node_id":"I_kwDOCkIcu85FK4Zd","number":11041,"title":"coord: build confidence in new transaction handling","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":2314510340,"node_id":"MDU6TGFiZWwyMzE0NTEwMzQw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/M-release-blocker","name":"M-release-blocker","color":"cc0000","default":false,"description":"Critical issue that should block *any* release if not fixed"}],"state":"open","locked":false,"assignee":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"assignees":[{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},{"login":"jkosh44","id":10800303,"node_id":"MDQ6VXNlcjEwODAwMzAz","avatar_url":"https://avatars.githubusercontent.com/u/10800303?v=4","gravatar_id":"","url":"https://api.github.com/users/jkosh44","html_url":"https://github.com/jkosh44","followers_url":"https://api.github.com/users/jkosh44/followers","following_url":"https://api.github.com/users/jkosh44/following{/other_user}","gists_url":"https://api.github.com/users/jkosh44/gists{/gist_id}","starred_url":"https://api.github.com/users/jkosh44/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkosh44/subscriptions","organizations_url":"https://api.github.com/users/jkosh44/orgs","repos_url":"https://api.github.com/users/jkosh44/repos","events_url":"https://api.github.com/users/jkosh44/events{/privacy}","received_events_url":"https://api.github.com/users/jkosh44/received_events","type":"User","site_admin":false},{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false}],"milestone":null,"comments":9,"created_at":"2022-03-06T00:30:52Z","updated_at":"2022-03-11T10:42:41Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"In the interest of making forward progress on platform, @frankmcsherry and I pressed forward with a number of reasonably scary PRs to the coordinator over the weekend. It would be great to get post-merge reviews (or at least quick skims) on the following PRs:\r\n\r\n  * #11019 (@frankmcsherry added)\r\n  * #11035\r\n  * #11036 (@aljoscha you might want to take a look at this one too)\r\n  * #11037\r\n  * #10883 / #11039\r\n  * #11069\r\n\r\nMore PRs may be added over the course of the weekend.\r\n\r\nI'm marking this as a release blocker in an attempt to _relieve_ pressure. I want to make it clear that we won't ship the next release until we've got more consensus that we didn't miss something major in these PRs. We should 100% skip the release this week if y'all need more time to review.\r\n\r\n## Potential regressions\r\n\r\n* [ ] #11071\r\n* [ ] #11072\r\n* [ ] #11137\r\n* [x] #11134\r\n* [ ] #11155","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11032","id":1160051594,"node_id":"I_kwDOCkIcu85FJPuK","number":11032,"title":"sql: add tests for connections that execute multiple peeks simultaneously","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-03-04T21:05:33Z","updated_at":"2022-03-08T18:49:17Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Add tests for connections that have multiple peeks in flight. While reviewing #11016, we noticed that the existing code would have been wrong if connections could have multiple peeks alive at the same moment, and we believe that's possible via portals.\r\n\r\nMore context: https://github.com/MaterializeInc/materialize/pull/11016#discussion_r819837650\r\n\r\ncc @jkosh44 @mjibson \r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11025","id":1159561977,"node_id":"PR_kwDOCkIcu84z82sN","number":11025,"title":"Design document for the Zippy testing framework","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2022-03-04T11:50:39Z","updated_at":"2022-03-09T14:34:03Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11025","html_url":"https://github.com/MaterializeInc/materialize/pull/11025","diff_url":"https://github.com/MaterializeInc/materialize/pull/11025.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11025.patch","merged_at":null},"body":"This document describes the overall design of a new framework for testing Platform and all parts connected to it.\r\n\r\nRendered view: https://github.com/philip-stoev/materialize/blob/0119667cea45c9b6551e9c920e75982d21e23010/doc/developer/design/2022-02-28_zippy_testing_framework.md","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11021","id":1159195489,"node_id":"I_kwDOCkIcu85FF-th","number":11021,"title":"Implement heartbeat mechanism for Postgres replication to prevent upstream WAL disk usage issues","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":2348462791,"node_id":"MDU6TGFiZWwyMzQ4NDYyNzkx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-source","name":"A-source","color":"5fefa7","default":false,"description":"Area: sources"},{"id":3243762798,"node_id":"MDU6TGFiZWwzMjQzNzYyNzk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-PG","name":"T-PG","color":"695bd3","default":false,"description":"Theme: postgres sources (Sources & Sinks)"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-04T03:15:04Z","updated_at":"2022-03-04T03:15:04Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nThe basic problem is that Postgres shares one pool of WAL segments across all tables in all schemas, so if a server has some tables which receive lots of traffic and others which receive very little and replication is setup to Materialize only for some subset of low traffic tables it can cause elevated disk usage on the Postgres server and depending on server and replication config can lead to further negative outcomes for the upstream Postgres server. This disk usage is triggered because the server can only reclaim WAL segments when all references to WAL locations point to an LSN newer than the last LSN in the segment, so if a replication slot does not receive traffic for long periods of time it will hold open a reference to a very old LSN and no segments since then will be reclaimable.\r\n\r\nThe \"standard\" solution is to have a dedicated table with a tiny footprint in the publication, upon which an update is performed periodically in order to ensure that the publication has at least 1 event to send in whatever time period is necessary to prevent disk issues. ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11020","id":1159173674,"node_id":"I_kwDOCkIcu85FF5Yq","number":11020,"title":"Handle Origin messages in Postgres replication","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":2348462791,"node_id":"MDU6TGFiZWwyMzQ4NDYyNzkx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-source","name":"A-source","color":"5fefa7","default":false,"description":"Area: sources"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-04T02:30:08Z","updated_at":"2022-03-04T02:30:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nPostgres logical replication has a message type which enables clients to determine whether the source of a transaction is \"local\" or \"remote\" to the Postgres server, but these messages are currently ignored in the Postgres source. \r\n\r\nThe primary motivation for implementing a handler for this message type is as a pre-requisite to supporting Postgres logical replication as a sink, use of the Origin message would allow Materialize to discard replication events which actually originated from Materialize in a circulation replication setup.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11018","id":1159042300,"node_id":"PR_kwDOCkIcu84z7Khs","number":11018,"title":"persist/wip: bounded memory usage for get requests from Blob.","user":{"login":"ruchirK","id":4015012,"node_id":"MDQ6VXNlcjQwMTUwMTI=","avatar_url":"https://avatars.githubusercontent.com/u/4015012?v=4","gravatar_id":"","url":"https://api.github.com/users/ruchirK","html_url":"https://github.com/ruchirK","followers_url":"https://api.github.com/users/ruchirK/followers","following_url":"https://api.github.com/users/ruchirK/following{/other_user}","gists_url":"https://api.github.com/users/ruchirK/gists{/gist_id}","starred_url":"https://api.github.com/users/ruchirK/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruchirK/subscriptions","organizations_url":"https://api.github.com/users/ruchirK/orgs","repos_url":"https://api.github.com/users/ruchirK/repos","events_url":"https://api.github.com/users/ruchirK/events{/privacy}","received_events_url":"https://api.github.com/users/ruchirK/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-03T23:14:01Z","updated_at":"2022-03-10T20:40:24Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11018","html_url":"https://github.com/MaterializeInc/materialize/pull/11018","diff_url":"https://github.com/MaterializeInc/materialize/pull/11018.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11018.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11012","id":1158703017,"node_id":"PR_kwDOCkIcu84z6A2A","number":11012,"title":"Implement INCLUDE HEADERS for kafka sources","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-03T17:35:13Z","updated_at":"2022-03-08T23:47:54Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11012","html_url":"https://github.com/MaterializeInc/materialize/pull/11012","diff_url":"https://github.com/MaterializeInc/materialize/pull/11012.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11012.patch","merged_at":null},"body":"Implements the proposal outlined in https://github.com/MaterializeInc/materialize/pull/10951\r\n\r\nAs part of implementing this, I learned that _kafka allows multiple headers with the same key_. This PR implements \"keep the topologically smaller of the values\", but we could change it to support `map[test=>list[bytea]]` or something similar. Discussion can happen on the design document.\r\n\r\nThis PR implements `headers` as *metadata*, using the framework setup by @quodlibetor. This is 1. to reduce complexity of the implementation and 2. because the semantics of `headers` we want matches the semantics of metadata: We only record header changes if the value decodes properly, and an empty value means we ignore headers (I think, please check my work). We hop onto the existing `to_metadata_row` calls. (Question: do we ever de-duplicated equal values in `UPSERT`? I don't think we do). We also skip doing anything with headers if the source is not configured as such.\r\n\r\nAdditionally, this pr does the number of `to_vec/to_string/clone`'s necessary to keep the code simpler. Its possible some could be avoided. \r\n\r\n### Motivation\r\n\r\n  * This PR adds a known-desirable feature.\r\nhttps://github.com/MaterializeInc/materialize/issues/8446\r\n\r\n\r\n### Tips for reviewer\r\n- bottom pr adds `map_length`, which helps with testing later on\r\n- second add header support to `testdrive`\r\n- third is core implementation\r\n- rest are various changes/tests\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n- Adds a `map_length` function to count the number of entries in a `map`\r\n- Adds `INCLUDE HEADERS (as <column name>)` to Kafka sources to populate headers as list of `(k, v)` pairs in a column\r\n- Adds an experimental `headerstomap` to transform the headers list/multimap into a \"smallest-value-wins\" map\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11009","id":1158543666,"node_id":"PR_kwDOCkIcu84z5e7r","number":11009,"title":"doc: Cloud static IP docs","user":{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-03T15:20:22Z","updated_at":"2022-03-04T08:20:33Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11009","html_url":"https://github.com/MaterializeInc/materialize/pull/11009","diff_url":"https://github.com/MaterializeInc/materialize/pull/11009.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11009.patch","merged_at":null},"body":"Documented how to get your deployment static IP and added some guidelines on how to allow it in some common firewalls.\r\n\r\n### Motivation\r\n\r\nAs we now have static IPs for all Cloud deployments which can be added to security policies, firewall rules, etc. \r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11007","id":1158394295,"node_id":"PR_kwDOCkIcu84z4_Ms","number":11007,"title":"doc/user: Add PHP PDO guide","user":{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-03T13:13:15Z","updated_at":"2022-03-03T13:13:16Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11007","html_url":"https://github.com/MaterializeInc/materialize/pull/11007","diff_url":"https://github.com/MaterializeInc/materialize/pull/11007.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11007.patch","merged_at":null},"body":"Closes #10988 \r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11002","id":1157999573,"node_id":"PR_kwDOCkIcu84z3sf9","number":11002,"title":"expr: possibly improve clarity of temporal filter evaluation","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-03T05:49:03Z","updated_at":"2022-03-04T16:57:35Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11002","html_url":"https://github.com/MaterializeInc/materialize/pull/11002","diff_url":"https://github.com/MaterializeInc/materialize/pull/11002.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11002.patch","merged_at":null},"body":"This is a revised take on #10976 that attempts to recover clarity in a different way.\r\n\r\nI've split this into two commits:\r\n\r\n  * The first commit replaces the dead code with an `unreachable!`. I think we're now all on the same page that this is worth doing.\r\n  * The second commit swaps the use of `Option` for the `Max1Antichain` type. I think this is an improvement in clarity, because `Max1Antichain` has the correct comparison semantics. (I think. Maybe I misunderstand something about the `PartialOrder` trait.) It's also potentially an annoying thing to have to review right now. I'm very happy to leave this commit out.\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11001","id":1157853312,"node_id":"I_kwDOCkIcu85FA3CA","number":11001,"title":"Runtime checking of types in `Get` nodes.","user":{"login":"umanwizard","id":1893159,"node_id":"MDQ6VXNlcjE4OTMxNTk=","avatar_url":"https://avatars.githubusercontent.com/u/1893159?v=4","gravatar_id":"","url":"https://api.github.com/users/umanwizard","html_url":"https://github.com/umanwizard","followers_url":"https://api.github.com/users/umanwizard/followers","following_url":"https://api.github.com/users/umanwizard/following{/other_user}","gists_url":"https://api.github.com/users/umanwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/umanwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umanwizard/subscriptions","organizations_url":"https://api.github.com/users/umanwizard/orgs","repos_url":"https://api.github.com/users/umanwizard/repos","events_url":"https://api.github.com/users/umanwizard/events{/privacy}","received_events_url":"https://api.github.com/users/umanwizard/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-03T01:03:51Z","updated_at":"2022-03-03T01:03:51Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nToday we do not validate that the inputs to a dataflow (e.g. sources) actually produce `Row`s of a particular type. We should do so, (potentially as a debug assertion in case the validation is expensive), so that we can notice immediately at the input that a program is ill-formed, rather than crashing in some random downstream node or producing incorrect data.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11000","id":1157852027,"node_id":"I_kwDOCkIcu85FA2t7","number":11000,"title":"Facilities for typechecking IR graphs","user":{"login":"umanwizard","id":1893159,"node_id":"MDQ6VXNlcjE4OTMxNTk=","avatar_url":"https://avatars.githubusercontent.com/u/1893159?v=4","gravatar_id":"","url":"https://api.github.com/users/umanwizard","html_url":"https://github.com/umanwizard","followers_url":"https://api.github.com/users/umanwizard/followers","following_url":"https://api.github.com/users/umanwizard/following{/other_user}","gists_url":"https://api.github.com/users/umanwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/umanwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umanwizard/subscriptions","organizations_url":"https://api.github.com/users/umanwizard/orgs","repos_url":"https://api.github.com/users/umanwizard/repos","events_url":"https://api.github.com/users/umanwizard/events{/privacy}","received_events_url":"https://api.github.com/users/umanwizard/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-03T01:01:33Z","updated_at":"2022-03-03T06:45:55Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nToday it's not possible to accurately type-check MIR and LIR programs, because the information about the input type of SQL functions is not available in `expr` . Thus, for example, it's possible to construct a MIR program in which one node produces a string, and the downstream node calls a function requesting an integer. The `typ` function will not detect this, and the dataflow we render will crash at runtime.\r\n\r\nThis makes the system brittle, because any bug in optimization or planning has the potential to cause a runtime crash, rather than being detectable at render time.\r\n\r\n@benesch has a plan for how to get this information in `expr`. He thinks we should eventually do it, but that it would take ~1 month of work. Nikhil, I didn't quite follow the idea when you explained it; would you mind repeating it here or linking to somewhere where it's described?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10990","id":1157271658,"node_id":"PR_kwDOCkIcu84z1T4o","number":10990,"title":"Do not merge: expr: playing around with indexes supporting implicit casts","user":{"login":"wangandi","id":5522362,"node_id":"MDQ6VXNlcjU1MjIzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/5522362?v=4","gravatar_id":"","url":"https://api.github.com/users/wangandi","html_url":"https://github.com/wangandi","followers_url":"https://api.github.com/users/wangandi/followers","following_url":"https://api.github.com/users/wangandi/following{/other_user}","gists_url":"https://api.github.com/users/wangandi/gists{/gist_id}","starred_url":"https://api.github.com/users/wangandi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wangandi/subscriptions","organizations_url":"https://api.github.com/users/wangandi/orgs","repos_url":"https://api.github.com/users/wangandi/repos","events_url":"https://api.github.com/users/wangandi/events{/privacy}","received_events_url":"https://api.github.com/users/wangandi/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-02T14:29:11Z","updated_at":"2022-03-02T14:29:11Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10990","html_url":"https://github.com/MaterializeInc/materialize/pull/10990","diff_url":"https://github.com/MaterializeInc/materialize/pull/10990.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10990.patch","merged_at":null},"body":"Created for spec-ing out #10871.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10989","id":1157256052,"node_id":"I_kwDOCkIcu85E-lN0","number":10989,"title":"doc/user: SQL Server via Debezium CDC Guide","user":{"login":"ruf-io","id":11527560,"node_id":"MDQ6VXNlcjExNTI3NTYw","avatar_url":"https://avatars.githubusercontent.com/u/11527560?v=4","gravatar_id":"","url":"https://api.github.com/users/ruf-io","html_url":"https://github.com/ruf-io","followers_url":"https://api.github.com/users/ruf-io/followers","following_url":"https://api.github.com/users/ruf-io/following{/other_user}","gists_url":"https://api.github.com/users/ruf-io/gists{/gist_id}","starred_url":"https://api.github.com/users/ruf-io/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruf-io/subscriptions","organizations_url":"https://api.github.com/users/ruf-io/orgs","repos_url":"https://api.github.com/users/ruf-io/repos","events_url":"https://api.github.com/users/ruf-io/events{/privacy}","received_events_url":"https://api.github.com/users/ruf-io/received_events","type":"User","site_admin":false},"labels":[{"id":1467624450,"node_id":"MDU6TGFiZWwxNDY3NjI0NDUw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-docs","name":"A-docs","color":"5fefa7","default":false,"description":"Area: documentation"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-02T14:15:46Z","updated_at":"2022-03-02T14:15:46Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### What pages are affected?\n\n_No response_\n\n### What needs to be changed or added?\n\nCreate a variant of https://materialize.com/docs/guides/cdc-mysql/ for SQL Server via Debezium.\r\n\r\nSee helpful notes from Mark here: https://materializecommunity.slack.com/archives/C0157GZ7UKF/p1646142131506359\r\n\r\n\n\n### Engineering tracking ticket\n\n_No response_\n\n### Feature description\n\n_No response_\n\n### Design documents\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10988","id":1157228701,"node_id":"I_kwDOCkIcu85E-eid","number":10988,"title":"doc/user: PHP guide + cheatsheet","user":{"login":"ruf-io","id":11527560,"node_id":"MDQ6VXNlcjExNTI3NTYw","avatar_url":"https://avatars.githubusercontent.com/u/11527560?v=4","gravatar_id":"","url":"https://api.github.com/users/ruf-io","html_url":"https://github.com/ruf-io","followers_url":"https://api.github.com/users/ruf-io/followers","following_url":"https://api.github.com/users/ruf-io/following{/other_user}","gists_url":"https://api.github.com/users/ruf-io/gists{/gist_id}","starred_url":"https://api.github.com/users/ruf-io/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruf-io/subscriptions","organizations_url":"https://api.github.com/users/ruf-io/orgs","repos_url":"https://api.github.com/users/ruf-io/repos","events_url":"https://api.github.com/users/ruf-io/events{/privacy}","received_events_url":"https://api.github.com/users/ruf-io/received_events","type":"User","site_admin":false},"labels":[{"id":1467624450,"node_id":"MDU6TGFiZWwxNDY3NjI0NDUw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-docs","name":"A-docs","color":"5fefa7","default":false,"description":"Area: documentation"}],"state":"open","locked":false,"assignee":{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false},"assignees":[{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2022-03-02T13:51:28Z","updated_at":"2022-03-03T09:15:39Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### What pages are affected?\r\n\r\n_No response_\r\n\r\n### What needs to be changed or added?\r\n\r\nStart with the node.js guide structure. https://materialize.com/docs/guides/node-js/\r\n\r\nLook for PHP-standard postgres libraries and vet that they can interact with Materialize in all the required ways (especially `TAIL WITH FETCH`)\r\n\r\n### Engineering tracking ticket\r\n\r\n_No response_\r\n\r\n### Feature description\r\n\r\n_No response_\r\n\r\n### Design documents\r\n\r\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10978","id":1155888303,"node_id":"PR_kwDOCkIcu84zwdiV","number":10978,"title":"persist: WIP strawman for new multi-writer persist interface","user":{"login":"danhhz","id":52528,"node_id":"MDQ6VXNlcjUyNTI4","avatar_url":"https://avatars.githubusercontent.com/u/52528?v=4","gravatar_id":"","url":"https://api.github.com/users/danhhz","html_url":"https://github.com/danhhz","followers_url":"https://api.github.com/users/danhhz/followers","following_url":"https://api.github.com/users/danhhz/following{/other_user}","gists_url":"https://api.github.com/users/danhhz/gists{/gist_id}","starred_url":"https://api.github.com/users/danhhz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danhhz/subscriptions","organizations_url":"https://api.github.com/users/danhhz/orgs","repos_url":"https://api.github.com/users/danhhz/repos","events_url":"https://api.github.com/users/danhhz/events{/privacy}","received_events_url":"https://api.github.com/users/danhhz/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2022-03-01T22:30:25Z","updated_at":"2022-03-09T18:41:44Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10978","html_url":"https://github.com/MaterializeInc/materialize/pull/10978","diff_url":"https://github.com/MaterializeInc/materialize/pull/10978.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10978.patch","merged_at":null},"body":"This is an attempt to redesign the persist API to balance all of the\r\nfollowing factors:\r\n- Usage within STORAGE\r\n- Operational simplicity\r\n- Maintainability of implementation\r\n- Performance\r\n- Cost\r\n\r\nAdditionally, we're also taking this shift in product priorities (as\r\nwell as some assumptions that have changed since persist started) to lay\r\nout a plan to incrementally ship this thing to production. Shipping\r\npersist incrementally is something everyone wants, is much less risky,\r\nand is an earlier timeline. This is something we've tried hard to do\r\nhistorically, but have been unable to tease apart into a workable plan\r\n(given the constraints of our initial goal of fast restarts for kafka\r\nsource persistence). Without over-promising, this interface rethink\r\nseems at the moment like it may unlock incremental delivery.\r\n\r\nThat's the good news. The bonus good news is that persist's internal\r\nimplementation is pretty clean and contains lots of great building\r\nblocks. Even if we entirely throw out the current API and switch to this\r\none, it should be a pretty fast process. This is in no way a rewrite.\r\n\r\nHere's my rough short-to-medium-term plan:\r\n- Figure out the balance of persist priorities (support platform vs the\r\n  kafka source fast restart alpha) with product. Adjust the following\r\n  steps accordingly. Timeline: ASAP\r\n- Get persist and storage to agree on this API boundary between them,\r\n  including performance and cost expectations. Then, get sign-off from\r\n  Cloud on the operational implications. Merge it. Timeline: ASAP\r\n- Write and merge a prototype-quality implementation of this API to\r\n  prove the concept and unblock storage prototyping. Timeline: ASAP\r\n- Write and merge a design doc for the production-quality implementation\r\n  of this API and its incremental rollout. Timeline: ASAP\r\n- Write a bare-bones production-quality implementation of this API. This\r\n  will happen in parallel with the initial production-quality\r\n  implementation of STORAGE. Adjust the API as necessary in light of the\r\n  inevitable discovery of unforeseen issues+requirements as persist and\r\n  STORAGE are implemented. Timeline: Platform launch.\r\n- Continue to incrementally ship persist features as decided by product\r\n  prioritization.\r\n\r\n### Motivation\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n### Tips for reviewer\r\n\r\nThis is both very much a WIP as well as a strawman. Everything is up for debate and nothing is set in stone.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10977","id":1155865205,"node_id":"PR_kwDOCkIcu84zwYii","number":10977,"title":"[WIP] first draft of JSON source","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-01T22:04:52Z","updated_at":"2022-03-04T22:02:41Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10977","html_url":"https://github.com/MaterializeInc/materialize/pull/10977","diff_url":"https://github.com/MaterializeInc/materialize/pull/10977.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10977.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\nVery WIP at the moment, but so far this lets us create a source with `FORMAT JSON USING TYPE <named_type>` and ingest records with basic data types. Looooots more changes + test coverage to ensue. \r\n\r\nTODO:\r\n- [ ] add tests for ingesting data into all possible scalar types\r\n- [ ] update catalog loading so that views can depend on custom types\r\n- [x] determine whether missing a field in a JSON document should produce a null or empty collection, when we know it is a collection type\r\n- [x] determine whether we want to add in the basic `FORMAT JSON` --> jsonb format\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10973","id":1155644413,"node_id":"PR_kwDOCkIcu84zvpfM","number":10973,"title":"misc: change use of term 'cluster' broadly to 'install'","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-01T18:02:57Z","updated_at":"2022-03-02T13:16:28Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10973","html_url":"https://github.com/MaterializeInc/materialize/pull/10973","diff_url":"https://github.com/MaterializeInc/materialize/pull/10973.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10973.patch","merged_at":null},"body":"With some upcoming platform work, we want to use the term \"cluster\" in the SQL API. Clusters will unfortunately also have IDs, which makes the existing `cluster_id` a little confusing. This PR attempts to begin moving the existing notion of \"cluster ID\" to \"installation ID.\"\r\n\r\nHowever, some of the cloud bench infrastructure seems to use this notion as a kind of column name, so I'm not sure what the fallout of that will be.\r\n\r\n### Motivation\r\n\r\nThis PR refactors existing code.\r\n\r\n### Tips for reviewer\r\n\r\nLargely code movement, besides the impact to cloud bench\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Move/rename the built-in function `mz_catalog.mz_cluster_id` to `mz_internal.mz_install_id`.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10971","id":1155629800,"node_id":"PR_kwDOCkIcu84zvmcB","number":10971,"title":"prevent select!-correctness problems for simple sources","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2022-03-01T17:47:34Z","updated_at":"2022-03-08T16:40:32Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10971","html_url":"https://github.com/MaterializeInc/materialize/pull/10971","diff_url":"https://github.com/MaterializeInc/materialize/pull/10971.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10971.patch","merged_at":null},"body":"There is a subtlety when using `select!`: when one future finishes, the other is _dropped_. This CAN cause subtle logic bugs and data loss (see https://tomaka.medium.com/a-look-back-at-asynchronous-rust-d54d63934a1c for more details). In the case of this pr, if the `SimpleSource`'s `start`-ed future finishes, then the timestamper `tick` future could be stopped in the middle of sleeping, or worse, in the middle of sending a result onto the bounded channel (https://github.com/MaterializeInc/materialize/blob/56a39246007194914cd02cfdcef0c4874b2ac7f9/src/dataflow/src/source/mod.rs#L716-L732)\r\n\r\nIn practice, this doesn't happen, because simple-source futures are long-running, and when they finish we `break;` but if we add short-running ones, or add more futures managing state, we could see bugs, so I figured I should change it now.\r\n\r\nI chose to use `Pin::set` to reset the `tick` future here because it was the simplest. I would have preferring moving the interval out into the `select!` statement, but this would require a larger refactor, where simple-sources's adopt some sort of poll model. @petrosagg let me know if thats better\r\n\r\n### Motivation\r\n  * This PR fixes a previously unreported bug.\r\nSee above\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10968","id":1155382430,"node_id":"I_kwDOCkIcu85E3bye","number":10968,"title":"sql: support larger numeric precision","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-01T14:05:57Z","updated_at":"2022-03-01T14:16:11Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\r\n\r\nThe precision of the `numeric` type in Materialize is currently capped at 39 digits, as we needed to choose _some_ fixed precision to back our [`Decimal`](https://docs.rs/dec/latest/dec/struct.Decimal.html) type.\r\n\r\nWe could lift that restriction by backing `Decimal` with a vector instead of an array, and allowing users to choose how many digits of precision to use at runtime. This is conceptually simple, but there are some practical difficulties:\r\n\r\n  * The upstream library rust-dec needs to be modified to use vectors instead of arrays. I'm not clear on whether this should be a separate type, or whether we should force all users of `Decimal` into the new implementation.\r\n  * Every `numeric` operation in Materialize needs to select a result scale and precision based on the scale and precision of its inputs.\r\n  * Selecting result scales is tricky. If you're not careful, operations like `1.0 / 3.0` result in `0.3`, and customers complain. Here's how [PostgreSQL chooses result scales](https://github.com/postgres/postgres/blob/9028cce426ba6e08ee5ef8fcaedb2445e6c08c75/src/backend/utils/adt/numeric.c#L9157-L9223) for divisions, for example.\r\n\r\n#10671 is a prerequisite.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10967","id":1155326331,"node_id":"PR_kwDOCkIcu84zumlz","number":10967,"title":"platform: add STORAGE architecure document","user":{"login":"petrosagg","id":939420,"node_id":"MDQ6VXNlcjkzOTQyMA==","avatar_url":"https://avatars.githubusercontent.com/u/939420?v=4","gravatar_id":"","url":"https://api.github.com/users/petrosagg","html_url":"https://github.com/petrosagg","followers_url":"https://api.github.com/users/petrosagg/followers","following_url":"https://api.github.com/users/petrosagg/following{/other_user}","gists_url":"https://api.github.com/users/petrosagg/gists{/gist_id}","starred_url":"https://api.github.com/users/petrosagg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/petrosagg/subscriptions","organizations_url":"https://api.github.com/users/petrosagg/orgs","repos_url":"https://api.github.com/users/petrosagg/repos","events_url":"https://api.github.com/users/petrosagg/events{/privacy}","received_events_url":"https://api.github.com/users/petrosagg/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-03-01T13:13:22Z","updated_at":"2022-03-07T10:50:16Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10967","html_url":"https://github.com/MaterializeInc/materialize/pull/10967","diff_url":"https://github.com/MaterializeInc/materialize/pull/10967.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10967.patch","merged_at":null},"body":null,"reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10963","id":1155068278,"node_id":"I_kwDOCkIcu85E2PF2","number":10963,"title":"TCP boundary: Server should never assert","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[{"id":1465753202,"node_id":"MDU6TGFiZWwxNDY1NzUzMjAy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dataflow","name":"A-dataflow","color":"5fefa7","default":false,"description":"Area: dataflow"},{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-01T09:06:29Z","updated_at":"2022-03-01T09:06:29Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The current TCP boundary implementation uses `assert!` to maintain invariants. This is fine for the client where any invariant violation is unrecoverable, but bad for the STORAGE server. Here, invariant violations should lead to forceful disconnects of clients and state cleanup. Only if it is not possible to cleanly remove state, an `assert!` could be used.\r\n\r\nThis could also involve an extension of the `Response` protocol to communicate error conditions to the client before disconnecting, or giving the client a chance to rectify the problem. For the moment, explaining to the client what went wrong and then disconnecting is a fine option.\r\n\r\nI'd expect most of the errors originating configuration errors, for example if the number of storage workers is incorrect.\r\n\r\nCode location: https://github.com/MaterializeInc/materialize/blob/main/src/dataflow/src/server/tcp_boundary.rs#L206-L223","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10962","id":1154903438,"node_id":"PR_kwDOCkIcu84ztNpa","number":10962,"title":"doc/user: Revamp Third-Party Tools Page","user":{"login":"ruf-io","id":11527560,"node_id":"MDQ6VXNlcjExNTI3NTYw","avatar_url":"https://avatars.githubusercontent.com/u/11527560?v=4","gravatar_id":"","url":"https://api.github.com/users/ruf-io","html_url":"https://github.com/ruf-io","followers_url":"https://api.github.com/users/ruf-io/followers","following_url":"https://api.github.com/users/ruf-io/following{/other_user}","gists_url":"https://api.github.com/users/ruf-io/gists{/gist_id}","starred_url":"https://api.github.com/users/ruf-io/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruf-io/subscriptions","organizations_url":"https://api.github.com/users/ruf-io/orgs","repos_url":"https://api.github.com/users/ruf-io/repos","events_url":"https://api.github.com/users/ruf-io/events{/privacy}","received_events_url":"https://api.github.com/users/ruf-io/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-01T05:55:43Z","updated_at":"2022-03-11T07:46:25Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10962","html_url":"https://github.com/MaterializeInc/materialize/pull/10962","diff_url":"https://github.com/MaterializeInc/materialize/pull/10962.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10962.patch","merged_at":null},"body":"👉  Preview Link: https://preview.materialize.com/10962/third-party/supported-tools/ 👈 \r\n\r\n\r\n### Motivation\r\n\r\nUsers will often come to us with questions about \"Does Materialize integrate with X?\"\r\n\r\n- When the answer is **Yes**\r\n   - Often the only way to know is to ask and get an answer in Slack or discussion. This page works as a self-serve index of tools and integrations that have already been looked at. \r\n   - The follow-up question of \"how does it integrate\" is not always well documented.\r\n- When the answer is **no**\r\n   - We don't have a great way of registering their interest, following up with them when the integration improves, and quantifying how many users are asking about certain integrations.\r\n\r\nUsers will also come to us asking \"what tools can I use to do X with Materialize?\" (e.g. manage SQL) - This page can also serve as a lightweight index for some of those questions.\r\n\r\n### Review Criteria\r\n\r\n- [ ] The definitions of support levels has been reviewed.\r\n- [ ] All the claimed statuses of tools has been checked.\r\n- [ ] The \"Notify Me\" feature fires Segment events with user email, integration requested\r\n- [ ] Intro sentences for sections has been reviewed and approved.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10957","id":1154524358,"node_id":"I_kwDOCkIcu85E0KTG","number":10957,"title":"Improve robustness of timestamp binding compaction","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"},{"id":3052793738,"node_id":"MDU6TGFiZWwzMDUyNzkzNzM4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/P3","name":"P3","color":"6b0000","default":false,"description":"Priority: we want to get this done in the next X days"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-28T20:35:14Z","updated_at":"2022-02-28T21:31:31Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Our `sqlite` timestamp binding compaction uses the following logic:\r\n```rust\r\n        let latest_not_beyond_compaction: Option<Timestamp> = self\r\n            .inner\r\n            .prepare_cached(\r\n                \"SELECT max(timestamp) FROM timestamps WHERE sid = ? AND timestamp <= ?\",\r\n            )?\r\n            .query_row(params![SqlVal(&source_id), frontier], |row| row.get(0))?;\r\n\r\n        if let Some(latest_not_beyond_compaction) = latest_not_beyond_compaction {\r\n            let result = match self\r\n                .inner\r\n                .prepare_cached(\"DELETE FROM timestamps WHERE sid = ? AND timestamp < ?\")?\r\n                .execute(params![SqlVal(&source_id), latest_not_beyond_compaction])\r\n            {\r\n                Ok(_) => Ok(()),\r\n                Err(err) => Err(err.into()),\r\n            };\r\n\r\n            result\r\n        } else {\r\n            Ok(())\r\n        }\r\n```\r\nIt selects the maximum timestamp less or equal to the input argument, and deletes bindings at strictly lower timestamp. However, there are bindings for each of various subdivisions of the `sid` collection: kafka topics have multiple parts, for example. Instead, I believe we should use the minimum across maximum values for parts (or whatever the subdivisions are).\r\n\r\nThe current thinking is that this doesn't manifest as a bug at present because we ensure that some other invariants are maintained on the data, relating the skew of the bound timestamps in each of the parts.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10956","id":1154521040,"node_id":"I_kwDOCkIcu85E0JfQ","number":10956,"title":"compute: Transactional facade for `Controller`","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-28T20:31:08Z","updated_at":"2022-02-28T20:31:08Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The `Controller` presents many operations that manipulate the state of collections. It would be valuable for users to sequence commands that can be assess for tentative \"acceptability\": when ready to commit, they should none of them error.\r\n\r\nThis appears not too hard, at least if we pivot capability downgrades to the end of the sequence of commands, so that all validation can be done against the initial frontier values of existing collections, and initial values of newly introduced collections.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10945","id":1154436088,"node_id":"PR_kwDOCkIcu84zrrLX","number":10945,"title":"ci: enable all Kafka tests in Redpanda nightly","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-02-28T18:54:44Z","updated_at":"2022-03-01T04:08:52Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10945","html_url":"https://github.com/MaterializeInc/materialize/pull/10945","diff_url":"https://github.com/MaterializeInc/materialize/pull/10945.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10945.patch","merged_at":null},"body":"@ruf-io reports that the issue might be fixed.\r\n\r\n### Motivation\r\n\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR accounts for a fix to a recognized bug: redpanda-data/redpanda#2397\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10944","id":1154432735,"node_id":"I_kwDOCkIcu85Ezz7f","number":10944,"title":"row_num - Document limitations","user":{"login":"krishmanoh2","id":72518904,"node_id":"MDQ6VXNlcjcyNTE4OTA0","avatar_url":"https://avatars.githubusercontent.com/u/72518904?v=4","gravatar_id":"","url":"https://api.github.com/users/krishmanoh2","html_url":"https://github.com/krishmanoh2","followers_url":"https://api.github.com/users/krishmanoh2/followers","following_url":"https://api.github.com/users/krishmanoh2/following{/other_user}","gists_url":"https://api.github.com/users/krishmanoh2/gists{/gist_id}","starred_url":"https://api.github.com/users/krishmanoh2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krishmanoh2/subscriptions","organizations_url":"https://api.github.com/users/krishmanoh2/orgs","repos_url":"https://api.github.com/users/krishmanoh2/repos","events_url":"https://api.github.com/users/krishmanoh2/events{/privacy}","received_events_url":"https://api.github.com/users/krishmanoh2/received_events","type":"User","site_admin":false},"labels":[{"id":1467624450,"node_id":"MDU6TGFiZWwxNDY3NjI0NDUw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-docs","name":"A-docs","color":"5fefa7","default":false,"description":"Area: documentation"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-28T18:50:05Z","updated_at":"2022-02-28T18:50:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What pages are affected?\n\nhttps://materialize.com/docs/sql/functions/\r\n\r\n\n\n### What needs to be changed or added?\n\nMaterialize implementation of row_num can lead to higher than expected memory usage. Recommend that anyone trying this function out understand the limitations.\n\n### Engineering tracking ticket\n\n_No response_\n\n### Feature description\n\n_No response_\n\n### Design documents\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10939","id":1154164480,"node_id":"PR_kwDOCkIcu84zqx-G","number":10939,"title":"dataflow: TCP boundary supporting multi-process STORAGE","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-28T14:32:21Z","updated_at":"2022-02-28T14:32:21Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10939","html_url":"https://github.com/MaterializeInc/materialize/pull/10939","diff_url":"https://github.com/MaterializeInc/materialize/pull/10939.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10939.patch","merged_at":null},"body":"This doesn't quite work yet but I didn't want to spend more time on\r\ndebugging. We're currently not focusing on a multi-process STORAGE runtime,\r\nso this should just serve as an example of what probably needs to be done,\r\nin case someone would like to pick it up.\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10938","id":1153979238,"node_id":"I_kwDOCkIcu85EyFNm","number":10938,"title":"regression: Failure during snapshot not retried properly, source never advances","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":3052793141,"node_id":"MDU6TGFiZWwzMDUyNzkzMTQx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/P1","name":"P1","color":"d10000","default":false,"description":"Priority: critical issue, panic, etc. drop what you're doing and fix immediately"}],"state":"open","locked":false,"assignee":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"assignees":[{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false}],"milestone":null,"comments":5,"created_at":"2022-02-28T11:28:59Z","updated_at":"2022-03-07T21:58:36Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nv0.19.1-dev (89f9dfdc2)\r\n\r\n### How did you install Materialize?\r\n\r\nDocker image\r\n\r\n### What was the issue?\r\n\r\nThe pg-cdc-resumption test has started to fail in its `restart_pg_during_snapshot` subtest:\r\n\r\n```\r\nverify-data.td | 1m 0s\r\n-- | --\r\n  | > SELECT COUNT(*) = 500000 FROM t1;\r\n  | rows didn't match; sleeping to see if dataflow catches up 50ms 75ms 112ms 169ms 253ms 380ms 570ms 854ms 1s 2s 3s 4s 6s 10s 15s 16s\r\n  | verify-data.td:10:1: error: executing query failed: db error: ERROR: At least one input has no complete timestamps yet: [User(28)]: ERROR: At least one input has no complete timestamps yet: [User(28)]\r\n  | \\|\r\n  | 9 \\|\r\n  | 10 \\| > SELECT COUNT(*) = 500000 FROM t1;\r\n\r\n\r\n```\r\n\r\nThis output essentially means that absolutely no data was received from Postgres whatsoever and the test waited for 60 seconds for progress to be made.\r\n\r\nGit bisect reports that the test started failing after the following commit. It may be that the faster speed of `COPY` caused the timing of the events to change.\r\n\r\n```\r\n89f9dfdc20e4547e90ca97599089a73553b6b365 is the first bad commit\r\ncommit 89f9dfdc20e4547e90ca97599089a73553b6b365\r\nAuthor: Paul Hemberger <paul@materialize.com>\r\nDate:   Mon Feb 7 08:42:02 2022 -0500\r\n\r\n    pg-cdc: switch from `SELECT *` to `COPY TO` for faster initial loading (#10299)\r\n\r\n```\r\n\r\nSimplified test coming up shortly.\r\n\r\n### Relevant log output\r\n\r\nNo errors in Mz log","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10935","id":1153540153,"node_id":"I_kwDOCkIcu85EwaA5","number":10935,"title":"sql: support new polymorphic types","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"assignees":[{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-02-28T02:26:01Z","updated_at":"2022-03-07T15:02:16Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nPostgreSQL v13 introduced some new [polymorphic types](https://www.postgresql.org/docs/current/extend-type-system.html#EXTEND-TYPES-POLYMORPHIC):\r\n\r\n  * `anycompatible`\r\n  * `anycompatiblearray`\r\n  * `anycompatiblenonarray`\r\n  * `anycompatiblerange`\r\n  * `anycompatiblemultirange`\r\n\r\nThese are like the existing polymorphic types that don't mention `compatible` in their names, except that they don't constrain their arguments to be literally identical, but only to share a common type that both arguments can be promoted to (as determined by `guess_best_common_type`).\r\n\r\nMany existing functions in PostgreSQL were redefined to take e.g. `anycompatible` where they used to take `any`. I think our [`resolve_polymorphic_types`](https://github.com/MaterializeInc/materialize/blob/c608ae71b4814f53ea9aff75aa39fbaa5ce4084f/src/sql/src/func.rs#L626) function is understandably a bit confused on this point, and is currently a hybrid of `compatible` and non-`compatible` behavior.\r\n\r\nI'm also pretty thoroughly confused by our breakdown of types into \"custom\", \"built-in\", \"complex\", and \"simple\": https://github.com/MaterializeInc/materialize/blob/c608ae71b4814f53ea9aff75aa39fbaa5ce4084f/src/sql/src/func.rs#L554-L560\r\n\r\nI think quite a bit of this complexity can vanish by properly implementing the new `compatible` polymorphic types. Then we won't need special handling to allow e.g. `int4 list` and `int4_list_as_custom_type` to be interchanged; we can just use the new `compatible` polymorphic types in function signatures. \r\n\r\ncc @sploiselle ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10934","id":1153535478,"node_id":"I_kwDOCkIcu85EwY32","number":10934,"title":"sql: introduce a `CoercibleScalarType` enum","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-02-28T02:17:35Z","updated_at":"2022-02-28T16:33:41Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"We currently don't handle coercion of `ROW` literals correctly in some contexts. See #8597 and #10422.\r\n\r\n#10868 is one attempt to fix this by changing the typing of `CoercibleScalarType` so that a `ROW` literal is typed as `Some(ScalarType::Record { ... })`.  I don't think this is quite right, though!\r\n\r\nHere's the background. PostgreSQL has an explicit `unknown` type that it uses throughout planning. It slowly converts expressions from `unknown` type to known types during planning... usually. Sometimes an unknown type will slip through, and the execution pathway is resilient to that. Unknown types get special coercion behavior; e.g., a string literal has type `unknown` so that it can be freely cast to any type.\r\n\r\nRequiring every part of the system to be prepared for `unknown` types is a very C way of doing things. We've opted instead to represent `unknown` types with proper typestates. `unknown` types only exist for a brief moment in the planner, and then are transformed away.\r\n\r\n`CoercibleScalarExpr` is the way we do this. Any type of expression that _would_ be typed as `unknown` in PostgreSQL is instead held as a `CoercibleScalarExpr`; this makes the transformation to a known `ScalarExpr` explicit. Forgetting to coerce a `CoercibleScalarExpr` becomes a compile time error of `materialized`.\r\n\r\nWe currently use `Option<ScalarType>` to represent the type of a `CoercibleScalarExpr`. `None` is used to mean \"unknown\" and `Some` is used to mean \"known\". I think we instead need to expand this out into:\r\n\r\n```rust\r\nenum CoercibleScalarType {\r\n    Unknown,\r\n    Record,\r\n    Known(ScalarType),\r\n}\r\n```\r\n\r\nThe idea is that `ROW` literals get typed as their own special `unknown`-like type called `CoercibleScalarType::Record`. PostgreSQL causes this type `record`. Note that we do _not_ have an exact analog to `record`; our `ScalarType::Record { custom_oid: None, ... }` is not quite as squishy as the PostgreSQL `record` psuedotype. `ScalarType::Record` without an OID behaves _exactly_ like a named composite type in PostgreSQL except that it lacks a name. Whereas the `record` pseudotype has some notable differences from a proper composite type, like the fact that its type category is `TypeCategory::Pseudo` rather than `TypeCategory::Composite`.\r\n\r\nThis latter point is actually exactly what makes `coalesce(row(1, 2), row(1, 2)::some_equivalent_named_type)` fail. The first expression has `TypeCategory::Pseudo`, while the second expression has `TypeCategory::Composite`.\r\n\r\nI've teed up this work with #10911. If we add the `CoercibleScalarType` enum as described above, then it will be easy to match PostgreSQL's behavior in `guess_best_common_type` by declaring that `CoercibleScalarType::Record`'s type category is `TypeCategory::Pseudo` while `CoercibleScalarType::Known(ScalarType::Record { .. })`'s type category is `TypeCategory::Record`.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10927","id":1153470622,"node_id":"I_kwDOCkIcu85EwJCe","number":10927,"title":"`kafka-exactly-once-sink.td` is flaking on main","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"assignees":[{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-02-28T00:38:19Z","updated_at":"2022-02-28T18:07:39Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The `kafka-exactly-once-sink.td` test file is now flaking on `main`. See, for example: https://buildkite.com/materialize/tests/builds/29657#598f531d-8284-47bc-9f01-41723b10cce7\r\n\r\nLikely related to #10910, but loathe to revert that PR because it is important for platform. I'm going to send a PR to disable `kafka-exactly-once-sink.td` instead, but marking this as a release blocker.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10913","id":1153350833,"node_id":"PR_kwDOCkIcu84zoFEM","number":10913,"title":"design: multiwriter persistent collections","user":{"login":"petrosagg","id":939420,"node_id":"MDQ6VXNlcjkzOTQyMA==","avatar_url":"https://avatars.githubusercontent.com/u/939420?v=4","gravatar_id":"","url":"https://api.github.com/users/petrosagg","html_url":"https://github.com/petrosagg","followers_url":"https://api.github.com/users/petrosagg/followers","following_url":"https://api.github.com/users/petrosagg/following{/other_user}","gists_url":"https://api.github.com/users/petrosagg/gists{/gist_id}","starred_url":"https://api.github.com/users/petrosagg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/petrosagg/subscriptions","organizations_url":"https://api.github.com/users/petrosagg/orgs","repos_url":"https://api.github.com/users/petrosagg/repos","events_url":"https://api.github.com/users/petrosagg/events{/privacy}","received_events_url":"https://api.github.com/users/petrosagg/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-02-27T18:30:23Z","updated_at":"2022-03-01T15:48:44Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10913","html_url":"https://github.com/MaterializeInc/materialize/pull/10913","diff_url":"https://github.com/MaterializeInc/materialize/pull/10913.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10913.patch","merged_at":null},"body":"### Motivation\r\n\r\nAn implementation of `persist` that supports multiple writers would simplify immensely the amount of additional work needed for STORAGE. This design document proposes a `persist` implementation that can do that and hopefully is easy to reason about its correctness.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10906","id":1152209908,"node_id":"I_kwDOCkIcu85ErVP0","number":10906,"title":"coord,dataflow: restore humanization of source errors","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-26T19:51:16Z","updated_at":"2022-02-26T19:51:16Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\n#10904 caused a regression in the humanization of source error messages. Error messages like\r\n\r\n```\r\nSource error: materialize.public.deleting_csv: file IO: file source: unable to open file at path\r\n```\r\n\r\nare now rendered with a source ID in place of the name:\r\n\r\n```\r\nSource error: u12/2: file IO: file source: unable to open file at path\r\n```\r\n\r\nThis was necessary to avoid a panic on short notice and amounts to a partial reversion of #6791. \r\n\r\nWe should add back the humanization of the name. But this time, we should do so in the coordinator, where the name of the erroring source can be correctly ascertained at the time the error is sent to the client.\r\n\r\nHere is the start of the required work:\r\n\r\n```diff\r\ndiff --git a/src/dataflow-types/src/errors.rs b/src/dataflow-types/src/errors.rs\r\nindex d488546d9..2f55aa4e4 100644\r\n--- a/src/dataflow-types/src/errors.rs\r\n+++ b/src/dataflow-types/src/errors.rs\r\n@@ -10,10 +10,11 @@\r\n use std::fmt::Display;\r\n \r\n use bytes::BufMut;\r\n+use serde::{Deserialize, Serialize};\r\n+\r\n use mz_expr::{EvalError, SourceInstanceId};\r\n use mz_persist_types::Codec;\r\n \r\n-use serde::{Deserialize, Serialize};\r\n \r\n #[derive(Ord, PartialOrd, Clone, Debug, Eq, PartialEq, Serialize, Deserialize, Hash)]\r\n pub enum DecodeError {\r\n@@ -98,6 +99,10 @@ pub enum DataflowError {\r\n     DecodeError(DecodeError),\r\n     EvalError(EvalError),\r\n     SourceError(SourceError),\r\n+    NegativeMultiplicity {\r\n+        copies: i64,\r\n+        data: String,\r\n+    }\r\n }\r\n \r\n impl Display for DataflowError {\r\n@@ -106,6 +111,14 @@ impl Display for DataflowError {\r\n             DataflowError::DecodeError(e) => write!(f, \"Decode error: {}\", e),\r\n             DataflowError::EvalError(e) => write!(f, \"Evaluation error: {}\", e),\r\n             DataflowError::SourceError(e) => write!(f, \"Source error: {}\", e),\r\n+            DataflowError::NegativeMultiplicity { copies, data } => {\r\n+                write!(\r\n+                    f,\r\n+                    \"Invalid data: saw retractions ({}) for row that does not exist: {}\",\r\n+                    copies,\r\n+                    data,\r\n+                )\r\n+            }\r\n         }\r\n     }\r\n }\r\ndiff --git a/src/dataflow-types/src/types.rs b/src/dataflow-types/src/types.rs\r\nindex 7eec589de..93eedd4d9 100644\r\n--- a/src/dataflow-types/src/types.rs\r\n+++ b/src/dataflow-types/src/types.rs\r\n@@ -22,6 +22,7 @@ use timely::progress::frontier::Antichain;\r\n use mz_expr::{GlobalId, MirRelationExpr, MirScalarExpr, OptimizedMirRelationExpr};\r\n use mz_repr::{Diff, RelationType, Row};\r\n \r\n+use crate::DataflowError;\r\n use crate::sources::persistence::SourcePersistDesc;\r\n use crate::types::sources::SourceDesc;\r\n \r\n@@ -32,7 +33,7 @@ use crate::types::sources::SourceDesc;\r\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\r\n pub enum PeekResponse {\r\n     Rows(Vec<(Row, NonZeroUsize)>),\r\n-    Error(String),\r\n+    Error(DataflowError),\r\n     Canceled,\r\n }\r\n \r\n@@ -43,7 +44,7 @@ pub enum PeekResponse {\r\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\r\n pub enum PeekResponseUnary {\r\n     Rows(Vec<Row>),\r\n-    Error(String),\r\n+    Error(DataflowError),\r\n     Canceled,\r\n }\r\n \r\ndiff --git a/src/dataflow/src/server.rs b/src/dataflow/src/server.rs\r\nindex ed5caa7e9..31a2579b5 100644\r\n--- a/src/dataflow/src/server.rs\r\n+++ b/src/dataflow/src/server.rs\r\n@@ -30,11 +30,10 @@ use tokio::sync::mpsc;\r\n use mz_dataflow_types::client::ComputeInstanceId;\r\n use mz_dataflow_types::client::{Command, ComputeCommand, LocalClient, Response};\r\n use mz_dataflow_types::sources::AwsExternalId;\r\n-use mz_dataflow_types::PeekResponse;\r\n+use mz_dataflow_types::{DataflowError, PeekResponse};\r\n use mz_expr::{GlobalId, RowSetFinishing};\r\n use mz_ore::metrics::MetricsRegistry;\r\n use mz_ore::now::NowFn;\r\n-use mz_ore::result::ResultExt;\r\n use mz_repr::{DatumVec, Diff, Row, RowArena, Timestamp};\r\n \r\n use self::metrics::{ServerMetrics, WorkerMetrics};\r\n@@ -391,7 +390,7 @@ impl PendingPeek {\r\n     }\r\n \r\n     /// Collects data for a known-complete peek.\r\n-    fn collect_finished_data(&mut self) -> Result<Vec<(Row, NonZeroUsize)>, String> {\r\n+    fn collect_finished_data(&mut self) -> Result<Vec<(Row, NonZeroUsize)>, DataflowError> {\r\n         // Check if there exist any errors and, if so, return whatever one we\r\n         // find first.\r\n         let (mut cursor, storage) = self.trace_bundle.errs_mut().cursor();\r\n@@ -403,14 +402,13 @@ impl PendingPeek {\r\n                 }\r\n             });\r\n             if copies < 0 {\r\n-                return Err(format!(\r\n-                    \"Invalid data in source errors, saw retractions ({}) for row that does not exist: {}\",\r\n-                    copies * -1,\r\n-                    cursor.key(&storage),\r\n-                ));\r\n+                return Err(DataflowError::NegativeMultiplicity {\r\n+                    copies: copies * -1,\r\n+                    data: cursor.key(&storage).to_string(),\r\n+                });\r\n             }\r\n             if copies > 0 {\r\n-                return Err(cursor.key(&storage).to_string());\r\n+                return Err(cursor.key(&storage).clone());\r\n             }\r\n             cursor.step_key(&storage);\r\n         }\r\n@@ -452,8 +450,7 @@ impl PendingPeek {\r\n                 let mut borrow = datum_vec.borrow_with_many(&[key, row]);\r\n                 if let Some(result) = self\r\n                     .map_filter_project\r\n-                    .evaluate_into(&mut borrow, &arena, &mut row_builder)\r\n-                    .map_err_to_string()?\r\n+                    .evaluate_into(&mut borrow, &arena, &mut row_builder)?\r\n                 {\r\n                     let mut copies = 0;\r\n                     cursor.map_times(&storage, |time, diff| {\r\n@@ -462,11 +459,10 @@ impl PendingPeek {\r\n                         }\r\n                     });\r\n                     let copies: usize = if copies < 0 {\r\n-                        return Err(format!(\r\n-                            \"Invalid data in source, saw retractions ({}) for row that does not exist: {:?}\",\r\n-                            copies * -1,\r\n-                            &*borrow,\r\n-                        ));\r\n+                        return Err(DataflowError::NegativeMultiplicity {\r\n+                            copies: copies * -1,\r\n+                            data: format!(\"{:?}\", borrow),\r\n+                        });\r\n                     } else {\r\n                         copies.try_into().unwrap()\r\n                     };\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10891","id":1150907238,"node_id":"PR_kwDOCkIcu84zfPnD","number":10891,"title":"add timely-console feature","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-25T21:44:43Z","updated_at":"2022-02-25T21:44:43Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10891","html_url":"https://github.com/MaterializeInc/materialize/pull/10891","diff_url":"https://github.com/MaterializeInc/materialize/pull/10891.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10891.patch","merged_at":null},"body":"NOT READY FOR REVIEW: depends on https://github.com/TimelyDataflow/timely-dataflow/pull/452\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10886","id":1150606226,"node_id":"PR_kwDOCkIcu84zeUnn","number":10886,"title":"test wip","user":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-25T15:54:50Z","updated_at":"2022-02-25T19:12:58Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10886","html_url":"https://github.com/MaterializeInc/materialize/pull/10886","diff_url":"https://github.com/MaterializeInc/materialize/pull/10886.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10886.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10879","id":1149844907,"node_id":"I_kwDOCkIcu85EiT2r","number":10879,"title":"JWK-based authentication: log the reason for failure","user":{"login":"antifuchs","id":11864,"node_id":"MDQ6VXNlcjExODY0","avatar_url":"https://avatars.githubusercontent.com/u/11864?v=4","gravatar_id":"","url":"https://api.github.com/users/antifuchs","html_url":"https://github.com/antifuchs","followers_url":"https://api.github.com/users/antifuchs/followers","following_url":"https://api.github.com/users/antifuchs/following{/other_user}","gists_url":"https://api.github.com/users/antifuchs/gists{/gist_id}","starred_url":"https://api.github.com/users/antifuchs/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antifuchs/subscriptions","organizations_url":"https://api.github.com/users/antifuchs/orgs","repos_url":"https://api.github.com/users/antifuchs/repos","events_url":"https://api.github.com/users/antifuchs/events{/privacy}","received_events_url":"https://api.github.com/users/antifuchs/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"assignees":[{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-02-24T22:41:50Z","updated_at":"2022-02-24T22:41:50Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nRight now, we silently reject login attempts, and it's great to be silent to the person requesting the login! But it would be great if the server could log that a login attempt failed, and why it failed. I'd love to see the following things in the log:\r\n\r\n* reason for failure, as close as we can get it (mismatching JWK, tenant, email?)\r\n* remote IP address","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10878","id":1149787432,"node_id":"PR_kwDOCkIcu84zbmPl","number":10878,"title":"[kafka sink] Force compaction in EOS test suite","user":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-02-24T21:54:39Z","updated_at":"2022-03-08T23:12:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10878","html_url":"https://github.com/MaterializeInc/materialize/pull/10878","diff_url":"https://github.com/MaterializeInc/materialize/pull/10878.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10878.patch","merged_at":null},"body":"Update kafka EOS test to make it more robustly guarantee timestamp compaction has occurred before restarting","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10876","id":1149689368,"node_id":"I_kwDOCkIcu85Eht4Y","number":10876,"title":"kafka exactly once sink: transaction timeout maybe hoses sink","user":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":2187378159,"node_id":"MDU6TGFiZWwyMTg3Mzc4MTU5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sink","name":"A-sink","color":"5fefa7","default":false,"description":"Area: sinks"}],"state":"open","locked":false,"assignee":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"assignees":[{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-02-24T19:55:34Z","updated_at":"2022-03-09T15:54:20Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nmaster\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nhttps://github.com/MaterializeInc/product/issues/136\r\n\r\n- Kafka transaction timeout causes one of our transaction state transitions to trip an assert in rdkafka: https://github.com/edenhill/librdkafka/blob/master/src/rdkafka_txnmgr.c#L237.  We've seen this occur in a customer running v0.12 (which predates some pretty big sink refactors)\r\n\r\nI'm not sure that we handle this well so the purpose of this ticket is to:\r\n1) Investigate and determine if this is still an issue\r\n2) Fix it if necessary\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10875","id":1149647541,"node_id":"PR_kwDOCkIcu84zbIv_","number":10875,"title":"Pass `librdkafka` debug level down as a value","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-02-24T19:05:26Z","updated_at":"2022-02-25T19:51:35Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10875","html_url":"https://github.com/MaterializeInc/materialize/pull/10875","diff_url":"https://github.com/MaterializeInc/materialize/pull/10875.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10875.patch","merged_at":null},"body":"This pr implements the changes described in https://github.com/MaterializeInc/materialize/issues/10441 (minus one). \r\nIt accomplishes this by:\r\n- adding more helper functions\r\n- pre-determining the `tracing::Level` for `librdkafka` based on the `Targets` for the fmt layer\r\n- passing this level down. We have a few `Context` structs, mainly `CoordContext` so that this level can be passed to purification, and `RenderContext` to be passed into source and sink creation\r\n  - In a later pr, more information (likely the new aws information adde by I think @quodlibetor ) can be moved into these contexts, I believe\r\n- Passing this level into the new `ClientConfig::new` wrapper, and `conditionally enabling `debug=all`. It is not 100% to me what the difference between these is, but I believe we should leave it as is for now and investigate later, to prevent behavioral changes\r\nWhat is not accomplished:\r\n- removing the filter from the metrics layer. In my testing, the regression existed in at least the `KafkaUpsert` feature-benchmark. This benchmark is pretty noisy, but after some investigation, I believe the regression is due to us not longer hitting this fast path: https://docs.rs/tracing/latest/src/tracing/macros.rs.html#2064-2069 that is checked before every tracing call.\r\n  - Its possible that turning off `tracing-log` will help, but I doubt removing this filter will ever be perf-neutral: We are simply 1. checking `enabled` more and 2. dispatching more events (i should have realized this would have happened)\r\n  - Even with the regression, this change is worth it, as it still means the `debug=all` case is correctly setup\r\n  - I think in the platform world, I think we will have to accept this regression, especially because turning it on `tokio-console`, and, more importantly, `opentelemetry` will cause it to exist anyways. We probably need to have some kind of proposal on the default, single-instance setup for mz, vs, the cloud/platform setup, which configures tracing in a more aggressive way.\r\n  - @benesch @philip-stoev it would be nice to get some pointers, after this lands, on how to do a full perf test when removing the filter from other other layers\r\n  \r\nOverall, I think this pr improves the general flow of values and extra context into sources, and fixes the mis-use of `tracing::enabled!` for when we DO have more layers enabled (which may only be the `tokio-console` option right now), so i think it is correct to land it as is\r\n\r\n### Motivation\r\n\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n   * This PR refactors existing code.\r\nas described above and in https://github.com/MaterializeInc/materialize/issues/10441\r\n\r\n### Tips for reviewer\r\n\r\n- bottom pr: refactor so that in the later commit, `ClientConfig::new` is always called correctly (through ore)\r\n- second pr: the main refactor, described above:\r\n- third pr: this is a description of an absolutely bizarre bug, and after multiple hours with the tracing team, the conclusion was: lets not use `tracing-log` anymore (we are VERY close to this). I think `rdkafka` is the last MEANINGFUL dep that used `log`\r\n- top pr: a TODO describing the performance followup\r\n\r\n### Testing\r\n\r\n- [N/A] This PR has adequate test coverage / QA involvement has been duly considered.\r\ntested locally\r\n\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10871","id":1149458747,"node_id":"I_kwDOCkIcu85Eg1k7","number":10871,"title":"Optimization/dataflow: have indexes support implicit casts","user":{"login":"wangandi","id":5522362,"node_id":"MDQ6VXNlcjU1MjIzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/5522362?v=4","gravatar_id":"","url":"https://api.github.com/users/wangandi","html_url":"https://github.com/wangandi","followers_url":"https://api.github.com/users/wangandi/followers","following_url":"https://api.github.com/users/wangandi/following{/other_user}","gists_url":"https://api.github.com/users/wangandi/gists{/gist_id}","starred_url":"https://api.github.com/users/wangandi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wangandi/subscriptions","organizations_url":"https://api.github.com/users/wangandi/orgs","repos_url":"https://api.github.com/users/wangandi/repos","events_url":"https://api.github.com/users/wangandi/events{/privacy}","received_events_url":"https://api.github.com/users/wangandi/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":2456706162,"node_id":"MDU6TGFiZWwyNDU2NzA2MTYy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/needs-discussion","name":"needs-discussion","color":"F9D0C4","default":false,"description":"Requires discussion before work proceeds"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-02-24T15:57:13Z","updated_at":"2022-03-10T16:14:45Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"## TL;DR\r\nFor the convenience of the user, indexes on a column should be usable also for contexts where the column has been cast implicitly to another type when the cast does not lose information (i.e., it is an injective function).\r\n\r\n## Description\r\n\r\nWhen a user enters any SQL query:\r\n```\r\nselect * from foo where foo.a = 'to_match' \r\n```\r\nThe SQL layer may decide to implicitly cast `foo.a` so that it is the same type as 'to_match'. This implicit cast may happen even if you cast 'to_match' to become the same type as `foo.a`.\r\n\r\nExample:\r\n\r\n```\r\nmaterialize=> explain raw plan for select selectcol from test where varcharcol = cast('string' as character varying);\r\n                              Raw Plan                              \r\n--------------------------------------------------------------------\r\n %0 =                                                              +\r\n | Get materialize.public.test (u19)                               +\r\n | Filter (varchartostr(#1) = varchartostr(strtovarchar(\"string\")))+\r\n | Project (#0)  \r\n```\r\n\r\nCurrently, if you create an index on a column, the index cannot be used in contexts where it has been implicitly cast to something else. In the query above, you would need an index on `varcharcol::string` instead of an index on `varcharcol` to speed up the filter. But this is not readily apparent to the user. \r\n\r\n## Linked Tickets\r\n\r\n- Case of an implicit cast where the in-memory representation is identical: [#10738](10738).\r\n- Case of an implicit cast where the in-memory representation is different: [#4171](4171).","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10870","id":1149370562,"node_id":"I_kwDOCkIcu85EggDC","number":10870,"title":"sql: values of unknown type too aggressively cast to text","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-02-24T14:41:14Z","updated_at":"2022-02-25T11:27:48Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv21.0.0\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nIn PG, values of unknown types (e.g. values surrounded in quotes that look like text) are treated as unknown types later in the planning process than they are in Materialize:\r\n\r\nPG:\r\n\r\n```\r\nSELECT (ROW('fuzzy dice')).f1;\r\nERROR:  failed to find conversion function from unknown to text\r\n```\r\n\r\nMZ:\r\n```\r\n SELECT (ROW('fuzzy dice')).f1;\r\n     f1     \r\n------------\r\n fuzzy dice\r\n```\r\n```\r\nselect pg_typeof( (ROW('fuzzy dice')).f1);\r\n pg_typeof \r\n-----------\r\n text\r\n```\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10868","id":1149292591,"node_id":"PR_kwDOCkIcu84zZ9W8","number":10868,"title":"sql: make literal records coercible into scalar records","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2022-02-24T13:29:55Z","updated_at":"2022-02-28T16:23:19Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10868","html_url":"https://github.com/MaterializeInc/materialize/pull/10868","diff_url":"https://github.com/MaterializeInc/materialize/pull/10868.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10868.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\nGot sidetracked by the interesting error of `ERROR:  VALUES cannot be cast to uniform type: record(f1: integer) vs text` resulting from a `select least(row(1))` statement and got curious where `text` was coming from. We now have an answer!\r\n\r\nWhen coercing a `LiteralRecord` into a scalar type, we produced a `None` column type. Homogenizing functions like `least` try to guess the most appropriate return type, and defaults to `text` if there are no type hints.\r\n\r\nThis PR adds in coercion of `LiteralRecords` into scalar `Record` types and adds in several tests.\r\n\r\n### Motivation\r\n\r\nFixes https://github.com/MaterializeInc/materialize/issues/10422\r\nFixes https://github.com/MaterializeInc/materialize/issues/8597\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Fixes `ROW` incompatibility in functions and `VALUES` clauses {{% gh 8597 %}} {{% gh 10422 %}}","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10859","id":1148699351,"node_id":"I_kwDOCkIcu85Ed8LX","number":10859,"title":"Support Writing Metadata to Kafka Headers in Sinks","user":{"login":"nmeagan11","id":19657850,"node_id":"MDQ6VXNlcjE5NjU3ODUw","avatar_url":"https://avatars.githubusercontent.com/u/19657850?v=4","gravatar_id":"","url":"https://api.github.com/users/nmeagan11","html_url":"https://github.com/nmeagan11","followers_url":"https://api.github.com/users/nmeagan11/followers","following_url":"https://api.github.com/users/nmeagan11/following{/other_user}","gists_url":"https://api.github.com/users/nmeagan11/gists{/gist_id}","starred_url":"https://api.github.com/users/nmeagan11/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nmeagan11/subscriptions","organizations_url":"https://api.github.com/users/nmeagan11/orgs","repos_url":"https://api.github.com/users/nmeagan11/repos","events_url":"https://api.github.com/users/nmeagan11/events{/privacy}","received_events_url":"https://api.github.com/users/nmeagan11/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":2187378159,"node_id":"MDU6TGFiZWwyMTg3Mzc4MTU5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sink","name":"A-sink","color":"5fefa7","default":false,"description":"Area: sinks"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-23T23:44:50Z","updated_at":"2022-02-23T23:44:50Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nRelevant Use Case and Internal Discussion: https://materializeinc.slack.com/archives/C01CFKM1QRF/p1645606997350319","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10854","id":1148624879,"node_id":"I_kwDOCkIcu85Edp_v","number":10854,"title":"Consider implementing sane comparisons for Intervals","user":{"login":"jkosh44","id":10800303,"node_id":"MDQ6VXNlcjEwODAwMzAz","avatar_url":"https://avatars.githubusercontent.com/u/10800303?v=4","gravatar_id":"","url":"https://api.github.com/users/jkosh44","html_url":"https://github.com/jkosh44","followers_url":"https://api.github.com/users/jkosh44/followers","following_url":"https://api.github.com/users/jkosh44/following{/other_user}","gists_url":"https://api.github.com/users/jkosh44/gists{/gist_id}","starred_url":"https://api.github.com/users/jkosh44/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkosh44/subscriptions","organizations_url":"https://api.github.com/users/jkosh44/orgs","repos_url":"https://api.github.com/users/jkosh44/repos","events_url":"https://api.github.com/users/jkosh44/events{/privacy}","received_events_url":"https://api.github.com/users/jkosh44/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-02-23T22:00:58Z","updated_at":"2022-02-23T22:02:40Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\r\n\r\nThere's no requirement in Dataflow/Materialize for ordering to be deterministic, that limitation only exists with equality. So as far as Dataflow/Materialize is concerned, we can implement `PartialOrd` and `Ord` on Interval such that we consider 24 hours equal to 1 day (and 30 days equal to 1 month).\r\n\r\nHowever I do think there is a limitation in Rust that prevents this. The `PartialOrd` docs contain the following (https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html):\r\n\r\n>    The methods of this trait must be consistent with each other and with those of PartialEq in the following sense:\r\n    a == b if and only if partial_cmp(a, b) == Some(Equal).\r\n    a < b if and only if partial_cmp(a, b) == Some(Less) (ensured by the default implementation).\r\n    a > b if and only if partial_cmp(a, b) == Some(Greater) (ensured by the default implementation).\r\n    a <= b if and only if a < b || a == b (ensured by the default implementation).\r\n    a >= b if and only if a > b || a == b (ensured by the default implementation).\r\n    a != b if and only if !(a == b) (already part of PartialEq).\r\n\r\nSo I'm not sure that's it's possible to implement `PartialOrd` in a \"sane\" way where we consider 24 hours == 1 day without also implementing `Eq` and `PartialEq` to consider 24 hours == 1 day.\r\n\r\nThough there is a potential workaround I was considering where we arbitrarily say that 1 day > 24 hours, and 1 day < 24 hours 1 microsecond. That may allow us to sanely order Interval's without breaking the requirement Rust imposes on `PartialOrd` and `PartialEq`.\r\n\r\nOnce #10566 is fixed then we can fully support 24 hours == 1 day.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10849","id":1148478509,"node_id":"I_kwDOCkIcu85EdGQt","number":10849,"title":"Support SELECTs with AS OF clause in EXPLAIN","user":{"login":"andrioni","id":159177,"node_id":"MDQ6VXNlcjE1OTE3Nw==","avatar_url":"https://avatars.githubusercontent.com/u/159177?v=4","gravatar_id":"","url":"https://api.github.com/users/andrioni","html_url":"https://github.com/andrioni","followers_url":"https://api.github.com/users/andrioni/followers","following_url":"https://api.github.com/users/andrioni/following{/other_user}","gists_url":"https://api.github.com/users/andrioni/gists{/gist_id}","starred_url":"https://api.github.com/users/andrioni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrioni/subscriptions","organizations_url":"https://api.github.com/users/andrioni/orgs","repos_url":"https://api.github.com/users/andrioni/repos","events_url":"https://api.github.com/users/andrioni/events{/privacy}","received_events_url":"https://api.github.com/users/andrioni/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-23T19:14:40Z","updated_at":"2022-02-23T19:14:40Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nRight now `EXPLAIN` can only take a query (which is a subset of what can be done in a `SELECT` statement), not a fully-formed `SELECT` statement, disagreeing with [our documentation](https://materialize.com/docs/sql/explain/). The main known practical limitation is that `SELECT` statements with an `AS OF` clause are currently not supported by `EXPLAIN`.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10840","id":1147911324,"node_id":"I_kwDOCkIcu85Ea7yc","number":10840,"title":"loss of interactivity when running .td tests","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":3052793141,"node_id":"MDU6TGFiZWwzMDUyNzkzMTQx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/P1","name":"P1","color":"d10000","default":false,"description":"Priority: critical issue, panic, etc. drop what you're doing and fix immediately"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2022-02-23T10:27:27Z","updated_at":"2022-03-02T12:29:23Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.20.1-dev (30e6e61db)\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nRunning the following sequences of testdrive tests results in a hang:\r\n- testdrive + redpanda\r\n- persistence tests + confluent\r\n\r\nThe symptoms are as follows:\r\n- no new SQL connections are accepted\r\n- the mzdata/blob directory has just a couple of blobs\r\n- the timestamps table has ~70 entries\r\n- memory consumption nominal\r\n- CPU usage slightly above 100%\r\n-  perf report has librdkafka consuming all the CPU:\r\n```\r\n+   17.50%     0.10%  rdk:broker0      [kernel.kallsyms]   [k] entry_SYSCALL_64_after_hwframe                                                                                                                ◆\r\n+   17.36%     0.15%  rdk:broker0      [kernel.kallsyms]   [k] do_syscall_64                                                                                                                                 ▒\r\n+   10.14%     0.08%  rdk:broker0      [kernel.kallsyms]   [k] schedule                                                                                                                                      ▒\r\n+   10.02%     0.58%  rdk:broker0      [kernel.kallsyms]   [k] __sched_text_start                                                                                                                            ▒\r\n+    9.50%     0.29%  rdk:broker0      libc-2.31.so        [.] __poll                                                                                                                                        ▒\r\n+    9.38%     0.51%  rdk:main         libc-2.31.so        [.] clock_gettime                                                                                                                                 ▒\r\n+    8.78%     0.56%  rdk:main         [vdso]              [.] __vdso_clock_gettime                                                                                                                          ▒\r\n+    8.30%     0.09%  rdk:broker0      [kernel.kallsyms]   [k] __x64_sys_poll                                                                                                                                ▒\r\n+    8.08%     0.00%  rdk:broker0      [unknown]           [k] 0x0000000000000001                                                                                                                            ▒\r\n+    8.01%     0.33%  rdk:broker0      [kernel.kallsyms]   [k] do_sys_poll                                                                                                                                   ▒\r\n+    8.01%     0.72%  rdk:broker0      libpthread-2.31.so  [.] pthread_cond_timedwait@@GLIBC_2.3.2                                                                                                           ▒\r\n+    7.78%     0.06%  coordinator      [kernel.kallsyms]   [k] entry_SYSCALL_64_after_hwframe                                                                                                                ▒\r\n+    7.68%     0.12%  coordinator      [kernel.kallsyms]   [k] do_syscall_64                                                                                                                                 ▒\r\n+    6.93%     0.00%  rdk:main         [vdso]              [.] 0x00007ffc4a6f86cb                                                                                                                            ▒\r\n+    6.87%     0.09%  rdk:broker0      [kernel.kallsyms]   [k] __x64_sys_futex                                                                                                                               ▒\r\n+    6.72%     6.72%  rdk:main         [vdso]              [.] 0x00000000000006cb                                                                                                                            ▒\r\n+    6.68%     0.05%  rdk:broker0      [kernel.kallsyms]   [k] do_futex                                                                                                                                      ▒\r\n+    6.15%     0.18%  rdk:broker0      [kernel.kallsyms]   [k] futex_wait                                                                                                                                    ▒\r\n+    5.65%     0.07%  rdk:broker0      [kernel.kallsyms]   [k] futex_wait_queue_me                                                                                                                           ▒\r\n+    5.32%     0.06%  rdk:broker0      [kernel.kallsyms]   [k] poll_schedule_timeout.constprop.0                                                                                                             ▒\r\n+    5.26%     0.01%  rdk:broker0      [kernel.kallsyms]   [k] schedule_hrtimeout_range                                                                                                                      ▒\r\n+    5.24%     0.05%  rdk:broker0      [kernel.kallsyms]   [k] schedule_hrtimeout_range_clock                                                                                                                ▒\r\n+    3.68%     0.30%  rdk:broker0      [kernel.kallsyms]   [k] __perf_event_task_sched_out                                                                                                                   ▒\r\n```\r\n\r\n- there are 1468 threads, mostly Kafka of course.\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10839","id":1147807550,"node_id":"I_kwDOCkIcu85Eaic-","number":10839,"title":"Map out how different clients and drivers deal with Postgres notices","user":{"login":"andrioni","id":159177,"node_id":"MDQ6VXNlcjE1OTE3Nw==","avatar_url":"https://avatars.githubusercontent.com/u/159177?v=4","gravatar_id":"","url":"https://api.github.com/users/andrioni","html_url":"https://github.com/andrioni","followers_url":"https://api.github.com/users/andrioni/followers","following_url":"https://api.github.com/users/andrioni/following{/other_user}","gists_url":"https://api.github.com/users/andrioni/gists{/gist_id}","starred_url":"https://api.github.com/users/andrioni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrioni/subscriptions","organizations_url":"https://api.github.com/users/andrioni/orgs","repos_url":"https://api.github.com/users/andrioni/repos","events_url":"https://api.github.com/users/andrioni/events{/privacy}","received_events_url":"https://api.github.com/users/andrioni/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-23T08:41:13Z","updated_at":"2022-02-23T08:41:13Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nPostgres has a mechanism to send messages to clients with different levels of severity: from `DEBUG` to `WARNING` (with `EXCEPTION` being equivalent to a full-fledged error). It would be good to map out how different clients and drivers deal with these messages, so that we can:\r\n1. Document it for end-users\r\n2. Make internal prioritization decisions regarding when/how to use these messages.\r\n\r\nThis might also inform further architecture decisions, e.g. should we reuse these messages to push things to the Cloud product.\r\n\r\nRelated issue: #4290","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10837","id":1147474186,"node_id":"I_kwDOCkIcu85EZREK","number":10837,"title":"Add precision type modifier to time, timestamp and interval types to improve compatibility with Postgres","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-02-22T23:35:03Z","updated_at":"2022-02-27T10:51:04Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nThe Postgres definitions of `time`, `timestamp` and `interval` all support an optional type modifier to limit digits of precision retained for the seconds field which is not currently present in the equivalent Materialize types. The current Materialize behavior operates using the maximum digits Postgres supports, so Materialize will never return answers which are less precise than the equivalent query in Postgres; however, the difference in precision can compound through arithmetic operations and yield meaningfully different answers to the same query.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10821","id":1147082491,"node_id":"I_kwDOCkIcu85EXxb7","number":10821,"title":"Predicates are not propagated through an inner equi-join","user":{"login":"aalexandrov","id":1071946,"node_id":"MDQ6VXNlcjEwNzE5NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1071946?v=4","gravatar_id":"","url":"https://api.github.com/users/aalexandrov","html_url":"https://github.com/aalexandrov","followers_url":"https://api.github.com/users/aalexandrov/followers","following_url":"https://api.github.com/users/aalexandrov/following{/other_user}","gists_url":"https://api.github.com/users/aalexandrov/gists{/gist_id}","starred_url":"https://api.github.com/users/aalexandrov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aalexandrov/subscriptions","organizations_url":"https://api.github.com/users/aalexandrov/orgs","repos_url":"https://api.github.com/users/aalexandrov/repos","events_url":"https://api.github.com/users/aalexandrov/events{/privacy}","received_events_url":"https://api.github.com/users/aalexandrov/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":2456706162,"node_id":"MDU6TGFiZWwyNDU2NzA2MTYy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/needs-discussion","name":"needs-discussion","color":"F9D0C4","default":false,"description":"Requires discussion before work proceeds"},{"id":3020087139,"node_id":"MDU6TGFiZWwzMDIwMDg3MTM5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-optimization","name":"A-optimization","color":"5fefa7","default":false,"description":"Area: query optimization and transformation"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-22T15:55:09Z","updated_at":"2022-02-22T17:38:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nv0.20.1-dev (edfc3b017)\r\n\r\n### How did you install Materialize?\r\n\r\nBuilt from source\r\n\r\n### What was the issue?\r\n\r\nSee details and reproduction instructions:\r\n\r\n* [in this writeup (Item No 5)](https://github.com/aalexandrov/mzt-repos/blob/main/simplify_outer_joins/PR_10679.md#item-no-5),\r\n* [in this comment (summarized from the above)](https://github.com/MaterializeInc/materialize/pull/10679#issuecomment-1047937546).\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11170","id":1166349026,"node_id":"I_kwDOCkIcu85FhRLi","number":11170,"title":"regression: SELECT against a postgres source never returns","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-11T12:15:03Z","updated_at":"2022-03-11T12:15:03Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nc5e680282b\n\n### How did you install Materialize?\n\nDocker image\n\n### What was the issue?\n\nThis has happened once in CI https://buildkite.com/materialize/tests/builds/30325#0839949a-2e35-4cde-876f-5dd54f88e358 and once for me on a scratch machine. The symphoms are as follows:\r\n\r\n1. querying the postgres source hangs and never returns.\r\n2. It is possible to create new connections to the database, so the coordinator is not wedged\r\n3. It is possible to query other tables\r\n4. COPY TAIL does not return anything\r\n5.  AS OF 0 and AS OF very_large_number also hang\r\n6. It is posssible to use Ctrl+C to terminate the query\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11169","id":1166073540,"node_id":"PR_kwDOCkIcu840SBWo","number":11169,"title":"dataflow-types: partition StorageCommand::Insert by hash of data","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-11T07:02:57Z","updated_at":"2022-03-11T11:43:13Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11169","html_url":"https://github.com/MaterializeInc/materialize/pull/11169","diff_url":"https://github.com/MaterializeInc/materialize/pull/11169.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11169.patch","merged_at":null},"body":"Previously the inserts were partitioned by their position in the\r\ncommand. This impeded compaction, because it was likely that the\r\nretraction of a piece of data would land on a different worker than the\r\nthe original presentation of that data landed on.\r\n\r\nThis glitch was responsible for the ever-increasing time to `UPDATE` a\r\nnonmaterialized table.\r\n\r\nFix #11071.\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n### Testing\r\n\r\n- [?] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11168","id":1166001724,"node_id":"PR_kwDOCkIcu840RyXm","number":11168,"title":"coord: make session and dataflow builder generic","user":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-11T04:55:35Z","updated_at":"2022-03-11T05:01:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11168","html_url":"https://github.com/MaterializeInc/materialize/pull/11168","diff_url":"https://github.com/MaterializeInc/materialize/pull/11168.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11168.patch","merged_at":null},"body":"Transaction ops live in Sessions, and they hold Timestamps for Peek operations. Also work on dataflow builder while here. Start a new CoordTimestamp trait as a common place to dump trait definitions instead of copying them all over.\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - No user-facing changes.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11167","id":1165997206,"node_id":"PR_kwDOCkIcu840RxdE","number":11167,"title":"pgcopy: invert dependency on sql","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-11T04:45:30Z","updated_at":"2022-03-11T04:48:25Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11167","html_url":"https://github.com/MaterializeInc/materialize/pull/11167","diff_url":"https://github.com/MaterializeInc/materialize/pull/11167.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11167.patch","merged_at":null},"body":"Make sql depend on pgcopy, rather than vice-versa. This prevents changes\r\nto sql requiring that the dataflow crate be recompiled, which is slow.\r\n(dataflow depends on pgcopy).\r\n\r\nDoing it this way is also keeps the responsbility for translating a SQL\r\nAST into a more structured type *in* the sql crate. The previous\r\nCopyParams struct exported by the sql crate was basically just the AST\r\nfor the COPY statement, and the responsibility of validating that AST\r\nwas kicked downstream (i.e., to pgcopy). Better for pgcopy to assert its\r\nneeds (via the properly-structured CopyFormatParams type) and let the\r\nsql crate do the hard work of producing that struct.\r\n\r\n### Motivation\r\n\r\n* This PR refactors existing code to make compiling the sql crate fast again!\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11166","id":1165943860,"node_id":"I_kwDOCkIcu85FfuQ0","number":11166,"title":"sql: `coalesce` with `char` returns wrong result","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":2240473760,"node_id":"MDU6TGFiZWwyMjQwNDczNzYw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-correctness","name":"T-correctness","color":"695bd3","default":false,"description":"Theme: relates to consistency and correctness of results."}],"state":"open","locked":false,"assignee":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"assignees":[{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-03-11T03:01:50Z","updated_at":"2022-03-11T11:48:31Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nccd258eff\r\n\r\n### How did you install Materialize?\r\n\r\nBuilt from source\r\n\r\n### What was the issue?\r\n\r\nIn Materialize:\r\n\r\n```\r\nmaterialize=> select coalesce(null::char(1), 'abc');\r\n coalesce \r\n----------\r\n a\r\n(1 row)\r\n```\r\n\r\nIn PostgreSQL:\r\n\r\n```\r\nbenesch=# select coalesce(null::char(1), 'abc');;\r\n coalesce \r\n----------\r\n abc\r\n(1 row)\r\n```\r\n\r\ncc @sploiselle\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11164","id":1165814446,"node_id":"PR_kwDOCkIcu840RLxw","number":11164,"title":"sql: support typmods in the catalog","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-10T23:00:23Z","updated_at":"2022-03-11T12:06:42Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11164","html_url":"https://github.com/MaterializeInc/materialize/pull/11164","diff_url":"https://github.com/MaterializeInc/materialize/pull/11164.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11164.patch","merged_at":null},"body":"@pH14 or @sploiselle: would one of you be up for picking this up? I left a TODO in the code about validating the typmod, and we need release notes, maybe docs, and lots of tests. But it works in some manual testing!\r\n\r\n----\r\n\r\nFix #4884.\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - To be written!\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11163","id":1165753969,"node_id":"PR_kwDOCkIcu840Q_XO","number":11163,"title":"coord: make the TimestampOracle generic","user":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-10T21:39:54Z","updated_at":"2022-03-11T00:57:44Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11163","html_url":"https://github.com/MaterializeInc/materialize/pull/11163","diff_url":"https://github.com/MaterializeInc/materialize/pull/11163.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11163.patch","merged_at":null},"body":"Force callers to specify exactly how to generate a next timestamp\r\ninstead of always adding 1. This allows us to incorporate `now()` into\r\nnew timestamp generation instead of having that be dependent on calling\r\nfast_forward.\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - No user-facing changes.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11162","id":1165712142,"node_id":"PR_kwDOCkIcu840Q2QK","number":11162,"title":"consolidate the type of the current_values map in upsert_core","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T21:00:04Z","updated_at":"2022-03-10T21:01:59Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11162","html_url":"https://github.com/MaterializeInc/materialize/pull/11162","diff_url":"https://github.com/MaterializeInc/materialize/pull/11162.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11162.patch","merged_at":null},"body":"In this pr, I switch the `current_values` map in `upsert_core` to be a map of `Result<Row, ...> -> Result<Row, DataflowError>`\r\nThis is primarily to clean this code up to ready it for the merge with `persistent_upsert`, which manages key-values without the easy path of \"just send an `(error, t, +1)` if the key fails to decode. \r\n\r\nAdditionally, we NEVER retract if the decoded key is an `Err`. This is the match the previous behavior of the `upsert` operator. (When I merge persistent_upsert into this code, their will be a subtlety for me to point out in a comment; basically, persist may pre-populate the `current_values` map with decode error keys, but they may never be observed, unless a new decode error key comes along; the error case being propagated seems to be happen here: https://github.com/MaterializeInc/materialize/blob/main/src/persist/src/operators/upsert.rs#L277-L290. I will make sure my comment explains this (I hope its accurate) in the later pr. In that case, this pr is mostly a mechanical type change that makes that pr easier to review and digest)\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11161","id":1165623880,"node_id":"PR_kwDOCkIcu840QjdY","number":11161,"title":"Refactor Postgres source metrics using table metadata","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T19:18:07Z","updated_at":"2022-03-10T19:59:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11161","html_url":"https://github.com/MaterializeInc/materialize/pull/11161","diff_url":"https://github.com/MaterializeInc/materialize/pull/11161.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11161.patch","merged_at":null},"body":"This PR reworks the Postgres metrics to tag all relevant metrics with per table stats and consolidates insert/update/delete statements into \"mz_postgres_per_source_operations\" with an operation tag to allow distinguishing by type. Since cardinality is fixed and low using tags for these is a more \"Prometheus\"-y way of reporting which eliminates the need for a separate metric or doing arithmetic during queries to determine the total operations processed. \r\n\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n      - This updates the Postgres metrics to use tags with all of the metadata we have allowing for more precise analysis of the behavior of the Postgres source.\r\n\r\n### Tips for reviewer\r\nWhile the core user visible change here is metrics which are more specific but also more conducive to aggregation there is also a change to the exposure of instrumentation details to the code being instrumented. Originally this struct just held these wrapped structs and handed out references to them but with this PR I am trying out using associated functions to encapsulate the details of figuring out which counter to manipulate in what way with function calls that only accept arguments with types that are `Send` so that in the future if desirable this function call boundary can be used to immediately move the counter manipulation work off to another thread since it involves locking at some level whether its atomic types or more sophisticated locks.\r\n\r\n### Testing\r\n\r\n- [X] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Small changes to the Postgres per source metrics, `mz_postgres_per_source_inserts`, `mz_postgres_per_source_updates`, `mz_postgres_per_source_deletes`, and `mz_postgres_per_source_messages_total` have been removed in favor of `mz_postgres_per_source_operations` which includes an `operation` tag that distinguishes between the three operations. The value of this counter when not filtering by the `operation` tag will be the same as the `mz_postgres_per_source_messages_total` was previously. `mz_postgres_per_source_ignored` will also now include insert/update/delete messages for tables which are not part of the source (such as tables added to the Postgres publication after the Materialize source was created) where previously it only reported the number of `Origin` and `Type` messages received.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11159","id":1165514458,"node_id":"PR_kwDOCkIcu840QMWV","number":11159,"title":"Add test for create views from source after an alter table","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T17:27:33Z","updated_at":"2022-03-10T19:24:04Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11159","html_url":"https://github.com/MaterializeInc/materialize/pull/11159","diff_url":"https://github.com/MaterializeInc/materialize/pull/11159.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11159.patch","merged_at":null},"body":"This PR introduces a new test focused on verifying behavior of create views from source in the face of upstream alter tables being run in Postgres. An alter expected to cause the source to error is validated to allow view creation but no queries to succeed, and then an alter expected to be ignored by the source is validated to allow view creation and querying.\r\n\r\n### Motivation\r\n   * This PR refactors existing code.\r\n\r\n      - Existing code lacked sufficient testing of these interactions, especially since the view creation could logically be expected to fail but it succeeds and then queries fail. This test therefor not only validates behavior but serves as documentation that this slightly unexpected behavior is actually correct.\r\n\r\n### Testing\r\n\r\n- [X] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - No user facing changes here, only tests.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11158","id":1165434400,"node_id":"I_kwDOCkIcu85Fdx4g","number":11158,"title":"The field 'TABLE_SCHEMA' has a type currently unknown to Npgsql (OID 25)","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T16:18:43Z","updated_at":"2022-03-10T16:23:18Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.21.1\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nUsing PowerBI Desktop I attempted to add a new datasource with the postgresql driver to connect to the materialize instance. Received the error when the driver attempted to connect, happens regardless of Import or DirectQuery setting and whether or not \"Include Relationship Columns\" or \"Navigate using full hierarchy\" were checked.\r\n\r\n\r\nThis looks like the same issue reported with CockroachDB in https://github.com/npgsql/npgsql/issues/1321 and https://github.com/cockroachdb/cockroach/issues/63146\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11156","id":1165243290,"node_id":"PR_kwDOCkIcu840PTMy","number":11156,"title":"sql: support SHOW CLUSTERS","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T13:41:57Z","updated_at":"2022-03-11T04:06:02Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11156","html_url":"https://github.com/MaterializeInc/materialize/pull/11156","diff_url":"https://github.com/MaterializeInc/materialize/pull/11156.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11156.patch","merged_at":null},"body":"### Motivation\r\n\r\nThis PR adds a known-desirable feature. Closes #11128\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - no user-facing behavior changes\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11155","id":1165156697,"node_id":"I_kwDOCkIcu85FcuFZ","number":11155,"title":"regression: Creating many indexes over DIFFERENT columns of same table causes OOM","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465753202,"node_id":"MDU6TGFiZWwxNDY1NzUzMjAy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dataflow","name":"A-dataflow","color":"5fefa7","default":false,"description":"Area: dataflow"},{"id":2321764790,"node_id":"MDU6TGFiZWwyMzIxNzY0Nzkw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-memory","name":"T-memory","color":"695bd3","default":false,"description":"Theme: memory"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-10T12:24:23Z","updated_at":"2022-03-10T13:02:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.22.1-dev (0b34555fb)\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nEven with the fix in https://github.com/MaterializeInc/materialize/pull/11154 , the case where many different indexes are being created on the same table still causes OOM. The memory consumption is 100MB/index even in the case where the table has no data.\r\n\r\nTo reproduce, pipe the output of this through `testdrive -`:\r\n\r\n```\r\nprint(f\"> CREATE TABLE t (f1 INTEGER)\")\r\nfor i in range (1,1000):\r\n    print(f\"> CREATE INDEX i{i} ON t(f1+{i})\")\r\n```\r\n\r\nThis same case works like charm on `v0.22.0 (a7c727ac4)` , so it appears different from #4887 that has been there forever. Note that the test case does not ingest any data nor it runs any `SELECT`s.  \n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11153","id":1164928912,"node_id":"PR_kwDOCkIcu840OQKL","number":11153,"title":"scratch: Improve debugging of test failures in CI","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T08:48:51Z","updated_at":"2022-03-10T08:48:51Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11153","html_url":"https://github.com/MaterializeInc/materialize/pull/11153","diff_url":"https://github.com/MaterializeInc/materialize/pull/11153.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11153.patch","merged_at":null},"body":"- Add a \"ci\" instance type that matches the AWS instance type\r\ncurrently used by Buildkite\r\n- Install the psql command-line tool on provision\r\n\r\n### Motivation\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\nI have had the need to use the two suggested enhancements on a daily basis.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11152","id":1164620446,"node_id":"PR_kwDOCkIcu840NP4s","number":11152,"title":"Update pg source docs","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T01:03:21Z","updated_at":"2022-03-10T16:32:58Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11152","html_url":"https://github.com/MaterializeInc/materialize/pull/11152","diff_url":"https://github.com/MaterializeInc/materialize/pull/11152.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11152.patch","merged_at":null},"body":"This PR updates the docs for creating Postgres sources to reflect the latest behavior after #10721 and \r\n#11083 have merged, specifically calling out that when a postgres source is created that we take a snapshot of the tables in the publication and their schemas and then use that to detect DDL changes during replication since they are not part of the protocol.\r\n\r\n\r\n### Motivation\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n      - Documentation of the new Postgres source behavior.\r\n\r\n\r\n\r\n### Testing\r\n\r\n- [X] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - There are no user facing changes, this is a docs only change\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11148","id":1164512814,"node_id":"PR_kwDOCkIcu840M5gB","number":11148,"title":"Add prometheus metric for per partition high watermark","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T22:35:07Z","updated_at":"2022-03-09T23:21:07Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11148","html_url":"https://github.com/MaterializeInc/materialize/pull/11148","diff_url":"https://github.com/MaterializeInc/materialize/pull/11148.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11148.patch","merged_at":null},"body":"As mentioned in https://github.com/MaterializeInc/cloud/issues/2355 there is a desire to have the broker reported high watermark for each partition available in metrics which was lost when the interaction with kafka was reworked. This PR adds the metric `mz_kafka_partition_offset_max` with tags for `topic`, `source_id`, `source_instance` and `partition_id` to the set exported by prometheus which also puts it into the `mz_metrics` system table.\r\n\r\n### Motivation\r\n\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\nhttps://github.com/MaterializeInc/cloud/issues/2355\r\n\r\n### Tips for reviewer\r\n\r\nNo, high watermark is not the correct spelling but its what kafka and rdkafka use so we will all have to wonder exactly what happens to a watermark to get it high or low.\r\n\r\n### Testing\r\n\r\n- [X] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Add metric mz_kafka_partition_offset_max which records the per partition high_watermark reported by the broker. This metric is available via the prometheus metrics endpoint and the mz_metrics system table.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11147","id":1164482687,"node_id":"I_kwDOCkIcu85FaJh_","number":11147,"title":"dataflow: merge `persistent_upsert` into `mz_dataflow::render::upsert`","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"assignees":[{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-03-09T21:56:26Z","updated_at":"2022-03-09T21:57:07Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"To finally close https://github.com/MaterializeInc/materialize/issues/9551\r\n\r\n\r\nSee https://github.com/MaterializeInc/materialize/issues/9914 for the basic overview of the options.\r\n\r\nAfter talking to @aljoscha, moving `persistent_upsert` into the `dataflow` crate should suffice to simplify the code","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11145","id":1164365726,"node_id":"I_kwDOCkIcu85FZs-e","number":11145,"title":"`jsonb_object_agg` doesn't fail for null keys","user":{"login":"andrioni","id":159177,"node_id":"MDQ6VXNlcjE1OTE3Nw==","avatar_url":"https://avatars.githubusercontent.com/u/159177?v=4","gravatar_id":"","url":"https://api.github.com/users/andrioni","html_url":"https://github.com/andrioni","followers_url":"https://api.github.com/users/andrioni/followers","following_url":"https://api.github.com/users/andrioni/following{/other_user}","gists_url":"https://api.github.com/users/andrioni/gists{/gist_id}","starred_url":"https://api.github.com/users/andrioni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrioni/subscriptions","organizations_url":"https://api.github.com/users/andrioni/orgs","repos_url":"https://api.github.com/users/andrioni/repos","events_url":"https://api.github.com/users/andrioni/events{/privacy}","received_events_url":"https://api.github.com/users/andrioni/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-09T19:47:50Z","updated_at":"2022-03-09T19:56:23Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.22.1-dev (502f90dc8)\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nPostgres rejects null keys on `jsonb_object_agg`, as JSON keys have to be non-null strings, but Materialize silently drops those key-value pairs:\r\n\r\n### Postgres\r\n```\r\nalessandro=# select jsonb_object_agg(null, 2);\r\nERROR:  field name must not be null\r\n\r\nalessandro=# select jsonb_object_agg(a, b) from (values (1, 2), (null, 4)) v(a, b);\r\nERROR:  field name must not be null\r\n```\r\n\r\n### Materialize\r\n```\r\nmaterialize=> select jsonb_object_agg(null, 2);\r\n jsonb_object_agg\r\n------------------\r\n {}\r\n(1 row)\r\n\r\nmaterialize=> select jsonb_object_agg(a, b) from (values (1, 2), (null, 4)) v(a, b);\r\n jsonb_object_agg\r\n------------------\r\n {\"1\":2}\r\n(1 row)\r\n```\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11144","id":1164228090,"node_id":"PR_kwDOCkIcu840L-qj","number":11144,"title":"sql-parser: add support for ALTER SECRET","user":{"login":"mkysel","id":7513948,"node_id":"MDQ6VXNlcjc1MTM5NDg=","avatar_url":"https://avatars.githubusercontent.com/u/7513948?v=4","gravatar_id":"","url":"https://api.github.com/users/mkysel","html_url":"https://github.com/mkysel","followers_url":"https://api.github.com/users/mkysel/followers","following_url":"https://api.github.com/users/mkysel/following{/other_user}","gists_url":"https://api.github.com/users/mkysel/gists{/gist_id}","starred_url":"https://api.github.com/users/mkysel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkysel/subscriptions","organizations_url":"https://api.github.com/users/mkysel/orgs","repos_url":"https://api.github.com/users/mkysel/repos","events_url":"https://api.github.com/users/mkysel/events{/privacy}","received_events_url":"https://api.github.com/users/mkysel/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-09T17:22:20Z","updated_at":"2022-03-09T18:02:47Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11144","html_url":"https://github.com/MaterializeInc/materialize/pull/11144","diff_url":"https://github.com/MaterializeInc/materialize/pull/11144.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11144.patch","merged_at":null},"body":"Add support for ALTER SECRET required for the platform. For the motivation see https://github.com/MaterializeInc/materialize/pull/11022\r\n\r\nTested manually, all cases parse as expected.\r\n```\r\nmaterialize=> alter secret foo;\r\nERROR:  Expected one of AS or RENAME, found semicolon\r\nLINE 1: alter secret foo;\r\n                        ^\r\n\r\nmaterialize=> alter secret foo as bar;\r\nERROR:  ALTER SECRET not yet supported\r\n\r\nmaterialize=> alter secret foo rename to bar;\r\nERROR:  unknown catalog item 'foo'\r\n\r\nmaterialize=> alter secret if exists foo rename to bar;\r\nALTER INDEX\r\n\r\nmaterialize=> alter secret if exists foo as bar;\r\nERROR:  ALTER SECRET not yet supported\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11143","id":1164179040,"node_id":"PR_kwDOCkIcu840L0cV","number":11143,"title":"debugging: add hidden flag to print tracing log level","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-09T16:40:29Z","updated_at":"2022-03-10T20:44:02Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11143","html_url":"https://github.com/MaterializeInc/materialize/pull/11143","diff_url":"https://github.com/MaterializeInc/materialize/pull/11143.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11143.patch","merged_at":null},"body":"I keep having to add this println locally to debug, and because as we add more filters and change things, its important to ensure the default hits the fast path in tracing macros where the max level is `INFO`, this helps confirm that things are working as intended\r\n\r\n### Motivation\r\n  * This PR adds a feature that has not yet been specified.\r\nLocal testing hidden feature\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11141","id":1164110785,"node_id":"PR_kwDOCkIcu840LmE9","number":11141,"title":"pg-cdc: add timeouts to connection / copy out postgres calls","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T15:42:26Z","updated_at":"2022-03-09T17:50:10Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11141","html_url":"https://github.com/MaterializeInc/materialize/pull/11141","diff_url":"https://github.com/MaterializeInc/materialize/pull/11141.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11141.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\nAs further protection against network-related-stalls (https://github.com/MaterializeInc/materialize/issues/10938) this PR adds in a basic Postgres replication client connection timeout, as well as a per-row timeout for our `CopyOutStream`. Since adding in these timeouts, I have not been able to reproduce the pg-cdc-resumption test failures we were seeing in the linked issue.\r\n\r\n### Motivation\r\n\r\nFixes https://github.com/MaterializeInc/materialize/issues/10938\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A - Same release note as https://github.com/MaterializeInc/materialize/pull/11098","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11138","id":1163954160,"node_id":"I_kwDOCkIcu85FYIfw","number":11138,"title":"regression: substantial increase of the records of indexes on a table","user":{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T13:40:25Z","updated_at":"2022-03-09T13:40:25Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.20.0\n\n### How did you install Materialize?\n\nDocker image\n\n### What was the issue?\n\nAfter an upgrade from 0.15.0 to 0.22.0 there seems to be a substantial increase of the records in indexes on a table.\r\n\r\nSteps to reproduce:\r\n\r\n- Create a table and an index:\r\n\r\n```sql\r\nCREATE table t1 (f1 bigint, f2 bigint);\r\nCREATE INDEX t1_f2_idx ON t1 (f2);\r\n```\r\n\r\n- Generate some records:\r\n\r\n```bash\r\nfor i in {1..1000}; do\r\n    psql -U materialize -h localhost -p 6875 -c \"INSERT INTO t1 (f1, f2) VALUES ($i, $i);\"\r\ndone\r\n```\r\n\r\n- Update and delete some of the records:\r\n\r\n```sql\r\nUPDATE t1 SET f1 = f1 + 1 WHERE (f2 > 500);\r\nDELETE FROM t1 WHERE f2 > 500;\r\n\r\nUPDATE t1 SET f1 = f1 + 1 WHERE (f2 < 500);\r\nDELETE FROM t1 WHERE f2 < 250;\r\n```\r\n\r\n- Check the count of the total records:\r\n\r\n```sql\r\nSELECT COUNT(*) from t1;\r\n// output: 251\r\n```\r\n\r\nBut the records in the index are growing exponentially:\r\n\r\n<img width=\"479\" alt=\"image\" src=\"https://user-images.githubusercontent.com/21223421/157452812-9c51cd95-ec69-40d6-a259-66d0001d6ac3.png\">\r\n\r\nCompaction does not seem to be kicking in.\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11137","id":1163897794,"node_id":"I_kwDOCkIcu85FX6vC","number":11137,"title":"performance regression: Index creation with `--persistent-user-tables` is 2.5-5x slower ","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1469366247,"node_id":"MDU6TGFiZWwxNDY5MzY2MjQ3","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-performance","name":"T-performance","color":"695bd3","default":false,"description":"Theme: performance improvements"},{"id":1771623161,"node_id":"MDU6TGFiZWwxNzcxNjIzMTYx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-persistence","name":"A-persistence","color":"5fefa7","default":false,"description":"Area: persistence of (meta)data"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-03-09T12:47:45Z","updated_at":"2022-03-11T12:39:16Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.22.1-dev (253c608b1)\n\n### How did you install Materialize?\n\nDocker image\n\n### What was the issue?\n\n```\r\nCreateIndex               \\|       0.588 \\|       0.256 \\|    !!YES!!    \\| 2.3 TIMES slower\r\n```\r\n\r\nThe regression:\r\n- seems specific to `--persistent-user-tables`\r\n- is proportional to the size of the table, that is, it is not a one-time startup cost\r\n- the test uses a single table \r\nTo reproduce:\r\n\r\n```\r\n./mzcompose run default --this-tag=unstable-$THIS_SHA --other-tag --root-scenario=CreateIndex --max-runs=\r\n```\r\n\r\nBisection reports the following commit:\r\n\r\n```\r\n3f7aedf33e91b8497c2f1622a4333da15a37de10 is the first bad commit\r\ncommit 3f7aedf33e91b8497c2f1622a4333da15a37de10\r\nMerge: 588a9e720 253c608b1\r\nAuthor: Nikhil Benesch <nikhil.benesch@gmail.com>\r\nDate:   Sat Mar 5 19:50:34 2022 -0500\r\n\r\n    Merge pull request #10883 from benesch/table-unspecial\r\n    \r\n    coord,dataflow: remove special cases for table indexes\r\n```\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11136","id":1163869453,"node_id":"I_kwDOCkIcu85FXz0N","number":11136,"title":"panic: \"timestamp should not go backwards\" with testdrive and --persistent-user-tables","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1771623161,"node_id":"MDU6TGFiZWwxNzcxNjIzMTYx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-persistence","name":"A-persistence","color":"5fefa7","default":false,"description":"Area: persistence of (meta)data"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-09T12:20:24Z","updated_at":"2022-03-09T15:22:03Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nv0.22.1-dev (95905bb1b)\r\n\r\n### How did you install Materialize?\r\n\r\nDocker image\r\n\r\n### What was the issue?\r\n\r\nNightly testdrive with `--persistent-user-tables` has failed:\r\n\r\nhttps://buildkite.com/materialize/nightlies/builds/718#76fd38e9-cb99-4175-85ce-60298226316e\r\n\r\nNote that this is the less-strict form of the assertion, that is, the timestamps are not equal to one another but are spaced apart by 1 timestamp-interval minus 1ms\r\n\r\n```\r\nmaterialized_1     | 2022-03-08T12:48:05.854898Z ERROR panic: timestamp should not go backwards, but 1646743684200 < 1646743684299\r\nmaterialized_1     | thread: timely:work-1\r\nmaterialized_1     | location: src/dataflow/src/source/timestamp.rs:202:13\r\nmaterialized_1     | version: 0.22.1-dev (95905bb1bf021f0b8349df42b32447c9b3a7e73f)\r\nmaterialized_1     | backtrace:\r\nmaterialized_1     |    0: materialized::handle_panic\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/materialized/src/bin/materialized/main.rs:937:21\r\nmaterialized_1     |    1: core::ops::function::Fn::call\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/ops/function.rs:70:5\r\nmaterialized_1     |    2: std::panicking::rust_panic_with_hook\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:610:17\r\nmaterialized_1     |    3: std::panicking::begin_panic_handler::{{closure}}\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:502:13\r\nmaterialized_1     |    4: std::sys_common::backtrace::__rust_end_short_backtrace\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/sys_common/backtrace.rs:139:18\r\nmaterialized_1     |    5: rust_begin_unwind\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:498:5\r\nmaterialized_1     |    6: core::panicking::panic_fmt\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/panicking.rs:116:14\r\nmaterialized_1     |    7: mz_dataflow::source::timestamp::TimestampBindingBox::add_binding\r\nmaterialized_1     |    8: mz_dataflow::source::timestamp::TimestampBindingBox::update_timestamp\r\nmaterialized_1     |       mz_dataflow::source::timestamp::TimestampBindingRc::update_timestamp\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/dataflow/src/source/timestamp.rs:579:9\r\nmaterialized_1     |    9: mz_dataflow::server::storage_state::ActiveStorageState<A,B>::update_rt_timestamps\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/dataflow/src/server/storage_state.rs:472:13\r\nmaterialized_1     |       mz_dataflow::server::Worker<A,SC,CR>::run\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/dataflow/src/server.rs:273:13\r\nmaterialized_1     |   10: mz_dataflow::server::serve_boundary::{{closure}}\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/dataflow/src/server.rs:163:9\r\nmaterialized_1     |       timely::execute::execute::{{closure}}\r\nmaterialized_1     |              at cargo/git/checkouts/timely-dataflow-4c0cc365061cd263/4db679a/timely/src/execute.rs:285:22\r\nmaterialized_1     |       timely_communication::initialize::initialize_from::{{closure}}\r\nmaterialized_1     |              at cargo/git/checkouts/timely-dataflow-4c0cc365061cd263/4db679a/communication/src/initialize.rs:316:33\r\nmaterialized_1     |       std::sys_common::backtrace::__rust_begin_short_backtrace\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/sys_common/backtrace.rs:123:18\r\nmaterialized_1     |   11: std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/thread/mod.rs:477:17\r\nmaterialized_1     |       <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/panic/unwind_safe.rs:271:9\r\nmaterialized_1     |       std::panicking::try::do_call\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:406:40\r\nmaterialized_1     |       std::panicking::try\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:370:19\r\nmaterialized_1     |       std::panic::catch_unwind\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panic.rs:133:14\r\nmaterialized_1     |       std::thread::Builder::spawn_unchecked::{{closure}}\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/thread/mod.rs:476:30\r\nmaterialized_1     |       core::ops::function::FnOnce::call_once{{vtable.shim}}\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/ops/function.rs:227:5\r\nmaterialized_1     |   12: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/alloc/src/boxed.rs:1854:9\r\nmaterialized_1     |       <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/alloc/src/boxed.rs:1854:9\r\nmaterialized_1     |       std::sys::unix::thread::Thread::new::thread_start\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/sys/unix/thread.rs:108:17\r\nmaterialized_1     |   13: start_thread\r\nmaterialized_1     |   14: clone\r\nmaterialized_1     | \r\n```\r\n\r\n### Relevant log output\r\n\r\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11133","id":1163706824,"node_id":"I_kwDOCkIcu85FXMHI","number":11133,"title":"coord: fix cancel peek with clusters","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":3908056952,"node_id":"LA_kwDOCkIcu87o8Dd4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-platform","name":"A-platform","color":"5fefa7","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T09:41:51Z","updated_at":"2022-03-09T09:41:51Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The coordinator's tracking of pending peeks needs to become cluster aware. There's an implementation in @sploiselle/my WIP branch that can be stolen here: https://github.com/MaterializeInc/materialize/compare/MaterializeInc:74d4dc1...benesch:c3eaa4d#","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11132","id":1163667890,"node_id":"PR_kwDOCkIcu840KHo5","number":11132,"title":"Attempt to wire up materialized with remote compute","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-03-09T09:04:29Z","updated_at":"2022-03-09T22:01:33Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11132","html_url":"https://github.com/MaterializeInc/materialize/pull/11132","diff_url":"https://github.com/MaterializeInc/materialize/pull/11132.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11132.patch","merged_at":null},"body":"~Do not merge.~ Idk could merge.\r\n\r\nAttempt to have `materialized` serve two flavors of dataflow server: either a \"conventional\" single process server that uses an in-process event-link boundary between Storage and Compute, or a server that uses TCP for the boundary and which responds to `create_instance` commands to remote instances by attempting a connection.\r\n\r\n### Motivation\r\n\r\nAllow platform experimentation.\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11131","id":1163653636,"node_id":"I_kwDOCkIcu85FW_IE","number":11131,"title":"sql: cluster tracking issue","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T08:49:23Z","updated_at":"2022-03-10T13:42:43Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"This is a tracking issue for the SQL changes required to support clusters.\r\n\r\nDesign doc: https://github.com/MaterializeInc/materialize/blob/main/doc%2Fdeveloper%2Fdesign%2F20220214_create_cluster.md#cluster-sql-syntax-and-semantics\r\n\r\nOutstanding work:\r\n\r\n * [x] #11126\r\n * [x] #11127\r\n * [x] #11128\r\n * [ ] #11129\r\n * [ ] #11130\r\n * [ ] #11133\r\n\r\n@sploiselle I figured I'd file this up so you can work on these slash farm them out as you like! The only one that's sort of urgent is #11127—would be nice to be able to exercise the `drop_compute_instance` code path. Everything else is cosmetic.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11130","id":1163651127,"node_id":"I_kwDOCkIcu85FW-g3","number":11130,"title":"sql: convert cluster IDs back to names in `SHOW CREATE INDEX`","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":3908056952,"node_id":"LA_kwDOCkIcu87o8Dd4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-platform","name":"A-platform","color":"5fefa7","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-09T08:46:36Z","updated_at":"2022-03-09T13:48:02Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"#11126 is likely to land with an ugly defect in `SHOW CREATE INDEX`:\r\n\r\n    CREATE INDEX foo IN CLUSTER [1] ON table (col)\r\n\r\nWe need to unresolve that ID back into a cluster name when we go to print the statement.\r\n\r\n@jkosh44, perhaps you'd like to pick this one up as part of your name resolution work?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11129","id":1163648842,"node_id":"I_kwDOCkIcu85FW99K","number":11129,"title":"Add `cluster_id` to `mz_indexes` and `mz_sinks`","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":3908056952,"node_id":"LA_kwDOCkIcu87o8Dd4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-platform","name":"A-platform","color":"5fefa7","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T08:44:06Z","updated_at":"2022-03-09T08:44:06Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nSee: https://github.com/MaterializeInc/materialize/blob/main/doc%2Fdeveloper%2Fdesign%2F20220214_create_cluster.md#system-catalog-changes\r\n\r\nThis task should also include updating `SHOW INDEXES` and `SHOW SINKS` to display the cluster name, and add the `IN CLUSTER` filter clause.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11128","id":1163647778,"node_id":"I_kwDOCkIcu85FW9si","number":11128,"title":"sql: support `SHOW CLUSTERS`","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T08:42:54Z","updated_at":"2022-03-09T08:42:54Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nSee: https://github.com/MaterializeInc/materialize/blob/main/doc%2Fdeveloper%2Fdesign%2F20220214_create_cluster.md#cluster-sql-syntax-and-semantics","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11123","id":1163392271,"node_id":"I_kwDOCkIcu85FV_UP","number":11123,"title":"catalog: reconsider `i64` as ID type","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"},{"id":3908815277,"node_id":"LA_kwDOCkIcu87o-8mt","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/M-platform-blocker","name":"M-platform-blocker","color":"A71B80","default":false,"description":"Issue that will hold back shipping Materialize Platform"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T01:39:47Z","updated_at":"2022-03-09T01:40:04Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Databases, schemas, and (soon) compute instances use `i64` as their ID type. These would more properly be `u64`s, but due to a SQLite limitation they are presently `i64`s. We should reconsider this decision before committing to it.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11117","id":1163179663,"node_id":"PR_kwDOCkIcu840Ifin","number":11117,"title":"WIP persist apiv2 impl prototype","user":{"login":"danhhz","id":52528,"node_id":"MDQ6VXNlcjUyNTI4","avatar_url":"https://avatars.githubusercontent.com/u/52528?v=4","gravatar_id":"","url":"https://api.github.com/users/danhhz","html_url":"https://github.com/danhhz","followers_url":"https://api.github.com/users/danhhz/followers","following_url":"https://api.github.com/users/danhhz/following{/other_user}","gists_url":"https://api.github.com/users/danhhz/gists{/gist_id}","starred_url":"https://api.github.com/users/danhhz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danhhz/subscriptions","organizations_url":"https://api.github.com/users/danhhz/orgs","repos_url":"https://api.github.com/users/danhhz/repos","events_url":"https://api.github.com/users/danhhz/events{/privacy}","received_events_url":"https://api.github.com/users/danhhz/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-08T21:53:53Z","updated_at":"2022-03-10T23:47:29Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11117","html_url":"https://github.com/MaterializeInc/materialize/pull/11117","diff_url":"https://github.com/MaterializeInc/materialize/pull/11117.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11117.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11116","id":1163176906,"node_id":"PR_kwDOCkIcu840IfGs","number":11116,"title":"persist: disallow empty trace batch parts","user":{"login":"ruchirK","id":4015012,"node_id":"MDQ6VXNlcjQwMTUwMTI=","avatar_url":"https://avatars.githubusercontent.com/u/4015012?v=4","gravatar_id":"","url":"https://api.github.com/users/ruchirK","html_url":"https://github.com/ruchirK","followers_url":"https://api.github.com/users/ruchirK/followers","following_url":"https://api.github.com/users/ruchirK/following{/other_user}","gists_url":"https://api.github.com/users/ruchirK/gists{/gist_id}","starred_url":"https://api.github.com/users/ruchirK/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruchirK/subscriptions","organizations_url":"https://api.github.com/users/ruchirK/orgs","repos_url":"https://api.github.com/users/ruchirK/repos","events_url":"https://api.github.com/users/ruchirK/events{/privacy}","received_events_url":"https://api.github.com/users/ruchirK/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-08T21:51:38Z","updated_at":"2022-03-09T19:58:21Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11116","html_url":"https://github.com/MaterializeInc/materialize/pull/11116","diff_url":"https://github.com/MaterializeInc/materialize/pull/11116.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11116.patch","merged_at":null},"body":"This commit introduces a new invariant that trace batch parts cannot be empty.\r\nPreviously, empty trace batch parts were used to denote empty trace batches. Now,\r\nthere's only one way to represent that: with an empty list of keys.\r\n\r\nThis commit also bumps the encoding version and corresponding golden and upgrade\r\ntests.\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11109","id":1162959607,"node_id":"I_kwDOCkIcu85FUVr3","number":11109,"title":"Combine `SHOW CREATE INDEX` and `pg_get_indexdef` implementations","user":{"login":"jkosh44","id":10800303,"node_id":"MDQ6VXNlcjEwODAwMzAz","avatar_url":"https://avatars.githubusercontent.com/u/10800303?v=4","gravatar_id":"","url":"https://api.github.com/users/jkosh44","html_url":"https://github.com/jkosh44","followers_url":"https://api.github.com/users/jkosh44/followers","following_url":"https://api.github.com/users/jkosh44/following{/other_user}","gists_url":"https://api.github.com/users/jkosh44/gists{/gist_id}","starred_url":"https://api.github.com/users/jkosh44/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkosh44/subscriptions","organizations_url":"https://api.github.com/users/jkosh44/orgs","repos_url":"https://api.github.com/users/jkosh44/repos","events_url":"https://api.github.com/users/jkosh44/events{/privacy}","received_events_url":"https://api.github.com/users/jkosh44/received_events","type":"User","site_admin":false},"labels":[{"id":1244583500,"node_id":"MDU6TGFiZWwxMjQ0NTgzNTAw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/D-good%20first%20issue","name":"D-good first issue","color":"eac638","default":false,"description":"Difficulty: Good for newcomers"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-08T18:01:36Z","updated_at":"2022-03-08T18:01:36Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"<!-- Contributor use only. -->\r\nIn #10980 I added support for the `pg_get_index` function which recreates the command used to create the index. I was not aware that [`SHOW CREATE INDEX`](https://materialize.com/docs/sql/show-create-index/) already existed with the same functionality. Ideally the `pg_get_indexdef` implementation should be refactored to re-use the `SHOW CREATE INDEX` implementation.\r\n\r\nNote: `pg_get_indexdef` adds the `USING <index-type>` syntax to the output to match PostgreSQL behavior and so that the meta-command `\\d <object>` can properly parse the output. `SHOW CREATE INDEX` does not contain this syntax in the output currently. Since Materialize only supports a single index type, it's valid syntax to include `USING arrangement` when creating an index, but it's ignored. I think this output should be added to `SHOW CREATE INDEX`, still it's something to consider.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11105","id":1162843742,"node_id":"PR_kwDOCkIcu840HYkH","number":11105,"title":"docs:tail new features","user":{"login":"joacoc","id":11491779,"node_id":"MDQ6VXNlcjExNDkxNzc5","avatar_url":"https://avatars.githubusercontent.com/u/11491779?v=4","gravatar_id":"","url":"https://api.github.com/users/joacoc","html_url":"https://github.com/joacoc","followers_url":"https://api.github.com/users/joacoc/followers","following_url":"https://api.github.com/users/joacoc/following{/other_user}","gists_url":"https://api.github.com/users/joacoc/gists{/gist_id}","starred_url":"https://api.github.com/users/joacoc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joacoc/subscriptions","organizations_url":"https://api.github.com/users/joacoc/orgs","repos_url":"https://api.github.com/users/joacoc/repos","events_url":"https://api.github.com/users/joacoc/events{/privacy}","received_events_url":"https://api.github.com/users/joacoc/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-08T16:10:15Z","updated_at":"2022-03-08T21:56:20Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11105","html_url":"https://github.com/MaterializeInc/materialize/pull/11105","diff_url":"https://github.com/MaterializeInc/materialize/pull/11105.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11105.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n**Try to improve how TAIL is perceived and what is capable to do.**\r\n\r\nSince `TAIL` now has `SNAPSHOT` enabled by default and is now able to stream updates from an arbitrary `SELECT` statement, it makes easier to experience what is possible to acchieve. \r\n\r\nAs a side effect:\r\n* Doing `tail table` becomes a shorthand for `tail (select * from table)` \r\n* Using a `tail` by default will `query` (Snapshot) and `stream` updates.\r\n\r\nObjectives:\r\n* Setting the focus in the feature `tail (statement)` rather than `tail object`\r\n* Turning examples into plug & play\r\n* Add more languages examples: PHP and JAVA.  [GO Pending]\r\n* Help troubleshoot how many TAILS are currently running in Materialize\r\n* Guidethrough on how to use `AS OF` with `TAIL`\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11103","id":1162756926,"node_id":"PR_kwDOCkIcu840HGM9","number":11103,"title":"Command reconciliation","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-08T14:56:42Z","updated_at":"2022-03-10T18:35:38Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11103","html_url":"https://github.com/MaterializeInc/materialize/pull/11103","diff_url":"https://github.com/MaterializeInc/materialize/pull/11103.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11103.patch","merged_at":null},"body":"Add a client that reconciles commands from the ADAPTER to COMPUTE/STORAGE.\r\n\r\nThis is a work-in-progress.\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11100","id":1162710540,"node_id":"I_kwDOCkIcu85FTY4M","number":11100,"title":"creating a source from a kafka topic generated by debezium + transforms (logical table)","user":{"login":"docteurklein","id":109846,"node_id":"MDQ6VXNlcjEwOTg0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/109846?v=4","gravatar_id":"","url":"https://api.github.com/users/docteurklein","html_url":"https://github.com/docteurklein","followers_url":"https://api.github.com/users/docteurklein/followers","following_url":"https://api.github.com/users/docteurklein/following{/other_user}","gists_url":"https://api.github.com/users/docteurklein/gists{/gist_id}","starred_url":"https://api.github.com/users/docteurklein/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/docteurklein/subscriptions","organizations_url":"https://api.github.com/users/docteurklein/orgs","repos_url":"https://api.github.com/users/docteurklein/repos","events_url":"https://api.github.com/users/docteurklein/events{/privacy}","received_events_url":"https://api.github.com/users/docteurklein/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-03-08T14:16:36Z","updated_at":"2022-03-11T09:18:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.22.0\n\n### How did you install Materialize?\n\nDocker image\n\n### What was the issue?\n\nthe avro registry doesn't seem to include the extra key added by debezium `ByLogicalTableRouter` transformer (https://debezium.io/documentation/reference/1.8/transformations/topic-routing.html#_ensure_unique_key).\r\n\r\nHere is my debezium connector config:\r\n```\r\ncurl --request POST --url 0:8083/connectors --header 'Content-Type: application/json' --data @- << EOF\r\n{\r\n  \"name\": \"$1\",\r\n  \"config\": {\r\n    \"connector.class\": \"io.debezium.connector.mysql.MySqlConnector\",\r\n    \"tasks.max\": \"1\",\r\n    \"database.hostname\": \"mysql\",\r\n    \"database.port\": \"3306\",\r\n    \"database.user\": \"root\",\r\n    \"database.password\": \"root\",\r\n    \"database.server.name\": \"$1\",\r\n    \"database.include.list\": \"$1\",\r\n    \"database.history.kafka.bootstrap.servers\": \"redpanda:9092\",\r\n    \"database.history.kafka.topic\": \"schema-changes.$1\",\r\n    \"database.allowPublicKeyRetrieval\": true,\r\n    \"transforms\": \"Reroute\",\r\n    \"transforms.Reroute.type\": \"io.debezium.transforms.ByLogicalTableRouter\",\r\n    \"transforms.Reroute.topic.regex\": \"^$1\\\\\\.$1\\\\\\.(.*)$\",\r\n    \"transforms.Reroute.topic.replacement\": \"all_pim.\\$1\",\r\n    \"transforms.Reroute.key.field.name\": \"tenant\",\r\n    \"transforms.Reroute.key.field.regex\": \".*\",\r\n    \"transforms.Reroute.key.field.replacement\": \"$1\"\r\n  }\r\n}\r\nEOF\r\n\r\n```\r\n\r\nWhen I try to create a source from it, it fails about a lacking key: \r\n```\r\ncreate source all_pim.product\r\n  from kafka broker 'redpanda:9092'\r\n  topic 'all_pim.pim_catalog_product'\r\n  format avro\r\n  using confluent schema registry 'http://redpanda:8081'\r\n  envelope debezium\r\n;\r\nERROR:  Value schema missing primary key column: tenant\r\n```\r\n\r\nAm I missing something?\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11097","id":1162500008,"node_id":"I_kwDOCkIcu85FSleo","number":11097,"title":"Introduce a headless controller to enable COMPUTE development without waiting for ADAPTER","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":1465753202,"node_id":"MDU6TGFiZWwxNDY1NzUzMjAy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dataflow","name":"A-dataflow","color":"5fefa7","default":false,"description":"Area: dataflow"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-08T10:44:30Z","updated_at":"2022-03-08T10:44:30Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nCurrently, all features provided by COMPUTE need a corresponding implementation within ADAPTER to expose them to users and testing. This limits the speed at which COMPUTE features can be developed and tested.\r\n\r\nFor this reason, it would be good to introduce a headless controller that receives inputs using the same protocol that ADAPTER speaks but which would allow us to rapidly test COMPUTE's features.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11096","id":1162357204,"node_id":"I_kwDOCkIcu85FSCnU","number":11096,"title":"feature-benchmark: Allow detection of progressive slowdowns during the execution of a single scenario","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1467666356,"node_id":"MDU6TGFiZWwxNDY3NjY2MzU2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/D-good%20second%20issue","name":"D-good second issue","color":"eac638","default":false,"description":"Difficulty: Good for a newcomer who's warmed up"},{"id":1741965254,"node_id":"MDU6TGFiZWwxNzQxOTY1MjU0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-testing","name":"T-testing","color":"695bd3","default":false,"description":"Theme: tests or test infrastructure"}],"state":"open","locked":false,"assignee":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"assignees":[{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-03-08T08:21:48Z","updated_at":"2022-03-08T08:35:55Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Goal(s)\n\nIn https://github.com/MaterializeInc/materialize/issues/11071 we had a situation where a scenario was getting progressively slower between individual measurements. Since the feature benchmark framework takes the minimum measurement, this gradual degradation was not visible until the logs were manually reviewed.\r\n\r\nTo catch such situations in the future we could do one of the following:\r\n1. the `min` strategy can be replaced with a more conventional benchmark measurement using the average, percentiles, outlier removal, etc. A scenario that is getting progressively slower would have scored badly on such a measurement and a regression would have been signaled.\r\n2. we could keep the `min` strategy and add a follow-up check for performance degradation. We can collect all the measurements and pass them through a linear regression library. The slope of the line that is thus produced will tell us if there is an ongoing slowdown or not.\r\n\r\nThe advantage of doing No 2 is that the existing feature benchmark will be minimally perturbed so that there is no long followup stabilization period that will come from changing the measurement strategy.\n\n### Steps\n\n1. Pick a python library that does linear regression\r\n2. Implement an aggregator that accumulates the measurements and reports the slope of the linear function\r\n3. Figure out a way to signal failure for a particular scenario if the angle of the slope is steeper than some degree.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11087","id":1161967655,"node_id":"I_kwDOCkIcu85FQjgn","number":11087,"title":"Relax logical compaction to source frequency","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-07T21:57:41Z","updated_at":"2022-03-07T21:57:41Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nOur logical compaction is \"aggressive\" in that it uses 1ms as permission to compact. When a collection ticks at a coarser frequency, say once per second, this compaction leaves us with a collection that is unusable for a second: the `upper` ticks forward by one second, and compaction announces \"render it invalid until that next second minus one millisecond\".\r\n\r\nWe could fix this by having the minimum compaction for a source be a known lower bound on the frequency with which it ticks. If a source ticks once per second, the minimum compaction should be one second.\r\n\r\ncc: @mjibson who is regularly frustrated by this.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11085","id":1161829470,"node_id":"I_kwDOCkIcu85FQBxe","number":11085,"title":"[kafka resumption tests] Enable toxiproxy-timeout-hold.td error mode","user":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":2187378159,"node_id":"MDU6TGFiZWwyMTg3Mzc4MTU5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sink","name":"A-sink","color":"5fefa7","default":false,"description":"Area: sinks"}],"state":"open","locked":false,"assignee":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"assignees":[{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-03-07T19:25:01Z","updated_at":"2022-03-07T19:25:01Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nmaster\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nWe should enable this.  It currently sometimes fails so it's not reliable enough to be a part of the blocking CI suite.\r\n\r\nI don't believe this to be a correctness issue because we do fail with a fatal error if this occurs -- the sink is just hosed.  So the UX is not ideal but correctness is not an issue as far as I can tell.\r\n\r\nHere's an example failure: https://buildkite.com/materialize/tests/builds/29568#ab6fdea4-29bd-498b-9cb9-8744a99a81e8\n\n### Relevant log output\n\n```source\nmaterialized_1     | 2022-02-25T22:08:06.183479Z  INFO mz_coord::catalog: create sink materialize.public.output (u6)\r\nmaterialized_1     | 2022-02-25T22:08:11.672458Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:16.673554Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:21.673941Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:26.674894Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:31.675868Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:36.264893Z  INFO librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Disconnected (after 30073ms in state UP)\r\nmaterialized_1     | 2022-02-25T22:08:36.264982Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: Disconnected (after 30073ms in state UP)\r\nmaterialized_1     | 2022-02-25T22:08:36.676654Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:40.190312Z  WARN librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Disconnected (after 33999ms in state UP)\r\nmaterialized_1     | 2022-02-25T22:08:40.190393Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: Disconnected (after 33999ms in state UP)\r\nmaterialized_1     | 2022-02-25T22:08:50.262868Z  INFO librdkafka: REQTMOUT [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Timed out ApiVersionRequest in flight (after 10072ms, timeout #0)\r\nmaterialized_1     | 2022-02-25T22:08:50.262961Z  WARN librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: ApiVersionRequest failed: Local: Timed out: probably due to broker version < 0.10 (see api.version.request configuration) (after 10072ms in state APIVERSION_QUERY)\r\nmaterialized_1     | 2022-02-25T22:08:50.263000Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: ApiVersionRequest failed: Local: Timed out: probably due to broker version < 0.10 (see api.version.request configuration) (after 10072ms in state APIVERSION_QUERY)\r\nmaterialized_1     | 2022-02-25T22:08:50.263055Z  WARN librdkafka: REQTMOUT [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Timed out 1 in-flight, 0 retry-queued, 0 out-queue, 0 partially-sent requests\r\nmaterialized_1     | 2022-02-25T22:09:00.515944Z  INFO librdkafka: REQTMOUT [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Timed out ApiVersionRequest in flight (after 10009ms, timeout #0)\r\nmaterialized_1     | 2022-02-25T22:09:00.516036Z  WARN librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: ApiVersionRequest failed: Local: Timed out: probably due to broker version < 0.10 (see api.version.request configuration) (after 10009ms in state APIVERSION_QUERY, 1 identical error(s) suppressed)\r\nmaterialized_1     | 2022-02-25T22:09:00.516109Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: ApiVersionRequest failed: Local: Timed out: probably due to broker version < 0.10 (see api.version.request configuration) (after 10009ms in state APIVERSION_QUERY, 1 identical error(s) suppressed)\r\nmaterialized_1     | 2022-02-25T22:09:00.516147Z  WARN librdkafka: REQTMOUT [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Timed out 1 in-flight, 0 retry-queued, 0 out-queue, 0 partially-sent requests\r\nmaterialized_1     | 2022-02-25T22:09:07.340075Z  INFO librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Disconnected while requesting ApiVersion: might be caused by incorrect security.protocol configuration (connecting to a SSL listener?) or broker version is < 0.10 (see api.version.request) (after 5766ms in state APIVERSION_QUERY)\r\nmaterialized_1     | 2022-02-25T22:09:07.340125Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: Disconnected while requesting ApiVersion: might be caused by incorrect security.protocol configuration (connecting to a SSL listener?) or broker version is < 0.10 (see api.version.request) (after 5766ms in state APIVERSION_QUERY)\r\nmaterialized_1     | 2022-02-25T22:09:07.486988Z ERROR mz_dataflow_types::client::controller::compute: COMPUTE::allow_compaction attempted frontier regression for id Transient(54): Antichain { elements: [] } to Antichain { elements: [1645826947440] }\r\nmaterialized_1     | 2022-02-25T22:09:10.798491Z  INFO mz_coord::catalog: drop sink materialize.public.output (u6)\r\n```\n```\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11084","id":1161791408,"node_id":"PR_kwDOCkIcu840D6sG","number":11084,"title":"Expand formalism docs","user":{"login":"aphyr","id":3748,"node_id":"MDQ6VXNlcjM3NDg=","avatar_url":"https://avatars.githubusercontent.com/u/3748?v=4","gravatar_id":"","url":"https://api.github.com/users/aphyr","html_url":"https://github.com/aphyr","followers_url":"https://api.github.com/users/aphyr/followers","following_url":"https://api.github.com/users/aphyr/following{/other_user}","gists_url":"https://api.github.com/users/aphyr/gists{/gist_id}","starred_url":"https://api.github.com/users/aphyr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aphyr/subscriptions","organizations_url":"https://api.github.com/users/aphyr/orgs","repos_url":"https://api.github.com/users/aphyr/repos","events_url":"https://api.github.com/users/aphyr/events{/privacy}","received_events_url":"https://api.github.com/users/aphyr/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-07T18:46:30Z","updated_at":"2022-03-10T22:05:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11084","html_url":"https://github.com/MaterializeInc/materialize/pull/11084","diff_url":"https://github.com/MaterializeInc/materialize/pull/11084.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11084.patch","merged_at":null},"body":"This rewrites and expands the developer platform formalism docs up to the storage & compute layer discussion. It begins with a quick sketch of the entire document, introduces new terms and properties for implicit concepts, adds a diagram to help clarify the way that frontiers bound pTVC times, uses partial orders for times throughout, decouples time-function from update-set representations of TVCs and partial TVCs, discusses compacting and appending to pTVCs and gestures vaguely in the direction of those transformations' correctness, and makes immutability/mutability and modeled vs real time explicit.\r\n\r\n### Motivation\r\n\r\nThis PR aims to help make the formalism docs more approachable for new readers.\r\n\r\n### Tips for reviewer\r\n\r\nSeveral things in this rewrite I've guessed at or come up with names from scratch, so I'd appreciate detailed review!\r\n\r\nSee the rich markdown diff view!\r\n\r\n### Testing\r\n\r\nThere are no code changes required\r\n\r\n### Release notes\r\n\r\nThere are no user-facing changes, other than documentation.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11081","id":1161644017,"node_id":"I_kwDOCkIcu85FPUfx","number":11081,"title":"Validate order of correlated quantifiers.","user":{"login":"wangandi","id":5522362,"node_id":"MDQ6VXNlcjU1MjIzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/5522362?v=4","gravatar_id":"","url":"https://api.github.com/users/wangandi","html_url":"https://github.com/wangandi","followers_url":"https://api.github.com/users/wangandi/followers","following_url":"https://api.github.com/users/wangandi/following{/other_user}","gists_url":"https://api.github.com/users/wangandi/gists{/gist_id}","starred_url":"https://api.github.com/users/wangandi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wangandi/subscriptions","organizations_url":"https://api.github.com/users/wangandi/orgs","repos_url":"https://api.github.com/users/wangandi/repos","events_url":"https://api.github.com/users/wangandi/events{/privacy}","received_events_url":"https://api.github.com/users/wangandi/received_events","type":"User","site_admin":false},"labels":[{"id":2339219515,"node_id":"MDU6TGFiZWwyMzM5MjE5NTE1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/needs-details","name":"needs-details","color":"F9D0C4","default":false,"description":"Needs more details before work proceeds"},{"id":2456706162,"node_id":"MDU6TGFiZWwyNDU2NzA2MTYy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/needs-discussion","name":"needs-discussion","color":"F9D0C4","default":false,"description":"Requires discussion before work proceeds"},{"id":3020087139,"node_id":"MDU6TGFiZWwzMDIwMDg3MTM5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-optimization","name":"A-optimization","color":"5fefa7","default":false,"description":"Area: query optimization and transformation"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-07T16:28:18Z","updated_at":"2022-03-07T17:51:58Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"See discussion at https://github.com/MaterializeInc/materialize/pull/10901#discussion_r819167043 and https://github.com/MaterializeInc/materialize/pull/10901#discussion_r819153981.\r\n\r\nCurrently, a Query Graph Model is structured such that post-order visitation will visit the input box of a particular quantifier `Qi` before the input box of the correlated quantifier `Qj` that depends on it. This is quite convenient because it means that we know that attributes have already been computed for `Qi` when we are trying to perform an operation on `Qj`.\r\n\r\nWe should ensure that the structure preserves this property as we add more features to QGM by adding a constraint to the QGM validator.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11078","id":1161522016,"node_id":"I_kwDOCkIcu85FO2tg","number":11078,"title":"Refactor `Client` trait into independent stream and sink.","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[{"id":1465753202,"node_id":"MDU6TGFiZWwxNDY1NzUzMjAy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dataflow","name":"A-dataflow","color":"5fefa7","default":false,"description":"Area: dataflow"},{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-07T14:51:55Z","updated_at":"2022-03-07T14:51:55Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The `Client` trait serves as a well-defined boundary between the coordinator and dataflow layer. It allows sending commands and receiving responses:\r\n```\r\n/// A client to a running dataflow server.\r\n#[async_trait(?Send)]\r\npub trait Client<T = mz_repr::Timestamp> {\r\n    /// Sends a command to the dataflow server.\r\n    ///\r\n    /// The command can error for various reasons.\r\n    async fn send(&mut self, cmd: Command<T>) -> Result<(), anyhow::Error>;\r\n\r\n    /// Receives the next response from the dataflow server.\r\n    ///\r\n    /// This method blocks until the next response is available, or, if the\r\n    /// dataflow server has been shut down, returns `None`.\r\n    async fn recv(&mut self) -> Option<Response<T>>;\r\n}\r\n```\r\n\r\nWe could refactor the code to work on `Stream` and `Sink`, which would avoid the use of the `Client` trait and provide more idiomatic building blocks to compose streams and sinks.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11076","id":1161510984,"node_id":"PR_kwDOCkIcu840C_EN","number":11076,"title":"sql: move unnest to pg_catalog","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-07T14:42:53Z","updated_at":"2022-03-07T19:42:19Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11076","html_url":"https://github.com/MaterializeInc/materialize/pull/11076","diff_url":"https://github.com/MaterializeInc/materialize/pull/11076.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11076.patch","merged_at":null},"body":"The version of `unnest` that takes arrays as arguments rightly belongs in `pg_catalog`, not `mz_catalog`.\r\n\r\n### Motivation\r\n\r\nThis PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Move `unnest(arrayany)` to the `pg_catalog` schema. Previously, it had unintentionally been in the `mz_catalog` schema.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11072","id":1161298980,"node_id":"I_kwDOCkIcu85FOAQk","number":11072,"title":"regression: wrong result when joining with an unmaterialized source ","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":2240473760,"node_id":"MDU6TGFiZWwyMjQwNDczNzYw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-correctness","name":"T-correctness","color":"695bd3","default":false,"description":"Theme: relates to consistency and correctness of results."},{"id":3052793141,"node_id":"MDU6TGFiZWwzMDUyNzkzMTQx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/P1","name":"P1","color":"d10000","default":false,"description":"Priority: critical issue, panic, etc. drop what you're doing and fix immediately"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-03-07T11:33:39Z","updated_at":"2022-03-11T00:01:58Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nv0.22.1-dev (9611cc695)\r\n\r\n### How did you install Materialize?\r\n\r\nDocker image\r\n\r\n### What was the issue?\r\n\r\nThe `joins.td` test fails repeatably as follows:\r\n\r\n```\r\n> CREATE SOURCE mods_unmat FROM KAFKA BROKER 'kafka:9092' TOPIC 'testdrive-mods-3568222347' FORMAT AVRO USING SCHEMA '{   \"type\": \"record\",   \"name\": \"envelope\",   \"fields\": [     {       \"name\": \"before\",       \"type\": [         {           \"name\": \"row\",           \"type\": \"record\",           \"fields\": [             {\"name\": \"num\", \"type\": \"long\"},             {\"name\": \"mod\", \"type\": \"string\"}           ]         },         \"null\"       ]     },     { \"name\": \"after\", \"type\": [\"row\", \"null\"] }   ] }' ENVELOPE DEBEZIUM\r\n--\r\n  | rows match; continuing at ts 1646637643.033189\r\n  | > CREATE VIEW test15 (names_num, names_name, mods_num, mods_mod) AS SELECT * FROM names FULL OUTER JOIN mods_unmat ON 1 = 0;\r\n  | rows match; continuing at ts 1646637643.0903223\r\n  | > SELECT * FROM test15;\r\n  | rows didn't match; sleeping to see if dataflow catches up 50ms 75ms 112ms 169ms 253ms 380ms 570ms 854ms 1s 2s 3s 4s 6s 10s 893ms\r\n  | joins.td:237:1: error: non-matching rows: expected:\r\n  | [[\"1\", \"one\", \"<null>\", \"<null>\"], [\"2\", \"two\", \"<null>\", \"<null>\"], [\"3\", \"three\", \"<null>\", \"<null>\"], [\"<null>\", \"<null>\", \"0\", \"even\"], [\"<null>\", \"<null>\", \"1\", \"odd\"], [\"<null>\", \"<null>\", \"2\", \"even\"]]\r\n  | got:\r\n  | [[\"1\", \"one\", \"<null>\", \"<null>\"], [\"2\", \"two\", \"<null>\", \"<null>\"], [\"3\", \"three\", \"<null>\", \"<null>\"]]\r\n  | Diff:\r\n  | row missing: [\"<null>\", \"<null>\", \"0\", \"even\"]\r\n  | row missing: [\"<null>\", \"<null>\", \"1\", \"odd\"]\r\n  | row missing: [\"<null>\", \"<null>\", \"2\", \"even\"]\r\n  |  \r\n  | \\|\r\n  | 236 \\|\r\n  | 237 \\| > SELECT * FROM test15;\r\n  | \\| ^\r\n\r\n```\r\n\r\nThe failure is:\r\n- permanent, that is, the result never becomes correct no matter the timeout/retries\r\n- goes away if the source is dropped and recreated\r\n\r\nThis is seen both on the `--workers 1` and the `cluster` Nightly tests. I am able to reproduce it by running the following loop on a `c5.2xlarge` machine:\r\n\r\n```\r\n while bash -c -e \"./mzcompose down -v ; ./mzcompose run default --workers 1 joins.td\" ; do : ; done\r\n```\r\n\r\nBisection reports the following commit:\r\n\r\n```\r\n3af43e25388609cb43b7ab352ffe03d34f89d552 is the first bad commit\r\ncommit 3af43e25388609cb43b7ab352ffe03d34f89d552\r\nAuthor: Nikhil Benesch <nikhil.benesch@gmail.com>\r\nDate:   Sat Mar 5 14:53:30 2022 -0500\r\n\r\n    coord: allow SELECTing from unmaterialized sources\r\n```\r\n\r\n### Relevant log output\r\n\r\n```source\r\nNo errors in the Mz logs.\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11071","id":1161090986,"node_id":"I_kwDOCkIcu85FNNeq","number":11071,"title":"performance regression: UPDATE statements now ~50% slower against user tables","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"assignees":[{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false}],"milestone":null,"comments":17,"created_at":"2022-03-07T08:58:04Z","updated_at":"2022-03-11T07:03:41Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\n3f7aedf33e91b8497c2f1622a4333da15a37de10\r\n\r\n### How did you install Materialize?\r\n\r\nDocker image\r\n\r\n### What was the issue?\r\n\r\nThe `Update` feature benchmark is consistently reporting a performance regression:\r\n\r\n```\r\nUpdate                    \\|       1.606 \\|       1.096 \\|    !!YES!!    \\| 46.5 pct   slower  |  \r\n```\r\n\r\ngit bisect reports the following revision:\r\n\r\n```\r\n3f7aedf33e91b8497c2f1622a4333da15a37de10 is the first bad commit\r\ncommit 3f7aedf33e91b8497c2f1622a4333da15a37de10\r\nMerge: 588a9e720 253c608b1\r\nAuthor: Nikhil Benesch <nikhil.benesch@gmail.com>\r\nDate:   Sat Mar 5 19:50:34 2022 -0500\r\n\r\n    Merge pull request #10883 from benesch/table-unspecial\r\n    \r\n    coord,dataflow: remove special cases for table indexes\r\n\r\n```\r\n\r\nThe feature benchmark reports the **fastest** time the workload could execute in a given revision. There is also the problem that repeated executions of the same workload get progressively slower and slower:\r\n\r\n\r\n```\r\nMeasurement: 1.6061623096466064\r\nMeasurement: 1.9834446907043457\r\nMeasurement: 2.016334056854248\r\nMeasurement: 2.423788547515869\r\nMeasurement: 2.916515827178955\r\n...\r\nMeasurement: 9.298703670501709\r\nMeasurement: 9.861934185028076\r\nMeasurement: 8.153981685638428\r\nMeasurement: 8.687877178192139\r\nMeasurement: 8.837841987609863\r\nMeasurement: 9.046060562133789\r\nMeasurement: 9.261691808700562\r\n```\r\n\r\nWhat is special about the `Update` benchmark workload is that individual measurements operate on the same table without dropping it between measurements. The performance numbers indicate that some cruft is being accumulated in the process, e.g. no compaction is happening or something else long those lines.\r\n\r\n### Relevant log output\r\n\r\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11070","id":1160980116,"node_id":"PR_kwDOCkIcu840BVBm","number":11070,"title":"dataflow-types: beef up IndexDesc and use it more","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-07T06:53:23Z","updated_at":"2022-03-08T11:37:22Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11070","html_url":"https://github.com/MaterializeInc/materialize/pull/11070","diff_url":"https://github.com/MaterializeInc/materialize/pull/11070.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11070.patch","merged_at":null},"body":"Add two additional fields to the `IndexDesc` that are often stashed\r\nalongside it: the ID of the index itself and the type of the relation on\r\nwhich the index is built. The only cost is that the `index_imports`\r\nfield now stores index IDs twice, but that seems like a small price to\r\npay.\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11055","id":1160728279,"node_id":"PR_kwDOCkIcu840AgcI","number":11055,"title":"build(deps): bump parquet2 from 0.8.1 to 0.10.3","user":{"login":"dependabot[bot]","id":49699333,"node_id":"MDM6Qm90NDk2OTkzMzM=","avatar_url":"https://avatars.githubusercontent.com/in/29110?v=4","gravatar_id":"","url":"https://api.github.com/users/dependabot%5Bbot%5D","html_url":"https://github.com/apps/dependabot","followers_url":"https://api.github.com/users/dependabot%5Bbot%5D/followers","following_url":"https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dependabot%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/dependabot%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/dependabot%5Bbot%5D/repos","events_url":"https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/dependabot%5Bbot%5D/received_events","type":"Bot","site_admin":false},"labels":[{"id":1372937472,"node_id":"MDU6TGFiZWwxMzcyOTM3NDcy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dependencies","name":"A-dependencies","color":"5fefa7","default":false,"description":"Area: dependency upgrades"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-06T22:03:58Z","updated_at":"2022-03-07T18:39:27Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11055","html_url":"https://github.com/MaterializeInc/materialize/pull/11055","diff_url":"https://github.com/MaterializeInc/materialize/pull/11055.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11055.patch","merged_at":null},"body":"Bumps parquet2 from 0.8.1 to 0.10.3.\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=parquet2&package-manager=cargo&previous-version=0.8.1&new-version=0.10.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11048","id":1160654783,"node_id":"I_kwDOCkIcu85FLi-_","number":11048,"title":"RT inputs should provide linearizability properties","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-06T16:32:18Z","updated_at":"2022-03-06T16:32:18Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nOur RT sources assign timestamps as they read data, not as soon as they know data exists. For example, `FILE` sources know the length of a file as it is opened, and *could* assign `since` to all of the timestamps for existing offsets. By so doing, all subsequent uses of that source would be certain to have complete data in it.\r\n\r\nThis is a repetition of https://github.com/MaterializeInc/materialize/issues/2310 but with a correctness angle rather than a performance angle. We cannot test RT sources without retries until this is fixed. More fundamentally, this is really a glaring consistency issue: folks look at their data and know that it is there, and then query MZ and it is not reflected yet despite us announcing it as up to date.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11041","id":1160480349,"node_id":"I_kwDOCkIcu85FK4Zd","number":11041,"title":"coord: build confidence in new transaction handling","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":2314510340,"node_id":"MDU6TGFiZWwyMzE0NTEwMzQw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/M-release-blocker","name":"M-release-blocker","color":"cc0000","default":false,"description":"Critical issue that should block *any* release if not fixed"}],"state":"open","locked":false,"assignee":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"assignees":[{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},{"login":"jkosh44","id":10800303,"node_id":"MDQ6VXNlcjEwODAwMzAz","avatar_url":"https://avatars.githubusercontent.com/u/10800303?v=4","gravatar_id":"","url":"https://api.github.com/users/jkosh44","html_url":"https://github.com/jkosh44","followers_url":"https://api.github.com/users/jkosh44/followers","following_url":"https://api.github.com/users/jkosh44/following{/other_user}","gists_url":"https://api.github.com/users/jkosh44/gists{/gist_id}","starred_url":"https://api.github.com/users/jkosh44/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkosh44/subscriptions","organizations_url":"https://api.github.com/users/jkosh44/orgs","repos_url":"https://api.github.com/users/jkosh44/repos","events_url":"https://api.github.com/users/jkosh44/events{/privacy}","received_events_url":"https://api.github.com/users/jkosh44/received_events","type":"User","site_admin":false},{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false}],"milestone":null,"comments":9,"created_at":"2022-03-06T00:30:52Z","updated_at":"2022-03-11T10:42:41Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"In the interest of making forward progress on platform, @frankmcsherry and I pressed forward with a number of reasonably scary PRs to the coordinator over the weekend. It would be great to get post-merge reviews (or at least quick skims) on the following PRs:\r\n\r\n  * #11019 (@frankmcsherry added)\r\n  * #11035\r\n  * #11036 (@aljoscha you might want to take a look at this one too)\r\n  * #11037\r\n  * #10883 / #11039\r\n  * #11069\r\n\r\nMore PRs may be added over the course of the weekend.\r\n\r\nI'm marking this as a release blocker in an attempt to _relieve_ pressure. I want to make it clear that we won't ship the next release until we've got more consensus that we didn't miss something major in these PRs. We should 100% skip the release this week if y'all need more time to review.\r\n\r\n## Potential regressions\r\n\r\n* [ ] #11071\r\n* [ ] #11072\r\n* [ ] #11137\r\n* [x] #11134\r\n* [ ] #11155","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11032","id":1160051594,"node_id":"I_kwDOCkIcu85FJPuK","number":11032,"title":"sql: add tests for connections that execute multiple peeks simultaneously","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-03-04T21:05:33Z","updated_at":"2022-03-08T18:49:17Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Add tests for connections that have multiple peeks in flight. While reviewing #11016, we noticed that the existing code would have been wrong if connections could have multiple peeks alive at the same moment, and we believe that's possible via portals.\r\n\r\nMore context: https://github.com/MaterializeInc/materialize/pull/11016#discussion_r819837650\r\n\r\ncc @jkosh44 @mjibson \r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11025","id":1159561977,"node_id":"PR_kwDOCkIcu84z82sN","number":11025,"title":"Design document for the Zippy testing framework","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2022-03-04T11:50:39Z","updated_at":"2022-03-09T14:34:03Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11025","html_url":"https://github.com/MaterializeInc/materialize/pull/11025","diff_url":"https://github.com/MaterializeInc/materialize/pull/11025.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11025.patch","merged_at":null},"body":"This document describes the overall design of a new framework for testing Platform and all parts connected to it.\r\n\r\nRendered view: https://github.com/philip-stoev/materialize/blob/0119667cea45c9b6551e9c920e75982d21e23010/doc/developer/design/2022-02-28_zippy_testing_framework.md","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11021","id":1159195489,"node_id":"I_kwDOCkIcu85FF-th","number":11021,"title":"Implement heartbeat mechanism for Postgres replication to prevent upstream WAL disk usage issues","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":2348462791,"node_id":"MDU6TGFiZWwyMzQ4NDYyNzkx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-source","name":"A-source","color":"5fefa7","default":false,"description":"Area: sources"},{"id":3243762798,"node_id":"MDU6TGFiZWwzMjQzNzYyNzk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-PG","name":"T-PG","color":"695bd3","default":false,"description":"Theme: postgres sources (Sources & Sinks)"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-04T03:15:04Z","updated_at":"2022-03-04T03:15:04Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nThe basic problem is that Postgres shares one pool of WAL segments across all tables in all schemas, so if a server has some tables which receive lots of traffic and others which receive very little and replication is setup to Materialize only for some subset of low traffic tables it can cause elevated disk usage on the Postgres server and depending on server and replication config can lead to further negative outcomes for the upstream Postgres server. This disk usage is triggered because the server can only reclaim WAL segments when all references to WAL locations point to an LSN newer than the last LSN in the segment, so if a replication slot does not receive traffic for long periods of time it will hold open a reference to a very old LSN and no segments since then will be reclaimable.\r\n\r\nThe \"standard\" solution is to have a dedicated table with a tiny footprint in the publication, upon which an update is performed periodically in order to ensure that the publication has at least 1 event to send in whatever time period is necessary to prevent disk issues. ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11020","id":1159173674,"node_id":"I_kwDOCkIcu85FF5Yq","number":11020,"title":"Handle Origin messages in Postgres replication","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":2348462791,"node_id":"MDU6TGFiZWwyMzQ4NDYyNzkx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-source","name":"A-source","color":"5fefa7","default":false,"description":"Area: sources"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-04T02:30:08Z","updated_at":"2022-03-04T02:30:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nPostgres logical replication has a message type which enables clients to determine whether the source of a transaction is \"local\" or \"remote\" to the Postgres server, but these messages are currently ignored in the Postgres source. \r\n\r\nThe primary motivation for implementing a handler for this message type is as a pre-requisite to supporting Postgres logical replication as a sink, use of the Origin message would allow Materialize to discard replication events which actually originated from Materialize in a circulation replication setup.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11018","id":1159042300,"node_id":"PR_kwDOCkIcu84z7Khs","number":11018,"title":"persist/wip: bounded memory usage for get requests from Blob.","user":{"login":"ruchirK","id":4015012,"node_id":"MDQ6VXNlcjQwMTUwMTI=","avatar_url":"https://avatars.githubusercontent.com/u/4015012?v=4","gravatar_id":"","url":"https://api.github.com/users/ruchirK","html_url":"https://github.com/ruchirK","followers_url":"https://api.github.com/users/ruchirK/followers","following_url":"https://api.github.com/users/ruchirK/following{/other_user}","gists_url":"https://api.github.com/users/ruchirK/gists{/gist_id}","starred_url":"https://api.github.com/users/ruchirK/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruchirK/subscriptions","organizations_url":"https://api.github.com/users/ruchirK/orgs","repos_url":"https://api.github.com/users/ruchirK/repos","events_url":"https://api.github.com/users/ruchirK/events{/privacy}","received_events_url":"https://api.github.com/users/ruchirK/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-03T23:14:01Z","updated_at":"2022-03-10T20:40:24Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11018","html_url":"https://github.com/MaterializeInc/materialize/pull/11018","diff_url":"https://github.com/MaterializeInc/materialize/pull/11018.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11018.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11012","id":1158703017,"node_id":"PR_kwDOCkIcu84z6A2A","number":11012,"title":"Implement INCLUDE HEADERS for kafka sources","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-03T17:35:13Z","updated_at":"2022-03-08T23:47:54Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11012","html_url":"https://github.com/MaterializeInc/materialize/pull/11012","diff_url":"https://github.com/MaterializeInc/materialize/pull/11012.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11012.patch","merged_at":null},"body":"Implements the proposal outlined in https://github.com/MaterializeInc/materialize/pull/10951\r\n\r\nAs part of implementing this, I learned that _kafka allows multiple headers with the same key_. This PR implements \"keep the topologically smaller of the values\", but we could change it to support `map[test=>list[bytea]]` or something similar. Discussion can happen on the design document.\r\n\r\nThis PR implements `headers` as *metadata*, using the framework setup by @quodlibetor. This is 1. to reduce complexity of the implementation and 2. because the semantics of `headers` we want matches the semantics of metadata: We only record header changes if the value decodes properly, and an empty value means we ignore headers (I think, please check my work). We hop onto the existing `to_metadata_row` calls. (Question: do we ever de-duplicated equal values in `UPSERT`? I don't think we do). We also skip doing anything with headers if the source is not configured as such.\r\n\r\nAdditionally, this pr does the number of `to_vec/to_string/clone`'s necessary to keep the code simpler. Its possible some could be avoided. \r\n\r\n### Motivation\r\n\r\n  * This PR adds a known-desirable feature.\r\nhttps://github.com/MaterializeInc/materialize/issues/8446\r\n\r\n\r\n### Tips for reviewer\r\n- bottom pr adds `map_length`, which helps with testing later on\r\n- second add header support to `testdrive`\r\n- third is core implementation\r\n- rest are various changes/tests\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n- Adds a `map_length` function to count the number of entries in a `map`\r\n- Adds `INCLUDE HEADERS (as <column name>)` to Kafka sources to populate headers as list of `(k, v)` pairs in a column\r\n- Adds an experimental `headerstomap` to transform the headers list/multimap into a \"smallest-value-wins\" map\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11009","id":1158543666,"node_id":"PR_kwDOCkIcu84z5e7r","number":11009,"title":"doc: Cloud static IP docs","user":{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-03T15:20:22Z","updated_at":"2022-03-04T08:20:33Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11009","html_url":"https://github.com/MaterializeInc/materialize/pull/11009","diff_url":"https://github.com/MaterializeInc/materialize/pull/11009.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11009.patch","merged_at":null},"body":"Documented how to get your deployment static IP and added some guidelines on how to allow it in some common firewalls.\r\n\r\n### Motivation\r\n\r\nAs we now have static IPs for all Cloud deployments which can be added to security policies, firewall rules, etc. \r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11007","id":1158394295,"node_id":"PR_kwDOCkIcu84z4_Ms","number":11007,"title":"doc/user: Add PHP PDO guide","user":{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-03T13:13:15Z","updated_at":"2022-03-03T13:13:16Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11007","html_url":"https://github.com/MaterializeInc/materialize/pull/11007","diff_url":"https://github.com/MaterializeInc/materialize/pull/11007.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11007.patch","merged_at":null},"body":"Closes #10988 \r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11002","id":1157999573,"node_id":"PR_kwDOCkIcu84z3sf9","number":11002,"title":"expr: possibly improve clarity of temporal filter evaluation","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-03T05:49:03Z","updated_at":"2022-03-04T16:57:35Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11002","html_url":"https://github.com/MaterializeInc/materialize/pull/11002","diff_url":"https://github.com/MaterializeInc/materialize/pull/11002.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11002.patch","merged_at":null},"body":"This is a revised take on #10976 that attempts to recover clarity in a different way.\r\n\r\nI've split this into two commits:\r\n\r\n  * The first commit replaces the dead code with an `unreachable!`. I think we're now all on the same page that this is worth doing.\r\n  * The second commit swaps the use of `Option` for the `Max1Antichain` type. I think this is an improvement in clarity, because `Max1Antichain` has the correct comparison semantics. (I think. Maybe I misunderstand something about the `PartialOrder` trait.) It's also potentially an annoying thing to have to review right now. I'm very happy to leave this commit out.\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11001","id":1157853312,"node_id":"I_kwDOCkIcu85FA3CA","number":11001,"title":"Runtime checking of types in `Get` nodes.","user":{"login":"umanwizard","id":1893159,"node_id":"MDQ6VXNlcjE4OTMxNTk=","avatar_url":"https://avatars.githubusercontent.com/u/1893159?v=4","gravatar_id":"","url":"https://api.github.com/users/umanwizard","html_url":"https://github.com/umanwizard","followers_url":"https://api.github.com/users/umanwizard/followers","following_url":"https://api.github.com/users/umanwizard/following{/other_user}","gists_url":"https://api.github.com/users/umanwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/umanwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umanwizard/subscriptions","organizations_url":"https://api.github.com/users/umanwizard/orgs","repos_url":"https://api.github.com/users/umanwizard/repos","events_url":"https://api.github.com/users/umanwizard/events{/privacy}","received_events_url":"https://api.github.com/users/umanwizard/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-03T01:03:51Z","updated_at":"2022-03-03T01:03:51Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nToday we do not validate that the inputs to a dataflow (e.g. sources) actually produce `Row`s of a particular type. We should do so, (potentially as a debug assertion in case the validation is expensive), so that we can notice immediately at the input that a program is ill-formed, rather than crashing in some random downstream node or producing incorrect data.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11000","id":1157852027,"node_id":"I_kwDOCkIcu85FA2t7","number":11000,"title":"Facilities for typechecking IR graphs","user":{"login":"umanwizard","id":1893159,"node_id":"MDQ6VXNlcjE4OTMxNTk=","avatar_url":"https://avatars.githubusercontent.com/u/1893159?v=4","gravatar_id":"","url":"https://api.github.com/users/umanwizard","html_url":"https://github.com/umanwizard","followers_url":"https://api.github.com/users/umanwizard/followers","following_url":"https://api.github.com/users/umanwizard/following{/other_user}","gists_url":"https://api.github.com/users/umanwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/umanwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umanwizard/subscriptions","organizations_url":"https://api.github.com/users/umanwizard/orgs","repos_url":"https://api.github.com/users/umanwizard/repos","events_url":"https://api.github.com/users/umanwizard/events{/privacy}","received_events_url":"https://api.github.com/users/umanwizard/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-03T01:01:33Z","updated_at":"2022-03-03T06:45:55Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nToday it's not possible to accurately type-check MIR and LIR programs, because the information about the input type of SQL functions is not available in `expr` . Thus, for example, it's possible to construct a MIR program in which one node produces a string, and the downstream node calls a function requesting an integer. The `typ` function will not detect this, and the dataflow we render will crash at runtime.\r\n\r\nThis makes the system brittle, because any bug in optimization or planning has the potential to cause a runtime crash, rather than being detectable at render time.\r\n\r\n@benesch has a plan for how to get this information in `expr`. He thinks we should eventually do it, but that it would take ~1 month of work. Nikhil, I didn't quite follow the idea when you explained it; would you mind repeating it here or linking to somewhere where it's described?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10990","id":1157271658,"node_id":"PR_kwDOCkIcu84z1T4o","number":10990,"title":"Do not merge: expr: playing around with indexes supporting implicit casts","user":{"login":"wangandi","id":5522362,"node_id":"MDQ6VXNlcjU1MjIzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/5522362?v=4","gravatar_id":"","url":"https://api.github.com/users/wangandi","html_url":"https://github.com/wangandi","followers_url":"https://api.github.com/users/wangandi/followers","following_url":"https://api.github.com/users/wangandi/following{/other_user}","gists_url":"https://api.github.com/users/wangandi/gists{/gist_id}","starred_url":"https://api.github.com/users/wangandi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wangandi/subscriptions","organizations_url":"https://api.github.com/users/wangandi/orgs","repos_url":"https://api.github.com/users/wangandi/repos","events_url":"https://api.github.com/users/wangandi/events{/privacy}","received_events_url":"https://api.github.com/users/wangandi/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-02T14:29:11Z","updated_at":"2022-03-02T14:29:11Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10990","html_url":"https://github.com/MaterializeInc/materialize/pull/10990","diff_url":"https://github.com/MaterializeInc/materialize/pull/10990.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10990.patch","merged_at":null},"body":"Created for spec-ing out #10871.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10989","id":1157256052,"node_id":"I_kwDOCkIcu85E-lN0","number":10989,"title":"doc/user: SQL Server via Debezium CDC Guide","user":{"login":"ruf-io","id":11527560,"node_id":"MDQ6VXNlcjExNTI3NTYw","avatar_url":"https://avatars.githubusercontent.com/u/11527560?v=4","gravatar_id":"","url":"https://api.github.com/users/ruf-io","html_url":"https://github.com/ruf-io","followers_url":"https://api.github.com/users/ruf-io/followers","following_url":"https://api.github.com/users/ruf-io/following{/other_user}","gists_url":"https://api.github.com/users/ruf-io/gists{/gist_id}","starred_url":"https://api.github.com/users/ruf-io/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruf-io/subscriptions","organizations_url":"https://api.github.com/users/ruf-io/orgs","repos_url":"https://api.github.com/users/ruf-io/repos","events_url":"https://api.github.com/users/ruf-io/events{/privacy}","received_events_url":"https://api.github.com/users/ruf-io/received_events","type":"User","site_admin":false},"labels":[{"id":1467624450,"node_id":"MDU6TGFiZWwxNDY3NjI0NDUw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-docs","name":"A-docs","color":"5fefa7","default":false,"description":"Area: documentation"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-02T14:15:46Z","updated_at":"2022-03-02T14:15:46Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### What pages are affected?\n\n_No response_\n\n### What needs to be changed or added?\n\nCreate a variant of https://materialize.com/docs/guides/cdc-mysql/ for SQL Server via Debezium.\r\n\r\nSee helpful notes from Mark here: https://materializecommunity.slack.com/archives/C0157GZ7UKF/p1646142131506359\r\n\r\n\n\n### Engineering tracking ticket\n\n_No response_\n\n### Feature description\n\n_No response_\n\n### Design documents\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10988","id":1157228701,"node_id":"I_kwDOCkIcu85E-eid","number":10988,"title":"doc/user: PHP guide + cheatsheet","user":{"login":"ruf-io","id":11527560,"node_id":"MDQ6VXNlcjExNTI3NTYw","avatar_url":"https://avatars.githubusercontent.com/u/11527560?v=4","gravatar_id":"","url":"https://api.github.com/users/ruf-io","html_url":"https://github.com/ruf-io","followers_url":"https://api.github.com/users/ruf-io/followers","following_url":"https://api.github.com/users/ruf-io/following{/other_user}","gists_url":"https://api.github.com/users/ruf-io/gists{/gist_id}","starred_url":"https://api.github.com/users/ruf-io/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruf-io/subscriptions","organizations_url":"https://api.github.com/users/ruf-io/orgs","repos_url":"https://api.github.com/users/ruf-io/repos","events_url":"https://api.github.com/users/ruf-io/events{/privacy}","received_events_url":"https://api.github.com/users/ruf-io/received_events","type":"User","site_admin":false},"labels":[{"id":1467624450,"node_id":"MDU6TGFiZWwxNDY3NjI0NDUw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-docs","name":"A-docs","color":"5fefa7","default":false,"description":"Area: documentation"}],"state":"open","locked":false,"assignee":{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false},"assignees":[{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2022-03-02T13:51:28Z","updated_at":"2022-03-03T09:15:39Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### What pages are affected?\r\n\r\n_No response_\r\n\r\n### What needs to be changed or added?\r\n\r\nStart with the node.js guide structure. https://materialize.com/docs/guides/node-js/\r\n\r\nLook for PHP-standard postgres libraries and vet that they can interact with Materialize in all the required ways (especially `TAIL WITH FETCH`)\r\n\r\n### Engineering tracking ticket\r\n\r\n_No response_\r\n\r\n### Feature description\r\n\r\n_No response_\r\n\r\n### Design documents\r\n\r\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10978","id":1155888303,"node_id":"PR_kwDOCkIcu84zwdiV","number":10978,"title":"persist: WIP strawman for new multi-writer persist interface","user":{"login":"danhhz","id":52528,"node_id":"MDQ6VXNlcjUyNTI4","avatar_url":"https://avatars.githubusercontent.com/u/52528?v=4","gravatar_id":"","url":"https://api.github.com/users/danhhz","html_url":"https://github.com/danhhz","followers_url":"https://api.github.com/users/danhhz/followers","following_url":"https://api.github.com/users/danhhz/following{/other_user}","gists_url":"https://api.github.com/users/danhhz/gists{/gist_id}","starred_url":"https://api.github.com/users/danhhz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danhhz/subscriptions","organizations_url":"https://api.github.com/users/danhhz/orgs","repos_url":"https://api.github.com/users/danhhz/repos","events_url":"https://api.github.com/users/danhhz/events{/privacy}","received_events_url":"https://api.github.com/users/danhhz/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2022-03-01T22:30:25Z","updated_at":"2022-03-09T18:41:44Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10978","html_url":"https://github.com/MaterializeInc/materialize/pull/10978","diff_url":"https://github.com/MaterializeInc/materialize/pull/10978.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10978.patch","merged_at":null},"body":"This is an attempt to redesign the persist API to balance all of the\r\nfollowing factors:\r\n- Usage within STORAGE\r\n- Operational simplicity\r\n- Maintainability of implementation\r\n- Performance\r\n- Cost\r\n\r\nAdditionally, we're also taking this shift in product priorities (as\r\nwell as some assumptions that have changed since persist started) to lay\r\nout a plan to incrementally ship this thing to production. Shipping\r\npersist incrementally is something everyone wants, is much less risky,\r\nand is an earlier timeline. This is something we've tried hard to do\r\nhistorically, but have been unable to tease apart into a workable plan\r\n(given the constraints of our initial goal of fast restarts for kafka\r\nsource persistence). Without over-promising, this interface rethink\r\nseems at the moment like it may unlock incremental delivery.\r\n\r\nThat's the good news. The bonus good news is that persist's internal\r\nimplementation is pretty clean and contains lots of great building\r\nblocks. Even if we entirely throw out the current API and switch to this\r\none, it should be a pretty fast process. This is in no way a rewrite.\r\n\r\nHere's my rough short-to-medium-term plan:\r\n- Figure out the balance of persist priorities (support platform vs the\r\n  kafka source fast restart alpha) with product. Adjust the following\r\n  steps accordingly. Timeline: ASAP\r\n- Get persist and storage to agree on this API boundary between them,\r\n  including performance and cost expectations. Then, get sign-off from\r\n  Cloud on the operational implications. Merge it. Timeline: ASAP\r\n- Write and merge a prototype-quality implementation of this API to\r\n  prove the concept and unblock storage prototyping. Timeline: ASAP\r\n- Write and merge a design doc for the production-quality implementation\r\n  of this API and its incremental rollout. Timeline: ASAP\r\n- Write a bare-bones production-quality implementation of this API. This\r\n  will happen in parallel with the initial production-quality\r\n  implementation of STORAGE. Adjust the API as necessary in light of the\r\n  inevitable discovery of unforeseen issues+requirements as persist and\r\n  STORAGE are implemented. Timeline: Platform launch.\r\n- Continue to incrementally ship persist features as decided by product\r\n  prioritization.\r\n\r\n### Motivation\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n### Tips for reviewer\r\n\r\nThis is both very much a WIP as well as a strawman. Everything is up for debate and nothing is set in stone.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10977","id":1155865205,"node_id":"PR_kwDOCkIcu84zwYii","number":10977,"title":"[WIP] first draft of JSON source","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-01T22:04:52Z","updated_at":"2022-03-04T22:02:41Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10977","html_url":"https://github.com/MaterializeInc/materialize/pull/10977","diff_url":"https://github.com/MaterializeInc/materialize/pull/10977.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10977.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\nVery WIP at the moment, but so far this lets us create a source with `FORMAT JSON USING TYPE <named_type>` and ingest records with basic data types. Looooots more changes + test coverage to ensue. \r\n\r\nTODO:\r\n- [ ] add tests for ingesting data into all possible scalar types\r\n- [ ] update catalog loading so that views can depend on custom types\r\n- [x] determine whether missing a field in a JSON document should produce a null or empty collection, when we know it is a collection type\r\n- [x] determine whether we want to add in the basic `FORMAT JSON` --> jsonb format\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10973","id":1155644413,"node_id":"PR_kwDOCkIcu84zvpfM","number":10973,"title":"misc: change use of term 'cluster' broadly to 'install'","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-01T18:02:57Z","updated_at":"2022-03-02T13:16:28Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10973","html_url":"https://github.com/MaterializeInc/materialize/pull/10973","diff_url":"https://github.com/MaterializeInc/materialize/pull/10973.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10973.patch","merged_at":null},"body":"With some upcoming platform work, we want to use the term \"cluster\" in the SQL API. Clusters will unfortunately also have IDs, which makes the existing `cluster_id` a little confusing. This PR attempts to begin moving the existing notion of \"cluster ID\" to \"installation ID.\"\r\n\r\nHowever, some of the cloud bench infrastructure seems to use this notion as a kind of column name, so I'm not sure what the fallout of that will be.\r\n\r\n### Motivation\r\n\r\nThis PR refactors existing code.\r\n\r\n### Tips for reviewer\r\n\r\nLargely code movement, besides the impact to cloud bench\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Move/rename the built-in function `mz_catalog.mz_cluster_id` to `mz_internal.mz_install_id`.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10971","id":1155629800,"node_id":"PR_kwDOCkIcu84zvmcB","number":10971,"title":"prevent select!-correctness problems for simple sources","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2022-03-01T17:47:34Z","updated_at":"2022-03-08T16:40:32Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10971","html_url":"https://github.com/MaterializeInc/materialize/pull/10971","diff_url":"https://github.com/MaterializeInc/materialize/pull/10971.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10971.patch","merged_at":null},"body":"There is a subtlety when using `select!`: when one future finishes, the other is _dropped_. This CAN cause subtle logic bugs and data loss (see https://tomaka.medium.com/a-look-back-at-asynchronous-rust-d54d63934a1c for more details). In the case of this pr, if the `SimpleSource`'s `start`-ed future finishes, then the timestamper `tick` future could be stopped in the middle of sleeping, or worse, in the middle of sending a result onto the bounded channel (https://github.com/MaterializeInc/materialize/blob/56a39246007194914cd02cfdcef0c4874b2ac7f9/src/dataflow/src/source/mod.rs#L716-L732)\r\n\r\nIn practice, this doesn't happen, because simple-source futures are long-running, and when they finish we `break;` but if we add short-running ones, or add more futures managing state, we could see bugs, so I figured I should change it now.\r\n\r\nI chose to use `Pin::set` to reset the `tick` future here because it was the simplest. I would have preferring moving the interval out into the `select!` statement, but this would require a larger refactor, where simple-sources's adopt some sort of poll model. @petrosagg let me know if thats better\r\n\r\n### Motivation\r\n  * This PR fixes a previously unreported bug.\r\nSee above\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10968","id":1155382430,"node_id":"I_kwDOCkIcu85E3bye","number":10968,"title":"sql: support larger numeric precision","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-01T14:05:57Z","updated_at":"2022-03-01T14:16:11Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\r\n\r\nThe precision of the `numeric` type in Materialize is currently capped at 39 digits, as we needed to choose _some_ fixed precision to back our [`Decimal`](https://docs.rs/dec/latest/dec/struct.Decimal.html) type.\r\n\r\nWe could lift that restriction by backing `Decimal` with a vector instead of an array, and allowing users to choose how many digits of precision to use at runtime. This is conceptually simple, but there are some practical difficulties:\r\n\r\n  * The upstream library rust-dec needs to be modified to use vectors instead of arrays. I'm not clear on whether this should be a separate type, or whether we should force all users of `Decimal` into the new implementation.\r\n  * Every `numeric` operation in Materialize needs to select a result scale and precision based on the scale and precision of its inputs.\r\n  * Selecting result scales is tricky. If you're not careful, operations like `1.0 / 3.0` result in `0.3`, and customers complain. Here's how [PostgreSQL chooses result scales](https://github.com/postgres/postgres/blob/9028cce426ba6e08ee5ef8fcaedb2445e6c08c75/src/backend/utils/adt/numeric.c#L9157-L9223) for divisions, for example.\r\n\r\n#10671 is a prerequisite.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10967","id":1155326331,"node_id":"PR_kwDOCkIcu84zumlz","number":10967,"title":"platform: add STORAGE architecure document","user":{"login":"petrosagg","id":939420,"node_id":"MDQ6VXNlcjkzOTQyMA==","avatar_url":"https://avatars.githubusercontent.com/u/939420?v=4","gravatar_id":"","url":"https://api.github.com/users/petrosagg","html_url":"https://github.com/petrosagg","followers_url":"https://api.github.com/users/petrosagg/followers","following_url":"https://api.github.com/users/petrosagg/following{/other_user}","gists_url":"https://api.github.com/users/petrosagg/gists{/gist_id}","starred_url":"https://api.github.com/users/petrosagg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/petrosagg/subscriptions","organizations_url":"https://api.github.com/users/petrosagg/orgs","repos_url":"https://api.github.com/users/petrosagg/repos","events_url":"https://api.github.com/users/petrosagg/events{/privacy}","received_events_url":"https://api.github.com/users/petrosagg/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-03-01T13:13:22Z","updated_at":"2022-03-07T10:50:16Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10967","html_url":"https://github.com/MaterializeInc/materialize/pull/10967","diff_url":"https://github.com/MaterializeInc/materialize/pull/10967.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10967.patch","merged_at":null},"body":null,"reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10963","id":1155068278,"node_id":"I_kwDOCkIcu85E2PF2","number":10963,"title":"TCP boundary: Server should never assert","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[{"id":1465753202,"node_id":"MDU6TGFiZWwxNDY1NzUzMjAy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dataflow","name":"A-dataflow","color":"5fefa7","default":false,"description":"Area: dataflow"},{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-01T09:06:29Z","updated_at":"2022-03-01T09:06:29Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The current TCP boundary implementation uses `assert!` to maintain invariants. This is fine for the client where any invariant violation is unrecoverable, but bad for the STORAGE server. Here, invariant violations should lead to forceful disconnects of clients and state cleanup. Only if it is not possible to cleanly remove state, an `assert!` could be used.\r\n\r\nThis could also involve an extension of the `Response` protocol to communicate error conditions to the client before disconnecting, or giving the client a chance to rectify the problem. For the moment, explaining to the client what went wrong and then disconnecting is a fine option.\r\n\r\nI'd expect most of the errors originating configuration errors, for example if the number of storage workers is incorrect.\r\n\r\nCode location: https://github.com/MaterializeInc/materialize/blob/main/src/dataflow/src/server/tcp_boundary.rs#L206-L223","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10962","id":1154903438,"node_id":"PR_kwDOCkIcu84ztNpa","number":10962,"title":"doc/user: Revamp Third-Party Tools Page","user":{"login":"ruf-io","id":11527560,"node_id":"MDQ6VXNlcjExNTI3NTYw","avatar_url":"https://avatars.githubusercontent.com/u/11527560?v=4","gravatar_id":"","url":"https://api.github.com/users/ruf-io","html_url":"https://github.com/ruf-io","followers_url":"https://api.github.com/users/ruf-io/followers","following_url":"https://api.github.com/users/ruf-io/following{/other_user}","gists_url":"https://api.github.com/users/ruf-io/gists{/gist_id}","starred_url":"https://api.github.com/users/ruf-io/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruf-io/subscriptions","organizations_url":"https://api.github.com/users/ruf-io/orgs","repos_url":"https://api.github.com/users/ruf-io/repos","events_url":"https://api.github.com/users/ruf-io/events{/privacy}","received_events_url":"https://api.github.com/users/ruf-io/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-01T05:55:43Z","updated_at":"2022-03-11T07:46:25Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10962","html_url":"https://github.com/MaterializeInc/materialize/pull/10962","diff_url":"https://github.com/MaterializeInc/materialize/pull/10962.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10962.patch","merged_at":null},"body":"👉  Preview Link: https://preview.materialize.com/10962/third-party/supported-tools/ 👈 \r\n\r\n\r\n### Motivation\r\n\r\nUsers will often come to us with questions about \"Does Materialize integrate with X?\"\r\n\r\n- When the answer is **Yes**\r\n   - Often the only way to know is to ask and get an answer in Slack or discussion. This page works as a self-serve index of tools and integrations that have already been looked at. \r\n   - The follow-up question of \"how does it integrate\" is not always well documented.\r\n- When the answer is **no**\r\n   - We don't have a great way of registering their interest, following up with them when the integration improves, and quantifying how many users are asking about certain integrations.\r\n\r\nUsers will also come to us asking \"what tools can I use to do X with Materialize?\" (e.g. manage SQL) - This page can also serve as a lightweight index for some of those questions.\r\n\r\n### Review Criteria\r\n\r\n- [ ] The definitions of support levels has been reviewed.\r\n- [ ] All the claimed statuses of tools has been checked.\r\n- [ ] The \"Notify Me\" feature fires Segment events with user email, integration requested\r\n- [ ] Intro sentences for sections has been reviewed and approved.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10957","id":1154524358,"node_id":"I_kwDOCkIcu85E0KTG","number":10957,"title":"Improve robustness of timestamp binding compaction","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"},{"id":3052793738,"node_id":"MDU6TGFiZWwzMDUyNzkzNzM4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/P3","name":"P3","color":"6b0000","default":false,"description":"Priority: we want to get this done in the next X days"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-28T20:35:14Z","updated_at":"2022-02-28T21:31:31Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Our `sqlite` timestamp binding compaction uses the following logic:\r\n```rust\r\n        let latest_not_beyond_compaction: Option<Timestamp> = self\r\n            .inner\r\n            .prepare_cached(\r\n                \"SELECT max(timestamp) FROM timestamps WHERE sid = ? AND timestamp <= ?\",\r\n            )?\r\n            .query_row(params![SqlVal(&source_id), frontier], |row| row.get(0))?;\r\n\r\n        if let Some(latest_not_beyond_compaction) = latest_not_beyond_compaction {\r\n            let result = match self\r\n                .inner\r\n                .prepare_cached(\"DELETE FROM timestamps WHERE sid = ? AND timestamp < ?\")?\r\n                .execute(params![SqlVal(&source_id), latest_not_beyond_compaction])\r\n            {\r\n                Ok(_) => Ok(()),\r\n                Err(err) => Err(err.into()),\r\n            };\r\n\r\n            result\r\n        } else {\r\n            Ok(())\r\n        }\r\n```\r\nIt selects the maximum timestamp less or equal to the input argument, and deletes bindings at strictly lower timestamp. However, there are bindings for each of various subdivisions of the `sid` collection: kafka topics have multiple parts, for example. Instead, I believe we should use the minimum across maximum values for parts (or whatever the subdivisions are).\r\n\r\nThe current thinking is that this doesn't manifest as a bug at present because we ensure that some other invariants are maintained on the data, relating the skew of the bound timestamps in each of the parts.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10956","id":1154521040,"node_id":"I_kwDOCkIcu85E0JfQ","number":10956,"title":"compute: Transactional facade for `Controller`","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-28T20:31:08Z","updated_at":"2022-02-28T20:31:08Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The `Controller` presents many operations that manipulate the state of collections. It would be valuable for users to sequence commands that can be assess for tentative \"acceptability\": when ready to commit, they should none of them error.\r\n\r\nThis appears not too hard, at least if we pivot capability downgrades to the end of the sequence of commands, so that all validation can be done against the initial frontier values of existing collections, and initial values of newly introduced collections.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10945","id":1154436088,"node_id":"PR_kwDOCkIcu84zrrLX","number":10945,"title":"ci: enable all Kafka tests in Redpanda nightly","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-02-28T18:54:44Z","updated_at":"2022-03-01T04:08:52Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10945","html_url":"https://github.com/MaterializeInc/materialize/pull/10945","diff_url":"https://github.com/MaterializeInc/materialize/pull/10945.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10945.patch","merged_at":null},"body":"@ruf-io reports that the issue might be fixed.\r\n\r\n### Motivation\r\n\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR accounts for a fix to a recognized bug: redpanda-data/redpanda#2397\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10944","id":1154432735,"node_id":"I_kwDOCkIcu85Ezz7f","number":10944,"title":"row_num - Document limitations","user":{"login":"krishmanoh2","id":72518904,"node_id":"MDQ6VXNlcjcyNTE4OTA0","avatar_url":"https://avatars.githubusercontent.com/u/72518904?v=4","gravatar_id":"","url":"https://api.github.com/users/krishmanoh2","html_url":"https://github.com/krishmanoh2","followers_url":"https://api.github.com/users/krishmanoh2/followers","following_url":"https://api.github.com/users/krishmanoh2/following{/other_user}","gists_url":"https://api.github.com/users/krishmanoh2/gists{/gist_id}","starred_url":"https://api.github.com/users/krishmanoh2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krishmanoh2/subscriptions","organizations_url":"https://api.github.com/users/krishmanoh2/orgs","repos_url":"https://api.github.com/users/krishmanoh2/repos","events_url":"https://api.github.com/users/krishmanoh2/events{/privacy}","received_events_url":"https://api.github.com/users/krishmanoh2/received_events","type":"User","site_admin":false},"labels":[{"id":1467624450,"node_id":"MDU6TGFiZWwxNDY3NjI0NDUw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-docs","name":"A-docs","color":"5fefa7","default":false,"description":"Area: documentation"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-28T18:50:05Z","updated_at":"2022-02-28T18:50:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What pages are affected?\n\nhttps://materialize.com/docs/sql/functions/\r\n\r\n\n\n### What needs to be changed or added?\n\nMaterialize implementation of row_num can lead to higher than expected memory usage. Recommend that anyone trying this function out understand the limitations.\n\n### Engineering tracking ticket\n\n_No response_\n\n### Feature description\n\n_No response_\n\n### Design documents\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10939","id":1154164480,"node_id":"PR_kwDOCkIcu84zqx-G","number":10939,"title":"dataflow: TCP boundary supporting multi-process STORAGE","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-28T14:32:21Z","updated_at":"2022-02-28T14:32:21Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10939","html_url":"https://github.com/MaterializeInc/materialize/pull/10939","diff_url":"https://github.com/MaterializeInc/materialize/pull/10939.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10939.patch","merged_at":null},"body":"This doesn't quite work yet but I didn't want to spend more time on\r\ndebugging. We're currently not focusing on a multi-process STORAGE runtime,\r\nso this should just serve as an example of what probably needs to be done,\r\nin case someone would like to pick it up.\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10938","id":1153979238,"node_id":"I_kwDOCkIcu85EyFNm","number":10938,"title":"regression: Failure during snapshot not retried properly, source never advances","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":3052793141,"node_id":"MDU6TGFiZWwzMDUyNzkzMTQx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/P1","name":"P1","color":"d10000","default":false,"description":"Priority: critical issue, panic, etc. drop what you're doing and fix immediately"}],"state":"open","locked":false,"assignee":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"assignees":[{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false}],"milestone":null,"comments":5,"created_at":"2022-02-28T11:28:59Z","updated_at":"2022-03-07T21:58:36Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nv0.19.1-dev (89f9dfdc2)\r\n\r\n### How did you install Materialize?\r\n\r\nDocker image\r\n\r\n### What was the issue?\r\n\r\nThe pg-cdc-resumption test has started to fail in its `restart_pg_during_snapshot` subtest:\r\n\r\n```\r\nverify-data.td | 1m 0s\r\n-- | --\r\n  | > SELECT COUNT(*) = 500000 FROM t1;\r\n  | rows didn't match; sleeping to see if dataflow catches up 50ms 75ms 112ms 169ms 253ms 380ms 570ms 854ms 1s 2s 3s 4s 6s 10s 15s 16s\r\n  | verify-data.td:10:1: error: executing query failed: db error: ERROR: At least one input has no complete timestamps yet: [User(28)]: ERROR: At least one input has no complete timestamps yet: [User(28)]\r\n  | \\|\r\n  | 9 \\|\r\n  | 10 \\| > SELECT COUNT(*) = 500000 FROM t1;\r\n\r\n\r\n```\r\n\r\nThis output essentially means that absolutely no data was received from Postgres whatsoever and the test waited for 60 seconds for progress to be made.\r\n\r\nGit bisect reports that the test started failing after the following commit. It may be that the faster speed of `COPY` caused the timing of the events to change.\r\n\r\n```\r\n89f9dfdc20e4547e90ca97599089a73553b6b365 is the first bad commit\r\ncommit 89f9dfdc20e4547e90ca97599089a73553b6b365\r\nAuthor: Paul Hemberger <paul@materialize.com>\r\nDate:   Mon Feb 7 08:42:02 2022 -0500\r\n\r\n    pg-cdc: switch from `SELECT *` to `COPY TO` for faster initial loading (#10299)\r\n\r\n```\r\n\r\nSimplified test coming up shortly.\r\n\r\n### Relevant log output\r\n\r\nNo errors in Mz log","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10935","id":1153540153,"node_id":"I_kwDOCkIcu85EwaA5","number":10935,"title":"sql: support new polymorphic types","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"assignees":[{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-02-28T02:26:01Z","updated_at":"2022-03-07T15:02:16Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nPostgreSQL v13 introduced some new [polymorphic types](https://www.postgresql.org/docs/current/extend-type-system.html#EXTEND-TYPES-POLYMORPHIC):\r\n\r\n  * `anycompatible`\r\n  * `anycompatiblearray`\r\n  * `anycompatiblenonarray`\r\n  * `anycompatiblerange`\r\n  * `anycompatiblemultirange`\r\n\r\nThese are like the existing polymorphic types that don't mention `compatible` in their names, except that they don't constrain their arguments to be literally identical, but only to share a common type that both arguments can be promoted to (as determined by `guess_best_common_type`).\r\n\r\nMany existing functions in PostgreSQL were redefined to take e.g. `anycompatible` where they used to take `any`. I think our [`resolve_polymorphic_types`](https://github.com/MaterializeInc/materialize/blob/c608ae71b4814f53ea9aff75aa39fbaa5ce4084f/src/sql/src/func.rs#L626) function is understandably a bit confused on this point, and is currently a hybrid of `compatible` and non-`compatible` behavior.\r\n\r\nI'm also pretty thoroughly confused by our breakdown of types into \"custom\", \"built-in\", \"complex\", and \"simple\": https://github.com/MaterializeInc/materialize/blob/c608ae71b4814f53ea9aff75aa39fbaa5ce4084f/src/sql/src/func.rs#L554-L560\r\n\r\nI think quite a bit of this complexity can vanish by properly implementing the new `compatible` polymorphic types. Then we won't need special handling to allow e.g. `int4 list` and `int4_list_as_custom_type` to be interchanged; we can just use the new `compatible` polymorphic types in function signatures. \r\n\r\ncc @sploiselle ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10934","id":1153535478,"node_id":"I_kwDOCkIcu85EwY32","number":10934,"title":"sql: introduce a `CoercibleScalarType` enum","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-02-28T02:17:35Z","updated_at":"2022-02-28T16:33:41Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"We currently don't handle coercion of `ROW` literals correctly in some contexts. See #8597 and #10422.\r\n\r\n#10868 is one attempt to fix this by changing the typing of `CoercibleScalarType` so that a `ROW` literal is typed as `Some(ScalarType::Record { ... })`.  I don't think this is quite right, though!\r\n\r\nHere's the background. PostgreSQL has an explicit `unknown` type that it uses throughout planning. It slowly converts expressions from `unknown` type to known types during planning... usually. Sometimes an unknown type will slip through, and the execution pathway is resilient to that. Unknown types get special coercion behavior; e.g., a string literal has type `unknown` so that it can be freely cast to any type.\r\n\r\nRequiring every part of the system to be prepared for `unknown` types is a very C way of doing things. We've opted instead to represent `unknown` types with proper typestates. `unknown` types only exist for a brief moment in the planner, and then are transformed away.\r\n\r\n`CoercibleScalarExpr` is the way we do this. Any type of expression that _would_ be typed as `unknown` in PostgreSQL is instead held as a `CoercibleScalarExpr`; this makes the transformation to a known `ScalarExpr` explicit. Forgetting to coerce a `CoercibleScalarExpr` becomes a compile time error of `materialized`.\r\n\r\nWe currently use `Option<ScalarType>` to represent the type of a `CoercibleScalarExpr`. `None` is used to mean \"unknown\" and `Some` is used to mean \"known\". I think we instead need to expand this out into:\r\n\r\n```rust\r\nenum CoercibleScalarType {\r\n    Unknown,\r\n    Record,\r\n    Known(ScalarType),\r\n}\r\n```\r\n\r\nThe idea is that `ROW` literals get typed as their own special `unknown`-like type called `CoercibleScalarType::Record`. PostgreSQL causes this type `record`. Note that we do _not_ have an exact analog to `record`; our `ScalarType::Record { custom_oid: None, ... }` is not quite as squishy as the PostgreSQL `record` psuedotype. `ScalarType::Record` without an OID behaves _exactly_ like a named composite type in PostgreSQL except that it lacks a name. Whereas the `record` pseudotype has some notable differences from a proper composite type, like the fact that its type category is `TypeCategory::Pseudo` rather than `TypeCategory::Composite`.\r\n\r\nThis latter point is actually exactly what makes `coalesce(row(1, 2), row(1, 2)::some_equivalent_named_type)` fail. The first expression has `TypeCategory::Pseudo`, while the second expression has `TypeCategory::Composite`.\r\n\r\nI've teed up this work with #10911. If we add the `CoercibleScalarType` enum as described above, then it will be easy to match PostgreSQL's behavior in `guess_best_common_type` by declaring that `CoercibleScalarType::Record`'s type category is `TypeCategory::Pseudo` while `CoercibleScalarType::Known(ScalarType::Record { .. })`'s type category is `TypeCategory::Record`.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10927","id":1153470622,"node_id":"I_kwDOCkIcu85EwJCe","number":10927,"title":"`kafka-exactly-once-sink.td` is flaking on main","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"assignees":[{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-02-28T00:38:19Z","updated_at":"2022-02-28T18:07:39Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The `kafka-exactly-once-sink.td` test file is now flaking on `main`. See, for example: https://buildkite.com/materialize/tests/builds/29657#598f531d-8284-47bc-9f01-41723b10cce7\r\n\r\nLikely related to #10910, but loathe to revert that PR because it is important for platform. I'm going to send a PR to disable `kafka-exactly-once-sink.td` instead, but marking this as a release blocker.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10913","id":1153350833,"node_id":"PR_kwDOCkIcu84zoFEM","number":10913,"title":"design: multiwriter persistent collections","user":{"login":"petrosagg","id":939420,"node_id":"MDQ6VXNlcjkzOTQyMA==","avatar_url":"https://avatars.githubusercontent.com/u/939420?v=4","gravatar_id":"","url":"https://api.github.com/users/petrosagg","html_url":"https://github.com/petrosagg","followers_url":"https://api.github.com/users/petrosagg/followers","following_url":"https://api.github.com/users/petrosagg/following{/other_user}","gists_url":"https://api.github.com/users/petrosagg/gists{/gist_id}","starred_url":"https://api.github.com/users/petrosagg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/petrosagg/subscriptions","organizations_url":"https://api.github.com/users/petrosagg/orgs","repos_url":"https://api.github.com/users/petrosagg/repos","events_url":"https://api.github.com/users/petrosagg/events{/privacy}","received_events_url":"https://api.github.com/users/petrosagg/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-02-27T18:30:23Z","updated_at":"2022-03-01T15:48:44Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10913","html_url":"https://github.com/MaterializeInc/materialize/pull/10913","diff_url":"https://github.com/MaterializeInc/materialize/pull/10913.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10913.patch","merged_at":null},"body":"### Motivation\r\n\r\nAn implementation of `persist` that supports multiple writers would simplify immensely the amount of additional work needed for STORAGE. This design document proposes a `persist` implementation that can do that and hopefully is easy to reason about its correctness.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10906","id":1152209908,"node_id":"I_kwDOCkIcu85ErVP0","number":10906,"title":"coord,dataflow: restore humanization of source errors","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-26T19:51:16Z","updated_at":"2022-02-26T19:51:16Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\n#10904 caused a regression in the humanization of source error messages. Error messages like\r\n\r\n```\r\nSource error: materialize.public.deleting_csv: file IO: file source: unable to open file at path\r\n```\r\n\r\nare now rendered with a source ID in place of the name:\r\n\r\n```\r\nSource error: u12/2: file IO: file source: unable to open file at path\r\n```\r\n\r\nThis was necessary to avoid a panic on short notice and amounts to a partial reversion of #6791. \r\n\r\nWe should add back the humanization of the name. But this time, we should do so in the coordinator, where the name of the erroring source can be correctly ascertained at the time the error is sent to the client.\r\n\r\nHere is the start of the required work:\r\n\r\n```diff\r\ndiff --git a/src/dataflow-types/src/errors.rs b/src/dataflow-types/src/errors.rs\r\nindex d488546d9..2f55aa4e4 100644\r\n--- a/src/dataflow-types/src/errors.rs\r\n+++ b/src/dataflow-types/src/errors.rs\r\n@@ -10,10 +10,11 @@\r\n use std::fmt::Display;\r\n \r\n use bytes::BufMut;\r\n+use serde::{Deserialize, Serialize};\r\n+\r\n use mz_expr::{EvalError, SourceInstanceId};\r\n use mz_persist_types::Codec;\r\n \r\n-use serde::{Deserialize, Serialize};\r\n \r\n #[derive(Ord, PartialOrd, Clone, Debug, Eq, PartialEq, Serialize, Deserialize, Hash)]\r\n pub enum DecodeError {\r\n@@ -98,6 +99,10 @@ pub enum DataflowError {\r\n     DecodeError(DecodeError),\r\n     EvalError(EvalError),\r\n     SourceError(SourceError),\r\n+    NegativeMultiplicity {\r\n+        copies: i64,\r\n+        data: String,\r\n+    }\r\n }\r\n \r\n impl Display for DataflowError {\r\n@@ -106,6 +111,14 @@ impl Display for DataflowError {\r\n             DataflowError::DecodeError(e) => write!(f, \"Decode error: {}\", e),\r\n             DataflowError::EvalError(e) => write!(f, \"Evaluation error: {}\", e),\r\n             DataflowError::SourceError(e) => write!(f, \"Source error: {}\", e),\r\n+            DataflowError::NegativeMultiplicity { copies, data } => {\r\n+                write!(\r\n+                    f,\r\n+                    \"Invalid data: saw retractions ({}) for row that does not exist: {}\",\r\n+                    copies,\r\n+                    data,\r\n+                )\r\n+            }\r\n         }\r\n     }\r\n }\r\ndiff --git a/src/dataflow-types/src/types.rs b/src/dataflow-types/src/types.rs\r\nindex 7eec589de..93eedd4d9 100644\r\n--- a/src/dataflow-types/src/types.rs\r\n+++ b/src/dataflow-types/src/types.rs\r\n@@ -22,6 +22,7 @@ use timely::progress::frontier::Antichain;\r\n use mz_expr::{GlobalId, MirRelationExpr, MirScalarExpr, OptimizedMirRelationExpr};\r\n use mz_repr::{Diff, RelationType, Row};\r\n \r\n+use crate::DataflowError;\r\n use crate::sources::persistence::SourcePersistDesc;\r\n use crate::types::sources::SourceDesc;\r\n \r\n@@ -32,7 +33,7 @@ use crate::types::sources::SourceDesc;\r\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\r\n pub enum PeekResponse {\r\n     Rows(Vec<(Row, NonZeroUsize)>),\r\n-    Error(String),\r\n+    Error(DataflowError),\r\n     Canceled,\r\n }\r\n \r\n@@ -43,7 +44,7 @@ pub enum PeekResponse {\r\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\r\n pub enum PeekResponseUnary {\r\n     Rows(Vec<Row>),\r\n-    Error(String),\r\n+    Error(DataflowError),\r\n     Canceled,\r\n }\r\n \r\ndiff --git a/src/dataflow/src/server.rs b/src/dataflow/src/server.rs\r\nindex ed5caa7e9..31a2579b5 100644\r\n--- a/src/dataflow/src/server.rs\r\n+++ b/src/dataflow/src/server.rs\r\n@@ -30,11 +30,10 @@ use tokio::sync::mpsc;\r\n use mz_dataflow_types::client::ComputeInstanceId;\r\n use mz_dataflow_types::client::{Command, ComputeCommand, LocalClient, Response};\r\n use mz_dataflow_types::sources::AwsExternalId;\r\n-use mz_dataflow_types::PeekResponse;\r\n+use mz_dataflow_types::{DataflowError, PeekResponse};\r\n use mz_expr::{GlobalId, RowSetFinishing};\r\n use mz_ore::metrics::MetricsRegistry;\r\n use mz_ore::now::NowFn;\r\n-use mz_ore::result::ResultExt;\r\n use mz_repr::{DatumVec, Diff, Row, RowArena, Timestamp};\r\n \r\n use self::metrics::{ServerMetrics, WorkerMetrics};\r\n@@ -391,7 +390,7 @@ impl PendingPeek {\r\n     }\r\n \r\n     /// Collects data for a known-complete peek.\r\n-    fn collect_finished_data(&mut self) -> Result<Vec<(Row, NonZeroUsize)>, String> {\r\n+    fn collect_finished_data(&mut self) -> Result<Vec<(Row, NonZeroUsize)>, DataflowError> {\r\n         // Check if there exist any errors and, if so, return whatever one we\r\n         // find first.\r\n         let (mut cursor, storage) = self.trace_bundle.errs_mut().cursor();\r\n@@ -403,14 +402,13 @@ impl PendingPeek {\r\n                 }\r\n             });\r\n             if copies < 0 {\r\n-                return Err(format!(\r\n-                    \"Invalid data in source errors, saw retractions ({}) for row that does not exist: {}\",\r\n-                    copies * -1,\r\n-                    cursor.key(&storage),\r\n-                ));\r\n+                return Err(DataflowError::NegativeMultiplicity {\r\n+                    copies: copies * -1,\r\n+                    data: cursor.key(&storage).to_string(),\r\n+                });\r\n             }\r\n             if copies > 0 {\r\n-                return Err(cursor.key(&storage).to_string());\r\n+                return Err(cursor.key(&storage).clone());\r\n             }\r\n             cursor.step_key(&storage);\r\n         }\r\n@@ -452,8 +450,7 @@ impl PendingPeek {\r\n                 let mut borrow = datum_vec.borrow_with_many(&[key, row]);\r\n                 if let Some(result) = self\r\n                     .map_filter_project\r\n-                    .evaluate_into(&mut borrow, &arena, &mut row_builder)\r\n-                    .map_err_to_string()?\r\n+                    .evaluate_into(&mut borrow, &arena, &mut row_builder)?\r\n                 {\r\n                     let mut copies = 0;\r\n                     cursor.map_times(&storage, |time, diff| {\r\n@@ -462,11 +459,10 @@ impl PendingPeek {\r\n                         }\r\n                     });\r\n                     let copies: usize = if copies < 0 {\r\n-                        return Err(format!(\r\n-                            \"Invalid data in source, saw retractions ({}) for row that does not exist: {:?}\",\r\n-                            copies * -1,\r\n-                            &*borrow,\r\n-                        ));\r\n+                        return Err(DataflowError::NegativeMultiplicity {\r\n+                            copies: copies * -1,\r\n+                            data: format!(\"{:?}\", borrow),\r\n+                        });\r\n                     } else {\r\n                         copies.try_into().unwrap()\r\n                     };\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10891","id":1150907238,"node_id":"PR_kwDOCkIcu84zfPnD","number":10891,"title":"add timely-console feature","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-25T21:44:43Z","updated_at":"2022-02-25T21:44:43Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10891","html_url":"https://github.com/MaterializeInc/materialize/pull/10891","diff_url":"https://github.com/MaterializeInc/materialize/pull/10891.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10891.patch","merged_at":null},"body":"NOT READY FOR REVIEW: depends on https://github.com/TimelyDataflow/timely-dataflow/pull/452\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10886","id":1150606226,"node_id":"PR_kwDOCkIcu84zeUnn","number":10886,"title":"test wip","user":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-25T15:54:50Z","updated_at":"2022-02-25T19:12:58Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10886","html_url":"https://github.com/MaterializeInc/materialize/pull/10886","diff_url":"https://github.com/MaterializeInc/materialize/pull/10886.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10886.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10879","id":1149844907,"node_id":"I_kwDOCkIcu85EiT2r","number":10879,"title":"JWK-based authentication: log the reason for failure","user":{"login":"antifuchs","id":11864,"node_id":"MDQ6VXNlcjExODY0","avatar_url":"https://avatars.githubusercontent.com/u/11864?v=4","gravatar_id":"","url":"https://api.github.com/users/antifuchs","html_url":"https://github.com/antifuchs","followers_url":"https://api.github.com/users/antifuchs/followers","following_url":"https://api.github.com/users/antifuchs/following{/other_user}","gists_url":"https://api.github.com/users/antifuchs/gists{/gist_id}","starred_url":"https://api.github.com/users/antifuchs/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antifuchs/subscriptions","organizations_url":"https://api.github.com/users/antifuchs/orgs","repos_url":"https://api.github.com/users/antifuchs/repos","events_url":"https://api.github.com/users/antifuchs/events{/privacy}","received_events_url":"https://api.github.com/users/antifuchs/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"assignees":[{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-02-24T22:41:50Z","updated_at":"2022-02-24T22:41:50Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nRight now, we silently reject login attempts, and it's great to be silent to the person requesting the login! But it would be great if the server could log that a login attempt failed, and why it failed. I'd love to see the following things in the log:\r\n\r\n* reason for failure, as close as we can get it (mismatching JWK, tenant, email?)\r\n* remote IP address","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10878","id":1149787432,"node_id":"PR_kwDOCkIcu84zbmPl","number":10878,"title":"[kafka sink] Force compaction in EOS test suite","user":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-02-24T21:54:39Z","updated_at":"2022-03-08T23:12:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10878","html_url":"https://github.com/MaterializeInc/materialize/pull/10878","diff_url":"https://github.com/MaterializeInc/materialize/pull/10878.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10878.patch","merged_at":null},"body":"Update kafka EOS test to make it more robustly guarantee timestamp compaction has occurred before restarting","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10876","id":1149689368,"node_id":"I_kwDOCkIcu85Eht4Y","number":10876,"title":"kafka exactly once sink: transaction timeout maybe hoses sink","user":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":2187378159,"node_id":"MDU6TGFiZWwyMTg3Mzc4MTU5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sink","name":"A-sink","color":"5fefa7","default":false,"description":"Area: sinks"}],"state":"open","locked":false,"assignee":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"assignees":[{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-02-24T19:55:34Z","updated_at":"2022-03-09T15:54:20Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nmaster\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nhttps://github.com/MaterializeInc/product/issues/136\r\n\r\n- Kafka transaction timeout causes one of our transaction state transitions to trip an assert in rdkafka: https://github.com/edenhill/librdkafka/blob/master/src/rdkafka_txnmgr.c#L237.  We've seen this occur in a customer running v0.12 (which predates some pretty big sink refactors)\r\n\r\nI'm not sure that we handle this well so the purpose of this ticket is to:\r\n1) Investigate and determine if this is still an issue\r\n2) Fix it if necessary\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10875","id":1149647541,"node_id":"PR_kwDOCkIcu84zbIv_","number":10875,"title":"Pass `librdkafka` debug level down as a value","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-02-24T19:05:26Z","updated_at":"2022-02-25T19:51:35Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10875","html_url":"https://github.com/MaterializeInc/materialize/pull/10875","diff_url":"https://github.com/MaterializeInc/materialize/pull/10875.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10875.patch","merged_at":null},"body":"This pr implements the changes described in https://github.com/MaterializeInc/materialize/issues/10441 (minus one). \r\nIt accomplishes this by:\r\n- adding more helper functions\r\n- pre-determining the `tracing::Level` for `librdkafka` based on the `Targets` for the fmt layer\r\n- passing this level down. We have a few `Context` structs, mainly `CoordContext` so that this level can be passed to purification, and `RenderContext` to be passed into source and sink creation\r\n  - In a later pr, more information (likely the new aws information adde by I think @quodlibetor ) can be moved into these contexts, I believe\r\n- Passing this level into the new `ClientConfig::new` wrapper, and `conditionally enabling `debug=all`. It is not 100% to me what the difference between these is, but I believe we should leave it as is for now and investigate later, to prevent behavioral changes\r\nWhat is not accomplished:\r\n- removing the filter from the metrics layer. In my testing, the regression existed in at least the `KafkaUpsert` feature-benchmark. This benchmark is pretty noisy, but after some investigation, I believe the regression is due to us not longer hitting this fast path: https://docs.rs/tracing/latest/src/tracing/macros.rs.html#2064-2069 that is checked before every tracing call.\r\n  - Its possible that turning off `tracing-log` will help, but I doubt removing this filter will ever be perf-neutral: We are simply 1. checking `enabled` more and 2. dispatching more events (i should have realized this would have happened)\r\n  - Even with the regression, this change is worth it, as it still means the `debug=all` case is correctly setup\r\n  - I think in the platform world, I think we will have to accept this regression, especially because turning it on `tokio-console`, and, more importantly, `opentelemetry` will cause it to exist anyways. We probably need to have some kind of proposal on the default, single-instance setup for mz, vs, the cloud/platform setup, which configures tracing in a more aggressive way.\r\n  - @benesch @philip-stoev it would be nice to get some pointers, after this lands, on how to do a full perf test when removing the filter from other other layers\r\n  \r\nOverall, I think this pr improves the general flow of values and extra context into sources, and fixes the mis-use of `tracing::enabled!` for when we DO have more layers enabled (which may only be the `tokio-console` option right now), so i think it is correct to land it as is\r\n\r\n### Motivation\r\n\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n   * This PR refactors existing code.\r\nas described above and in https://github.com/MaterializeInc/materialize/issues/10441\r\n\r\n### Tips for reviewer\r\n\r\n- bottom pr: refactor so that in the later commit, `ClientConfig::new` is always called correctly (through ore)\r\n- second pr: the main refactor, described above:\r\n- third pr: this is a description of an absolutely bizarre bug, and after multiple hours with the tracing team, the conclusion was: lets not use `tracing-log` anymore (we are VERY close to this). I think `rdkafka` is the last MEANINGFUL dep that used `log`\r\n- top pr: a TODO describing the performance followup\r\n\r\n### Testing\r\n\r\n- [N/A] This PR has adequate test coverage / QA involvement has been duly considered.\r\ntested locally\r\n\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10871","id":1149458747,"node_id":"I_kwDOCkIcu85Eg1k7","number":10871,"title":"Optimization/dataflow: have indexes support implicit casts","user":{"login":"wangandi","id":5522362,"node_id":"MDQ6VXNlcjU1MjIzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/5522362?v=4","gravatar_id":"","url":"https://api.github.com/users/wangandi","html_url":"https://github.com/wangandi","followers_url":"https://api.github.com/users/wangandi/followers","following_url":"https://api.github.com/users/wangandi/following{/other_user}","gists_url":"https://api.github.com/users/wangandi/gists{/gist_id}","starred_url":"https://api.github.com/users/wangandi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wangandi/subscriptions","organizations_url":"https://api.github.com/users/wangandi/orgs","repos_url":"https://api.github.com/users/wangandi/repos","events_url":"https://api.github.com/users/wangandi/events{/privacy}","received_events_url":"https://api.github.com/users/wangandi/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":2456706162,"node_id":"MDU6TGFiZWwyNDU2NzA2MTYy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/needs-discussion","name":"needs-discussion","color":"F9D0C4","default":false,"description":"Requires discussion before work proceeds"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-02-24T15:57:13Z","updated_at":"2022-03-10T16:14:45Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"## TL;DR\r\nFor the convenience of the user, indexes on a column should be usable also for contexts where the column has been cast implicitly to another type when the cast does not lose information (i.e., it is an injective function).\r\n\r\n## Description\r\n\r\nWhen a user enters any SQL query:\r\n```\r\nselect * from foo where foo.a = 'to_match' \r\n```\r\nThe SQL layer may decide to implicitly cast `foo.a` so that it is the same type as 'to_match'. This implicit cast may happen even if you cast 'to_match' to become the same type as `foo.a`.\r\n\r\nExample:\r\n\r\n```\r\nmaterialize=> explain raw plan for select selectcol from test where varcharcol = cast('string' as character varying);\r\n                              Raw Plan                              \r\n--------------------------------------------------------------------\r\n %0 =                                                              +\r\n | Get materialize.public.test (u19)                               +\r\n | Filter (varchartostr(#1) = varchartostr(strtovarchar(\"string\")))+\r\n | Project (#0)  \r\n```\r\n\r\nCurrently, if you create an index on a column, the index cannot be used in contexts where it has been implicitly cast to something else. In the query above, you would need an index on `varcharcol::string` instead of an index on `varcharcol` to speed up the filter. But this is not readily apparent to the user. \r\n\r\n## Linked Tickets\r\n\r\n- Case of an implicit cast where the in-memory representation is identical: [#10738](10738).\r\n- Case of an implicit cast where the in-memory representation is different: [#4171](4171).","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10870","id":1149370562,"node_id":"I_kwDOCkIcu85EggDC","number":10870,"title":"sql: values of unknown type too aggressively cast to text","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-02-24T14:41:14Z","updated_at":"2022-02-25T11:27:48Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv21.0.0\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nIn PG, values of unknown types (e.g. values surrounded in quotes that look like text) are treated as unknown types later in the planning process than they are in Materialize:\r\n\r\nPG:\r\n\r\n```\r\nSELECT (ROW('fuzzy dice')).f1;\r\nERROR:  failed to find conversion function from unknown to text\r\n```\r\n\r\nMZ:\r\n```\r\n SELECT (ROW('fuzzy dice')).f1;\r\n     f1     \r\n------------\r\n fuzzy dice\r\n```\r\n```\r\nselect pg_typeof( (ROW('fuzzy dice')).f1);\r\n pg_typeof \r\n-----------\r\n text\r\n```\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10868","id":1149292591,"node_id":"PR_kwDOCkIcu84zZ9W8","number":10868,"title":"sql: make literal records coercible into scalar records","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2022-02-24T13:29:55Z","updated_at":"2022-02-28T16:23:19Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10868","html_url":"https://github.com/MaterializeInc/materialize/pull/10868","diff_url":"https://github.com/MaterializeInc/materialize/pull/10868.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10868.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\nGot sidetracked by the interesting error of `ERROR:  VALUES cannot be cast to uniform type: record(f1: integer) vs text` resulting from a `select least(row(1))` statement and got curious where `text` was coming from. We now have an answer!\r\n\r\nWhen coercing a `LiteralRecord` into a scalar type, we produced a `None` column type. Homogenizing functions like `least` try to guess the most appropriate return type, and defaults to `text` if there are no type hints.\r\n\r\nThis PR adds in coercion of `LiteralRecords` into scalar `Record` types and adds in several tests.\r\n\r\n### Motivation\r\n\r\nFixes https://github.com/MaterializeInc/materialize/issues/10422\r\nFixes https://github.com/MaterializeInc/materialize/issues/8597\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Fixes `ROW` incompatibility in functions and `VALUES` clauses {{% gh 8597 %}} {{% gh 10422 %}}","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10859","id":1148699351,"node_id":"I_kwDOCkIcu85Ed8LX","number":10859,"title":"Support Writing Metadata to Kafka Headers in Sinks","user":{"login":"nmeagan11","id":19657850,"node_id":"MDQ6VXNlcjE5NjU3ODUw","avatar_url":"https://avatars.githubusercontent.com/u/19657850?v=4","gravatar_id":"","url":"https://api.github.com/users/nmeagan11","html_url":"https://github.com/nmeagan11","followers_url":"https://api.github.com/users/nmeagan11/followers","following_url":"https://api.github.com/users/nmeagan11/following{/other_user}","gists_url":"https://api.github.com/users/nmeagan11/gists{/gist_id}","starred_url":"https://api.github.com/users/nmeagan11/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nmeagan11/subscriptions","organizations_url":"https://api.github.com/users/nmeagan11/orgs","repos_url":"https://api.github.com/users/nmeagan11/repos","events_url":"https://api.github.com/users/nmeagan11/events{/privacy}","received_events_url":"https://api.github.com/users/nmeagan11/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":2187378159,"node_id":"MDU6TGFiZWwyMTg3Mzc4MTU5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sink","name":"A-sink","color":"5fefa7","default":false,"description":"Area: sinks"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-23T23:44:50Z","updated_at":"2022-02-23T23:44:50Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nRelevant Use Case and Internal Discussion: https://materializeinc.slack.com/archives/C01CFKM1QRF/p1645606997350319","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10854","id":1148624879,"node_id":"I_kwDOCkIcu85Edp_v","number":10854,"title":"Consider implementing sane comparisons for Intervals","user":{"login":"jkosh44","id":10800303,"node_id":"MDQ6VXNlcjEwODAwMzAz","avatar_url":"https://avatars.githubusercontent.com/u/10800303?v=4","gravatar_id":"","url":"https://api.github.com/users/jkosh44","html_url":"https://github.com/jkosh44","followers_url":"https://api.github.com/users/jkosh44/followers","following_url":"https://api.github.com/users/jkosh44/following{/other_user}","gists_url":"https://api.github.com/users/jkosh44/gists{/gist_id}","starred_url":"https://api.github.com/users/jkosh44/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkosh44/subscriptions","organizations_url":"https://api.github.com/users/jkosh44/orgs","repos_url":"https://api.github.com/users/jkosh44/repos","events_url":"https://api.github.com/users/jkosh44/events{/privacy}","received_events_url":"https://api.github.com/users/jkosh44/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-02-23T22:00:58Z","updated_at":"2022-02-23T22:02:40Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\r\n\r\nThere's no requirement in Dataflow/Materialize for ordering to be deterministic, that limitation only exists with equality. So as far as Dataflow/Materialize is concerned, we can implement `PartialOrd` and `Ord` on Interval such that we consider 24 hours equal to 1 day (and 30 days equal to 1 month).\r\n\r\nHowever I do think there is a limitation in Rust that prevents this. The `PartialOrd` docs contain the following (https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html):\r\n\r\n>    The methods of this trait must be consistent with each other and with those of PartialEq in the following sense:\r\n    a == b if and only if partial_cmp(a, b) == Some(Equal).\r\n    a < b if and only if partial_cmp(a, b) == Some(Less) (ensured by the default implementation).\r\n    a > b if and only if partial_cmp(a, b) == Some(Greater) (ensured by the default implementation).\r\n    a <= b if and only if a < b || a == b (ensured by the default implementation).\r\n    a >= b if and only if a > b || a == b (ensured by the default implementation).\r\n    a != b if and only if !(a == b) (already part of PartialEq).\r\n\r\nSo I'm not sure that's it's possible to implement `PartialOrd` in a \"sane\" way where we consider 24 hours == 1 day without also implementing `Eq` and `PartialEq` to consider 24 hours == 1 day.\r\n\r\nThough there is a potential workaround I was considering where we arbitrarily say that 1 day > 24 hours, and 1 day < 24 hours 1 microsecond. That may allow us to sanely order Interval's without breaking the requirement Rust imposes on `PartialOrd` and `PartialEq`.\r\n\r\nOnce #10566 is fixed then we can fully support 24 hours == 1 day.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10849","id":1148478509,"node_id":"I_kwDOCkIcu85EdGQt","number":10849,"title":"Support SELECTs with AS OF clause in EXPLAIN","user":{"login":"andrioni","id":159177,"node_id":"MDQ6VXNlcjE1OTE3Nw==","avatar_url":"https://avatars.githubusercontent.com/u/159177?v=4","gravatar_id":"","url":"https://api.github.com/users/andrioni","html_url":"https://github.com/andrioni","followers_url":"https://api.github.com/users/andrioni/followers","following_url":"https://api.github.com/users/andrioni/following{/other_user}","gists_url":"https://api.github.com/users/andrioni/gists{/gist_id}","starred_url":"https://api.github.com/users/andrioni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrioni/subscriptions","organizations_url":"https://api.github.com/users/andrioni/orgs","repos_url":"https://api.github.com/users/andrioni/repos","events_url":"https://api.github.com/users/andrioni/events{/privacy}","received_events_url":"https://api.github.com/users/andrioni/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-23T19:14:40Z","updated_at":"2022-02-23T19:14:40Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nRight now `EXPLAIN` can only take a query (which is a subset of what can be done in a `SELECT` statement), not a fully-formed `SELECT` statement, disagreeing with [our documentation](https://materialize.com/docs/sql/explain/). The main known practical limitation is that `SELECT` statements with an `AS OF` clause are currently not supported by `EXPLAIN`.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10840","id":1147911324,"node_id":"I_kwDOCkIcu85Ea7yc","number":10840,"title":"loss of interactivity when running .td tests","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":3052793141,"node_id":"MDU6TGFiZWwzMDUyNzkzMTQx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/P1","name":"P1","color":"d10000","default":false,"description":"Priority: critical issue, panic, etc. drop what you're doing and fix immediately"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2022-02-23T10:27:27Z","updated_at":"2022-03-02T12:29:23Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.20.1-dev (30e6e61db)\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nRunning the following sequences of testdrive tests results in a hang:\r\n- testdrive + redpanda\r\n- persistence tests + confluent\r\n\r\nThe symptoms are as follows:\r\n- no new SQL connections are accepted\r\n- the mzdata/blob directory has just a couple of blobs\r\n- the timestamps table has ~70 entries\r\n- memory consumption nominal\r\n- CPU usage slightly above 100%\r\n-  perf report has librdkafka consuming all the CPU:\r\n```\r\n+   17.50%     0.10%  rdk:broker0      [kernel.kallsyms]   [k] entry_SYSCALL_64_after_hwframe                                                                                                                ◆\r\n+   17.36%     0.15%  rdk:broker0      [kernel.kallsyms]   [k] do_syscall_64                                                                                                                                 ▒\r\n+   10.14%     0.08%  rdk:broker0      [kernel.kallsyms]   [k] schedule                                                                                                                                      ▒\r\n+   10.02%     0.58%  rdk:broker0      [kernel.kallsyms]   [k] __sched_text_start                                                                                                                            ▒\r\n+    9.50%     0.29%  rdk:broker0      libc-2.31.so        [.] __poll                                                                                                                                        ▒\r\n+    9.38%     0.51%  rdk:main         libc-2.31.so        [.] clock_gettime                                                                                                                                 ▒\r\n+    8.78%     0.56%  rdk:main         [vdso]              [.] __vdso_clock_gettime                                                                                                                          ▒\r\n+    8.30%     0.09%  rdk:broker0      [kernel.kallsyms]   [k] __x64_sys_poll                                                                                                                                ▒\r\n+    8.08%     0.00%  rdk:broker0      [unknown]           [k] 0x0000000000000001                                                                                                                            ▒\r\n+    8.01%     0.33%  rdk:broker0      [kernel.kallsyms]   [k] do_sys_poll                                                                                                                                   ▒\r\n+    8.01%     0.72%  rdk:broker0      libpthread-2.31.so  [.] pthread_cond_timedwait@@GLIBC_2.3.2                                                                                                           ▒\r\n+    7.78%     0.06%  coordinator      [kernel.kallsyms]   [k] entry_SYSCALL_64_after_hwframe                                                                                                                ▒\r\n+    7.68%     0.12%  coordinator      [kernel.kallsyms]   [k] do_syscall_64                                                                                                                                 ▒\r\n+    6.93%     0.00%  rdk:main         [vdso]              [.] 0x00007ffc4a6f86cb                                                                                                                            ▒\r\n+    6.87%     0.09%  rdk:broker0      [kernel.kallsyms]   [k] __x64_sys_futex                                                                                                                               ▒\r\n+    6.72%     6.72%  rdk:main         [vdso]              [.] 0x00000000000006cb                                                                                                                            ▒\r\n+    6.68%     0.05%  rdk:broker0      [kernel.kallsyms]   [k] do_futex                                                                                                                                      ▒\r\n+    6.15%     0.18%  rdk:broker0      [kernel.kallsyms]   [k] futex_wait                                                                                                                                    ▒\r\n+    5.65%     0.07%  rdk:broker0      [kernel.kallsyms]   [k] futex_wait_queue_me                                                                                                                           ▒\r\n+    5.32%     0.06%  rdk:broker0      [kernel.kallsyms]   [k] poll_schedule_timeout.constprop.0                                                                                                             ▒\r\n+    5.26%     0.01%  rdk:broker0      [kernel.kallsyms]   [k] schedule_hrtimeout_range                                                                                                                      ▒\r\n+    5.24%     0.05%  rdk:broker0      [kernel.kallsyms]   [k] schedule_hrtimeout_range_clock                                                                                                                ▒\r\n+    3.68%     0.30%  rdk:broker0      [kernel.kallsyms]   [k] __perf_event_task_sched_out                                                                                                                   ▒\r\n```\r\n\r\n- there are 1468 threads, mostly Kafka of course.\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10839","id":1147807550,"node_id":"I_kwDOCkIcu85Eaic-","number":10839,"title":"Map out how different clients and drivers deal with Postgres notices","user":{"login":"andrioni","id":159177,"node_id":"MDQ6VXNlcjE1OTE3Nw==","avatar_url":"https://avatars.githubusercontent.com/u/159177?v=4","gravatar_id":"","url":"https://api.github.com/users/andrioni","html_url":"https://github.com/andrioni","followers_url":"https://api.github.com/users/andrioni/followers","following_url":"https://api.github.com/users/andrioni/following{/other_user}","gists_url":"https://api.github.com/users/andrioni/gists{/gist_id}","starred_url":"https://api.github.com/users/andrioni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrioni/subscriptions","organizations_url":"https://api.github.com/users/andrioni/orgs","repos_url":"https://api.github.com/users/andrioni/repos","events_url":"https://api.github.com/users/andrioni/events{/privacy}","received_events_url":"https://api.github.com/users/andrioni/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-23T08:41:13Z","updated_at":"2022-02-23T08:41:13Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nPostgres has a mechanism to send messages to clients with different levels of severity: from `DEBUG` to `WARNING` (with `EXCEPTION` being equivalent to a full-fledged error). It would be good to map out how different clients and drivers deal with these messages, so that we can:\r\n1. Document it for end-users\r\n2. Make internal prioritization decisions regarding when/how to use these messages.\r\n\r\nThis might also inform further architecture decisions, e.g. should we reuse these messages to push things to the Cloud product.\r\n\r\nRelated issue: #4290","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10837","id":1147474186,"node_id":"I_kwDOCkIcu85EZREK","number":10837,"title":"Add precision type modifier to time, timestamp and interval types to improve compatibility with Postgres","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-02-22T23:35:03Z","updated_at":"2022-02-27T10:51:04Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nThe Postgres definitions of `time`, `timestamp` and `interval` all support an optional type modifier to limit digits of precision retained for the seconds field which is not currently present in the equivalent Materialize types. The current Materialize behavior operates using the maximum digits Postgres supports, so Materialize will never return answers which are less precise than the equivalent query in Postgres; however, the difference in precision can compound through arithmetic operations and yield meaningfully different answers to the same query.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10821","id":1147082491,"node_id":"I_kwDOCkIcu85EXxb7","number":10821,"title":"Predicates are not propagated through an inner equi-join","user":{"login":"aalexandrov","id":1071946,"node_id":"MDQ6VXNlcjEwNzE5NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1071946?v=4","gravatar_id":"","url":"https://api.github.com/users/aalexandrov","html_url":"https://github.com/aalexandrov","followers_url":"https://api.github.com/users/aalexandrov/followers","following_url":"https://api.github.com/users/aalexandrov/following{/other_user}","gists_url":"https://api.github.com/users/aalexandrov/gists{/gist_id}","starred_url":"https://api.github.com/users/aalexandrov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aalexandrov/subscriptions","organizations_url":"https://api.github.com/users/aalexandrov/orgs","repos_url":"https://api.github.com/users/aalexandrov/repos","events_url":"https://api.github.com/users/aalexandrov/events{/privacy}","received_events_url":"https://api.github.com/users/aalexandrov/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":2456706162,"node_id":"MDU6TGFiZWwyNDU2NzA2MTYy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/needs-discussion","name":"needs-discussion","color":"F9D0C4","default":false,"description":"Requires discussion before work proceeds"},{"id":3020087139,"node_id":"MDU6TGFiZWwzMDIwMDg3MTM5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-optimization","name":"A-optimization","color":"5fefa7","default":false,"description":"Area: query optimization and transformation"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-22T15:55:09Z","updated_at":"2022-02-22T17:38:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nv0.20.1-dev (edfc3b017)\r\n\r\n### How did you install Materialize?\r\n\r\nBuilt from source\r\n\r\n### What was the issue?\r\n\r\nSee details and reproduction instructions:\r\n\r\n* [in this writeup (Item No 5)](https://github.com/aalexandrov/mzt-repos/blob/main/simplify_outer_joins/PR_10679.md#item-no-5),\r\n* [in this comment (summarized from the above)](https://github.com/MaterializeInc/materialize/pull/10679#issuecomment-1047937546).\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11170","id":1166349026,"node_id":"I_kwDOCkIcu85FhRLi","number":11170,"title":"regression: SELECT against a postgres source never returns","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-11T12:15:03Z","updated_at":"2022-03-11T12:15:03Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nc5e680282b\n\n### How did you install Materialize?\n\nDocker image\n\n### What was the issue?\n\nThis has happened once in CI https://buildkite.com/materialize/tests/builds/30325#0839949a-2e35-4cde-876f-5dd54f88e358 and once for me on a scratch machine. The symphoms are as follows:\r\n\r\n1. querying the postgres source hangs and never returns.\r\n2. It is possible to create new connections to the database, so the coordinator is not wedged\r\n3. It is possible to query other tables\r\n4. COPY TAIL does not return anything\r\n5.  AS OF 0 and AS OF very_large_number also hang\r\n6. It is posssible to use Ctrl+C to terminate the query\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11170/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11169","id":1166073540,"node_id":"PR_kwDOCkIcu840SBWo","number":11169,"title":"dataflow-types: partition StorageCommand::Insert by hash of data","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-11T07:02:57Z","updated_at":"2022-03-11T11:43:13Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11169","html_url":"https://github.com/MaterializeInc/materialize/pull/11169","diff_url":"https://github.com/MaterializeInc/materialize/pull/11169.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11169.patch","merged_at":null},"body":"Previously the inserts were partitioned by their position in the\r\ncommand. This impeded compaction, because it was likely that the\r\nretraction of a piece of data would land on a different worker than the\r\nthe original presentation of that data landed on.\r\n\r\nThis glitch was responsible for the ever-increasing time to `UPDATE` a\r\nnonmaterialized table.\r\n\r\nFix #11071.\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n### Testing\r\n\r\n- [?] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11168","id":1166001724,"node_id":"PR_kwDOCkIcu840RyXm","number":11168,"title":"coord: make session and dataflow builder generic","user":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-11T04:55:35Z","updated_at":"2022-03-11T05:01:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11168","html_url":"https://github.com/MaterializeInc/materialize/pull/11168","diff_url":"https://github.com/MaterializeInc/materialize/pull/11168.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11168.patch","merged_at":null},"body":"Transaction ops live in Sessions, and they hold Timestamps for Peek operations. Also work on dataflow builder while here. Start a new CoordTimestamp trait as a common place to dump trait definitions instead of copying them all over.\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - No user-facing changes.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11168/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11167","id":1165997206,"node_id":"PR_kwDOCkIcu840RxdE","number":11167,"title":"pgcopy: invert dependency on sql","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-11T04:45:30Z","updated_at":"2022-03-11T04:48:25Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11167","html_url":"https://github.com/MaterializeInc/materialize/pull/11167","diff_url":"https://github.com/MaterializeInc/materialize/pull/11167.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11167.patch","merged_at":null},"body":"Make sql depend on pgcopy, rather than vice-versa. This prevents changes\r\nto sql requiring that the dataflow crate be recompiled, which is slow.\r\n(dataflow depends on pgcopy).\r\n\r\nDoing it this way is also keeps the responsbility for translating a SQL\r\nAST into a more structured type *in* the sql crate. The previous\r\nCopyParams struct exported by the sql crate was basically just the AST\r\nfor the COPY statement, and the responsibility of validating that AST\r\nwas kicked downstream (i.e., to pgcopy). Better for pgcopy to assert its\r\nneeds (via the properly-structured CopyFormatParams type) and let the\r\nsql crate do the hard work of producing that struct.\r\n\r\n### Motivation\r\n\r\n* This PR refactors existing code to make compiling the sql crate fast again!\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11166","id":1165943860,"node_id":"I_kwDOCkIcu85FfuQ0","number":11166,"title":"sql: `coalesce` with `char` returns wrong result","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":2240473760,"node_id":"MDU6TGFiZWwyMjQwNDczNzYw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-correctness","name":"T-correctness","color":"695bd3","default":false,"description":"Theme: relates to consistency and correctness of results."}],"state":"open","locked":false,"assignee":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"assignees":[{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-03-11T03:01:50Z","updated_at":"2022-03-11T11:48:31Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nccd258eff\r\n\r\n### How did you install Materialize?\r\n\r\nBuilt from source\r\n\r\n### What was the issue?\r\n\r\nIn Materialize:\r\n\r\n```\r\nmaterialize=> select coalesce(null::char(1), 'abc');\r\n coalesce \r\n----------\r\n a\r\n(1 row)\r\n```\r\n\r\nIn PostgreSQL:\r\n\r\n```\r\nbenesch=# select coalesce(null::char(1), 'abc');;\r\n coalesce \r\n----------\r\n abc\r\n(1 row)\r\n```\r\n\r\ncc @sploiselle\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11166/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11164","id":1165814446,"node_id":"PR_kwDOCkIcu840RLxw","number":11164,"title":"sql: support typmods in the catalog","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-10T23:00:23Z","updated_at":"2022-03-11T12:06:42Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11164","html_url":"https://github.com/MaterializeInc/materialize/pull/11164","diff_url":"https://github.com/MaterializeInc/materialize/pull/11164.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11164.patch","merged_at":null},"body":"@pH14 or @sploiselle: would one of you be up for picking this up? I left a TODO in the code about validating the typmod, and we need release notes, maybe docs, and lots of tests. But it works in some manual testing!\r\n\r\n----\r\n\r\nFix #4884.\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - To be written!\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11163","id":1165753969,"node_id":"PR_kwDOCkIcu840Q_XO","number":11163,"title":"coord: make the TimestampOracle generic","user":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-10T21:39:54Z","updated_at":"2022-03-11T00:57:44Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11163","html_url":"https://github.com/MaterializeInc/materialize/pull/11163","diff_url":"https://github.com/MaterializeInc/materialize/pull/11163.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11163.patch","merged_at":null},"body":"Force callers to specify exactly how to generate a next timestamp\r\ninstead of always adding 1. This allows us to incorporate `now()` into\r\nnew timestamp generation instead of having that be dependent on calling\r\nfast_forward.\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - No user-facing changes.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11162","id":1165712142,"node_id":"PR_kwDOCkIcu840Q2QK","number":11162,"title":"consolidate the type of the current_values map in upsert_core","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T21:00:04Z","updated_at":"2022-03-10T21:01:59Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11162","html_url":"https://github.com/MaterializeInc/materialize/pull/11162","diff_url":"https://github.com/MaterializeInc/materialize/pull/11162.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11162.patch","merged_at":null},"body":"In this pr, I switch the `current_values` map in `upsert_core` to be a map of `Result<Row, ...> -> Result<Row, DataflowError>`\r\nThis is primarily to clean this code up to ready it for the merge with `persistent_upsert`, which manages key-values without the easy path of \"just send an `(error, t, +1)` if the key fails to decode. \r\n\r\nAdditionally, we NEVER retract if the decoded key is an `Err`. This is the match the previous behavior of the `upsert` operator. (When I merge persistent_upsert into this code, their will be a subtlety for me to point out in a comment; basically, persist may pre-populate the `current_values` map with decode error keys, but they may never be observed, unless a new decode error key comes along; the error case being propagated seems to be happen here: https://github.com/MaterializeInc/materialize/blob/main/src/persist/src/operators/upsert.rs#L277-L290. I will make sure my comment explains this (I hope its accurate) in the later pr. In that case, this pr is mostly a mechanical type change that makes that pr easier to review and digest)\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11162/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11161","id":1165623880,"node_id":"PR_kwDOCkIcu840QjdY","number":11161,"title":"Refactor Postgres source metrics using table metadata","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T19:18:07Z","updated_at":"2022-03-10T19:59:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11161","html_url":"https://github.com/MaterializeInc/materialize/pull/11161","diff_url":"https://github.com/MaterializeInc/materialize/pull/11161.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11161.patch","merged_at":null},"body":"This PR reworks the Postgres metrics to tag all relevant metrics with per table stats and consolidates insert/update/delete statements into \"mz_postgres_per_source_operations\" with an operation tag to allow distinguishing by type. Since cardinality is fixed and low using tags for these is a more \"Prometheus\"-y way of reporting which eliminates the need for a separate metric or doing arithmetic during queries to determine the total operations processed. \r\n\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n      - This updates the Postgres metrics to use tags with all of the metadata we have allowing for more precise analysis of the behavior of the Postgres source.\r\n\r\n### Tips for reviewer\r\nWhile the core user visible change here is metrics which are more specific but also more conducive to aggregation there is also a change to the exposure of instrumentation details to the code being instrumented. Originally this struct just held these wrapped structs and handed out references to them but with this PR I am trying out using associated functions to encapsulate the details of figuring out which counter to manipulate in what way with function calls that only accept arguments with types that are `Send` so that in the future if desirable this function call boundary can be used to immediately move the counter manipulation work off to another thread since it involves locking at some level whether its atomic types or more sophisticated locks.\r\n\r\n### Testing\r\n\r\n- [X] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Small changes to the Postgres per source metrics, `mz_postgres_per_source_inserts`, `mz_postgres_per_source_updates`, `mz_postgres_per_source_deletes`, and `mz_postgres_per_source_messages_total` have been removed in favor of `mz_postgres_per_source_operations` which includes an `operation` tag that distinguishes between the three operations. The value of this counter when not filtering by the `operation` tag will be the same as the `mz_postgres_per_source_messages_total` was previously. `mz_postgres_per_source_ignored` will also now include insert/update/delete messages for tables which are not part of the source (such as tables added to the Postgres publication after the Materialize source was created) where previously it only reported the number of `Origin` and `Type` messages received.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11161/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11159","id":1165514458,"node_id":"PR_kwDOCkIcu840QMWV","number":11159,"title":"Add test for create views from source after an alter table","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T17:27:33Z","updated_at":"2022-03-10T19:24:04Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11159","html_url":"https://github.com/MaterializeInc/materialize/pull/11159","diff_url":"https://github.com/MaterializeInc/materialize/pull/11159.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11159.patch","merged_at":null},"body":"This PR introduces a new test focused on verifying behavior of create views from source in the face of upstream alter tables being run in Postgres. An alter expected to cause the source to error is validated to allow view creation but no queries to succeed, and then an alter expected to be ignored by the source is validated to allow view creation and querying.\r\n\r\n### Motivation\r\n   * This PR refactors existing code.\r\n\r\n      - Existing code lacked sufficient testing of these interactions, especially since the view creation could logically be expected to fail but it succeeds and then queries fail. This test therefor not only validates behavior but serves as documentation that this slightly unexpected behavior is actually correct.\r\n\r\n### Testing\r\n\r\n- [X] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - No user facing changes here, only tests.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11159/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11158","id":1165434400,"node_id":"I_kwDOCkIcu85Fdx4g","number":11158,"title":"The field 'TABLE_SCHEMA' has a type currently unknown to Npgsql (OID 25)","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T16:18:43Z","updated_at":"2022-03-10T16:23:18Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.21.1\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nUsing PowerBI Desktop I attempted to add a new datasource with the postgresql driver to connect to the materialize instance. Received the error when the driver attempted to connect, happens regardless of Import or DirectQuery setting and whether or not \"Include Relationship Columns\" or \"Navigate using full hierarchy\" were checked.\r\n\r\n\r\nThis looks like the same issue reported with CockroachDB in https://github.com/npgsql/npgsql/issues/1321 and https://github.com/cockroachdb/cockroach/issues/63146\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11158/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11156","id":1165243290,"node_id":"PR_kwDOCkIcu840PTMy","number":11156,"title":"sql: support SHOW CLUSTERS","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T13:41:57Z","updated_at":"2022-03-11T04:06:02Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11156","html_url":"https://github.com/MaterializeInc/materialize/pull/11156","diff_url":"https://github.com/MaterializeInc/materialize/pull/11156.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11156.patch","merged_at":null},"body":"### Motivation\r\n\r\nThis PR adds a known-desirable feature. Closes #11128\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - no user-facing behavior changes\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11156/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11155","id":1165156697,"node_id":"I_kwDOCkIcu85FcuFZ","number":11155,"title":"regression: Creating many indexes over DIFFERENT columns of same table causes OOM","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465753202,"node_id":"MDU6TGFiZWwxNDY1NzUzMjAy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dataflow","name":"A-dataflow","color":"5fefa7","default":false,"description":"Area: dataflow"},{"id":2321764790,"node_id":"MDU6TGFiZWwyMzIxNzY0Nzkw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-memory","name":"T-memory","color":"695bd3","default":false,"description":"Theme: memory"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-10T12:24:23Z","updated_at":"2022-03-10T13:02:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.22.1-dev (0b34555fb)\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nEven with the fix in https://github.com/MaterializeInc/materialize/pull/11154 , the case where many different indexes are being created on the same table still causes OOM. The memory consumption is 100MB/index even in the case where the table has no data.\r\n\r\nTo reproduce, pipe the output of this through `testdrive -`:\r\n\r\n```\r\nprint(f\"> CREATE TABLE t (f1 INTEGER)\")\r\nfor i in range (1,1000):\r\n    print(f\"> CREATE INDEX i{i} ON t(f1+{i})\")\r\n```\r\n\r\nThis same case works like charm on `v0.22.0 (a7c727ac4)` , so it appears different from #4887 that has been there forever. Note that the test case does not ingest any data nor it runs any `SELECT`s.  \n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11153","id":1164928912,"node_id":"PR_kwDOCkIcu840OQKL","number":11153,"title":"scratch: Improve debugging of test failures in CI","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T08:48:51Z","updated_at":"2022-03-10T08:48:51Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11153","html_url":"https://github.com/MaterializeInc/materialize/pull/11153","diff_url":"https://github.com/MaterializeInc/materialize/pull/11153.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11153.patch","merged_at":null},"body":"- Add a \"ci\" instance type that matches the AWS instance type\r\ncurrently used by Buildkite\r\n- Install the psql command-line tool on provision\r\n\r\n### Motivation\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\nI have had the need to use the two suggested enhancements on a daily basis.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11153/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11152","id":1164620446,"node_id":"PR_kwDOCkIcu840NP4s","number":11152,"title":"Update pg source docs","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-10T01:03:21Z","updated_at":"2022-03-10T16:32:58Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11152","html_url":"https://github.com/MaterializeInc/materialize/pull/11152","diff_url":"https://github.com/MaterializeInc/materialize/pull/11152.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11152.patch","merged_at":null},"body":"This PR updates the docs for creating Postgres sources to reflect the latest behavior after #10721 and \r\n#11083 have merged, specifically calling out that when a postgres source is created that we take a snapshot of the tables in the publication and their schemas and then use that to detect DDL changes during replication since they are not part of the protocol.\r\n\r\n\r\n### Motivation\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n      - Documentation of the new Postgres source behavior.\r\n\r\n\r\n\r\n### Testing\r\n\r\n- [X] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - There are no user facing changes, this is a docs only change\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11152/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11148","id":1164512814,"node_id":"PR_kwDOCkIcu840M5gB","number":11148,"title":"Add prometheus metric for per partition high watermark","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T22:35:07Z","updated_at":"2022-03-09T23:21:07Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11148","html_url":"https://github.com/MaterializeInc/materialize/pull/11148","diff_url":"https://github.com/MaterializeInc/materialize/pull/11148.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11148.patch","merged_at":null},"body":"As mentioned in https://github.com/MaterializeInc/cloud/issues/2355 there is a desire to have the broker reported high watermark for each partition available in metrics which was lost when the interaction with kafka was reworked. This PR adds the metric `mz_kafka_partition_offset_max` with tags for `topic`, `source_id`, `source_instance` and `partition_id` to the set exported by prometheus which also puts it into the `mz_metrics` system table.\r\n\r\n### Motivation\r\n\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\nhttps://github.com/MaterializeInc/cloud/issues/2355\r\n\r\n### Tips for reviewer\r\n\r\nNo, high watermark is not the correct spelling but its what kafka and rdkafka use so we will all have to wonder exactly what happens to a watermark to get it high or low.\r\n\r\n### Testing\r\n\r\n- [X] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Add metric mz_kafka_partition_offset_max which records the per partition high_watermark reported by the broker. This metric is available via the prometheus metrics endpoint and the mz_metrics system table.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11148/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11147","id":1164482687,"node_id":"I_kwDOCkIcu85FaJh_","number":11147,"title":"dataflow: merge `persistent_upsert` into `mz_dataflow::render::upsert`","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"assignees":[{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-03-09T21:56:26Z","updated_at":"2022-03-09T21:57:07Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"To finally close https://github.com/MaterializeInc/materialize/issues/9551\r\n\r\n\r\nSee https://github.com/MaterializeInc/materialize/issues/9914 for the basic overview of the options.\r\n\r\nAfter talking to @aljoscha, moving `persistent_upsert` into the `dataflow` crate should suffice to simplify the code","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11147/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11145","id":1164365726,"node_id":"I_kwDOCkIcu85FZs-e","number":11145,"title":"`jsonb_object_agg` doesn't fail for null keys","user":{"login":"andrioni","id":159177,"node_id":"MDQ6VXNlcjE1OTE3Nw==","avatar_url":"https://avatars.githubusercontent.com/u/159177?v=4","gravatar_id":"","url":"https://api.github.com/users/andrioni","html_url":"https://github.com/andrioni","followers_url":"https://api.github.com/users/andrioni/followers","following_url":"https://api.github.com/users/andrioni/following{/other_user}","gists_url":"https://api.github.com/users/andrioni/gists{/gist_id}","starred_url":"https://api.github.com/users/andrioni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrioni/subscriptions","organizations_url":"https://api.github.com/users/andrioni/orgs","repos_url":"https://api.github.com/users/andrioni/repos","events_url":"https://api.github.com/users/andrioni/events{/privacy}","received_events_url":"https://api.github.com/users/andrioni/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-09T19:47:50Z","updated_at":"2022-03-09T19:56:23Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.22.1-dev (502f90dc8)\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nPostgres rejects null keys on `jsonb_object_agg`, as JSON keys have to be non-null strings, but Materialize silently drops those key-value pairs:\r\n\r\n### Postgres\r\n```\r\nalessandro=# select jsonb_object_agg(null, 2);\r\nERROR:  field name must not be null\r\n\r\nalessandro=# select jsonb_object_agg(a, b) from (values (1, 2), (null, 4)) v(a, b);\r\nERROR:  field name must not be null\r\n```\r\n\r\n### Materialize\r\n```\r\nmaterialize=> select jsonb_object_agg(null, 2);\r\n jsonb_object_agg\r\n------------------\r\n {}\r\n(1 row)\r\n\r\nmaterialize=> select jsonb_object_agg(a, b) from (values (1, 2), (null, 4)) v(a, b);\r\n jsonb_object_agg\r\n------------------\r\n {\"1\":2}\r\n(1 row)\r\n```\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11144","id":1164228090,"node_id":"PR_kwDOCkIcu840L-qj","number":11144,"title":"sql-parser: add support for ALTER SECRET","user":{"login":"mkysel","id":7513948,"node_id":"MDQ6VXNlcjc1MTM5NDg=","avatar_url":"https://avatars.githubusercontent.com/u/7513948?v=4","gravatar_id":"","url":"https://api.github.com/users/mkysel","html_url":"https://github.com/mkysel","followers_url":"https://api.github.com/users/mkysel/followers","following_url":"https://api.github.com/users/mkysel/following{/other_user}","gists_url":"https://api.github.com/users/mkysel/gists{/gist_id}","starred_url":"https://api.github.com/users/mkysel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkysel/subscriptions","organizations_url":"https://api.github.com/users/mkysel/orgs","repos_url":"https://api.github.com/users/mkysel/repos","events_url":"https://api.github.com/users/mkysel/events{/privacy}","received_events_url":"https://api.github.com/users/mkysel/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-09T17:22:20Z","updated_at":"2022-03-09T18:02:47Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11144","html_url":"https://github.com/MaterializeInc/materialize/pull/11144","diff_url":"https://github.com/MaterializeInc/materialize/pull/11144.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11144.patch","merged_at":null},"body":"Add support for ALTER SECRET required for the platform. For the motivation see https://github.com/MaterializeInc/materialize/pull/11022\r\n\r\nTested manually, all cases parse as expected.\r\n```\r\nmaterialize=> alter secret foo;\r\nERROR:  Expected one of AS or RENAME, found semicolon\r\nLINE 1: alter secret foo;\r\n                        ^\r\n\r\nmaterialize=> alter secret foo as bar;\r\nERROR:  ALTER SECRET not yet supported\r\n\r\nmaterialize=> alter secret foo rename to bar;\r\nERROR:  unknown catalog item 'foo'\r\n\r\nmaterialize=> alter secret if exists foo rename to bar;\r\nALTER INDEX\r\n\r\nmaterialize=> alter secret if exists foo as bar;\r\nERROR:  ALTER SECRET not yet supported\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11143","id":1164179040,"node_id":"PR_kwDOCkIcu840L0cV","number":11143,"title":"debugging: add hidden flag to print tracing log level","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-09T16:40:29Z","updated_at":"2022-03-10T20:44:02Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11143","html_url":"https://github.com/MaterializeInc/materialize/pull/11143","diff_url":"https://github.com/MaterializeInc/materialize/pull/11143.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11143.patch","merged_at":null},"body":"I keep having to add this println locally to debug, and because as we add more filters and change things, its important to ensure the default hits the fast path in tracing macros where the max level is `INFO`, this helps confirm that things are working as intended\r\n\r\n### Motivation\r\n  * This PR adds a feature that has not yet been specified.\r\nLocal testing hidden feature\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11141","id":1164110785,"node_id":"PR_kwDOCkIcu840LmE9","number":11141,"title":"pg-cdc: add timeouts to connection / copy out postgres calls","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T15:42:26Z","updated_at":"2022-03-09T17:50:10Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11141","html_url":"https://github.com/MaterializeInc/materialize/pull/11141","diff_url":"https://github.com/MaterializeInc/materialize/pull/11141.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11141.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\nAs further protection against network-related-stalls (https://github.com/MaterializeInc/materialize/issues/10938) this PR adds in a basic Postgres replication client connection timeout, as well as a per-row timeout for our `CopyOutStream`. Since adding in these timeouts, I have not been able to reproduce the pg-cdc-resumption test failures we were seeing in the linked issue.\r\n\r\n### Motivation\r\n\r\nFixes https://github.com/MaterializeInc/materialize/issues/10938\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A - Same release note as https://github.com/MaterializeInc/materialize/pull/11098","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11141/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11138","id":1163954160,"node_id":"I_kwDOCkIcu85FYIfw","number":11138,"title":"regression: substantial increase of the records of indexes on a table","user":{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T13:40:25Z","updated_at":"2022-03-09T13:40:25Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.20.0\n\n### How did you install Materialize?\n\nDocker image\n\n### What was the issue?\n\nAfter an upgrade from 0.15.0 to 0.22.0 there seems to be a substantial increase of the records in indexes on a table.\r\n\r\nSteps to reproduce:\r\n\r\n- Create a table and an index:\r\n\r\n```sql\r\nCREATE table t1 (f1 bigint, f2 bigint);\r\nCREATE INDEX t1_f2_idx ON t1 (f2);\r\n```\r\n\r\n- Generate some records:\r\n\r\n```bash\r\nfor i in {1..1000}; do\r\n    psql -U materialize -h localhost -p 6875 -c \"INSERT INTO t1 (f1, f2) VALUES ($i, $i);\"\r\ndone\r\n```\r\n\r\n- Update and delete some of the records:\r\n\r\n```sql\r\nUPDATE t1 SET f1 = f1 + 1 WHERE (f2 > 500);\r\nDELETE FROM t1 WHERE f2 > 500;\r\n\r\nUPDATE t1 SET f1 = f1 + 1 WHERE (f2 < 500);\r\nDELETE FROM t1 WHERE f2 < 250;\r\n```\r\n\r\n- Check the count of the total records:\r\n\r\n```sql\r\nSELECT COUNT(*) from t1;\r\n// output: 251\r\n```\r\n\r\nBut the records in the index are growing exponentially:\r\n\r\n<img width=\"479\" alt=\"image\" src=\"https://user-images.githubusercontent.com/21223421/157452812-9c51cd95-ec69-40d6-a259-66d0001d6ac3.png\">\r\n\r\nCompaction does not seem to be kicking in.\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11138/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11137","id":1163897794,"node_id":"I_kwDOCkIcu85FX6vC","number":11137,"title":"performance regression: Index creation with `--persistent-user-tables` is 2.5-5x slower ","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1469366247,"node_id":"MDU6TGFiZWwxNDY5MzY2MjQ3","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-performance","name":"T-performance","color":"695bd3","default":false,"description":"Theme: performance improvements"},{"id":1771623161,"node_id":"MDU6TGFiZWwxNzcxNjIzMTYx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-persistence","name":"A-persistence","color":"5fefa7","default":false,"description":"Area: persistence of (meta)data"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-03-09T12:47:45Z","updated_at":"2022-03-11T12:39:16Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.22.1-dev (253c608b1)\n\n### How did you install Materialize?\n\nDocker image\n\n### What was the issue?\n\n```\r\nCreateIndex               \\|       0.588 \\|       0.256 \\|    !!YES!!    \\| 2.3 TIMES slower\r\n```\r\n\r\nThe regression:\r\n- seems specific to `--persistent-user-tables`\r\n- is proportional to the size of the table, that is, it is not a one-time startup cost\r\n- the test uses a single table \r\nTo reproduce:\r\n\r\n```\r\n./mzcompose run default --this-tag=unstable-$THIS_SHA --other-tag --root-scenario=CreateIndex --max-runs=\r\n```\r\n\r\nBisection reports the following commit:\r\n\r\n```\r\n3f7aedf33e91b8497c2f1622a4333da15a37de10 is the first bad commit\r\ncommit 3f7aedf33e91b8497c2f1622a4333da15a37de10\r\nMerge: 588a9e720 253c608b1\r\nAuthor: Nikhil Benesch <nikhil.benesch@gmail.com>\r\nDate:   Sat Mar 5 19:50:34 2022 -0500\r\n\r\n    Merge pull request #10883 from benesch/table-unspecial\r\n    \r\n    coord,dataflow: remove special cases for table indexes\r\n```\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11136","id":1163869453,"node_id":"I_kwDOCkIcu85FXz0N","number":11136,"title":"panic: \"timestamp should not go backwards\" with testdrive and --persistent-user-tables","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1771623161,"node_id":"MDU6TGFiZWwxNzcxNjIzMTYx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-persistence","name":"A-persistence","color":"5fefa7","default":false,"description":"Area: persistence of (meta)data"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-09T12:20:24Z","updated_at":"2022-03-09T15:22:03Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nv0.22.1-dev (95905bb1b)\r\n\r\n### How did you install Materialize?\r\n\r\nDocker image\r\n\r\n### What was the issue?\r\n\r\nNightly testdrive with `--persistent-user-tables` has failed:\r\n\r\nhttps://buildkite.com/materialize/nightlies/builds/718#76fd38e9-cb99-4175-85ce-60298226316e\r\n\r\nNote that this is the less-strict form of the assertion, that is, the timestamps are not equal to one another but are spaced apart by 1 timestamp-interval minus 1ms\r\n\r\n```\r\nmaterialized_1     | 2022-03-08T12:48:05.854898Z ERROR panic: timestamp should not go backwards, but 1646743684200 < 1646743684299\r\nmaterialized_1     | thread: timely:work-1\r\nmaterialized_1     | location: src/dataflow/src/source/timestamp.rs:202:13\r\nmaterialized_1     | version: 0.22.1-dev (95905bb1bf021f0b8349df42b32447c9b3a7e73f)\r\nmaterialized_1     | backtrace:\r\nmaterialized_1     |    0: materialized::handle_panic\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/materialized/src/bin/materialized/main.rs:937:21\r\nmaterialized_1     |    1: core::ops::function::Fn::call\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/ops/function.rs:70:5\r\nmaterialized_1     |    2: std::panicking::rust_panic_with_hook\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:610:17\r\nmaterialized_1     |    3: std::panicking::begin_panic_handler::{{closure}}\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:502:13\r\nmaterialized_1     |    4: std::sys_common::backtrace::__rust_end_short_backtrace\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/sys_common/backtrace.rs:139:18\r\nmaterialized_1     |    5: rust_begin_unwind\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:498:5\r\nmaterialized_1     |    6: core::panicking::panic_fmt\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/panicking.rs:116:14\r\nmaterialized_1     |    7: mz_dataflow::source::timestamp::TimestampBindingBox::add_binding\r\nmaterialized_1     |    8: mz_dataflow::source::timestamp::TimestampBindingBox::update_timestamp\r\nmaterialized_1     |       mz_dataflow::source::timestamp::TimestampBindingRc::update_timestamp\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/dataflow/src/source/timestamp.rs:579:9\r\nmaterialized_1     |    9: mz_dataflow::server::storage_state::ActiveStorageState<A,B>::update_rt_timestamps\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/dataflow/src/server/storage_state.rs:472:13\r\nmaterialized_1     |       mz_dataflow::server::Worker<A,SC,CR>::run\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/dataflow/src/server.rs:273:13\r\nmaterialized_1     |   10: mz_dataflow::server::serve_boundary::{{closure}}\r\nmaterialized_1     |              at var/lib/buildkite-agent/builds/buildkite-builders-d43b1b5-i-03dfbfdb5d6d87ce5-1/materialize/tests/src/dataflow/src/server.rs:163:9\r\nmaterialized_1     |       timely::execute::execute::{{closure}}\r\nmaterialized_1     |              at cargo/git/checkouts/timely-dataflow-4c0cc365061cd263/4db679a/timely/src/execute.rs:285:22\r\nmaterialized_1     |       timely_communication::initialize::initialize_from::{{closure}}\r\nmaterialized_1     |              at cargo/git/checkouts/timely-dataflow-4c0cc365061cd263/4db679a/communication/src/initialize.rs:316:33\r\nmaterialized_1     |       std::sys_common::backtrace::__rust_begin_short_backtrace\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/sys_common/backtrace.rs:123:18\r\nmaterialized_1     |   11: std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/thread/mod.rs:477:17\r\nmaterialized_1     |       <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/panic/unwind_safe.rs:271:9\r\nmaterialized_1     |       std::panicking::try::do_call\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:406:40\r\nmaterialized_1     |       std::panicking::try\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:370:19\r\nmaterialized_1     |       std::panic::catch_unwind\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panic.rs:133:14\r\nmaterialized_1     |       std::thread::Builder::spawn_unchecked::{{closure}}\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/thread/mod.rs:476:30\r\nmaterialized_1     |       core::ops::function::FnOnce::call_once{{vtable.shim}}\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/ops/function.rs:227:5\r\nmaterialized_1     |   12: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/alloc/src/boxed.rs:1854:9\r\nmaterialized_1     |       <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/alloc/src/boxed.rs:1854:9\r\nmaterialized_1     |       std::sys::unix::thread::Thread::new::thread_start\r\nmaterialized_1     |              at rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/sys/unix/thread.rs:108:17\r\nmaterialized_1     |   13: start_thread\r\nmaterialized_1     |   14: clone\r\nmaterialized_1     | \r\n```\r\n\r\n### Relevant log output\r\n\r\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11133","id":1163706824,"node_id":"I_kwDOCkIcu85FXMHI","number":11133,"title":"coord: fix cancel peek with clusters","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":3908056952,"node_id":"LA_kwDOCkIcu87o8Dd4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-platform","name":"A-platform","color":"5fefa7","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T09:41:51Z","updated_at":"2022-03-09T09:41:51Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The coordinator's tracking of pending peeks needs to become cluster aware. There's an implementation in @sploiselle/my WIP branch that can be stolen here: https://github.com/MaterializeInc/materialize/compare/MaterializeInc:74d4dc1...benesch:c3eaa4d#","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11133/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11132","id":1163667890,"node_id":"PR_kwDOCkIcu840KHo5","number":11132,"title":"Attempt to wire up materialized with remote compute","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-03-09T09:04:29Z","updated_at":"2022-03-09T22:01:33Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11132","html_url":"https://github.com/MaterializeInc/materialize/pull/11132","diff_url":"https://github.com/MaterializeInc/materialize/pull/11132.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11132.patch","merged_at":null},"body":"~Do not merge.~ Idk could merge.\r\n\r\nAttempt to have `materialized` serve two flavors of dataflow server: either a \"conventional\" single process server that uses an in-process event-link boundary between Storage and Compute, or a server that uses TCP for the boundary and which responds to `create_instance` commands to remote instances by attempting a connection.\r\n\r\n### Motivation\r\n\r\nAllow platform experimentation.\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11131","id":1163653636,"node_id":"I_kwDOCkIcu85FW_IE","number":11131,"title":"sql: cluster tracking issue","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T08:49:23Z","updated_at":"2022-03-10T13:42:43Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"This is a tracking issue for the SQL changes required to support clusters.\r\n\r\nDesign doc: https://github.com/MaterializeInc/materialize/blob/main/doc%2Fdeveloper%2Fdesign%2F20220214_create_cluster.md#cluster-sql-syntax-and-semantics\r\n\r\nOutstanding work:\r\n\r\n * [x] #11126\r\n * [x] #11127\r\n * [x] #11128\r\n * [ ] #11129\r\n * [ ] #11130\r\n * [ ] #11133\r\n\r\n@sploiselle I figured I'd file this up so you can work on these slash farm them out as you like! The only one that's sort of urgent is #11127—would be nice to be able to exercise the `drop_compute_instance` code path. Everything else is cosmetic.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11131/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11130","id":1163651127,"node_id":"I_kwDOCkIcu85FW-g3","number":11130,"title":"sql: convert cluster IDs back to names in `SHOW CREATE INDEX`","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":3908056952,"node_id":"LA_kwDOCkIcu87o8Dd4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-platform","name":"A-platform","color":"5fefa7","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-09T08:46:36Z","updated_at":"2022-03-09T13:48:02Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"#11126 is likely to land with an ugly defect in `SHOW CREATE INDEX`:\r\n\r\n    CREATE INDEX foo IN CLUSTER [1] ON table (col)\r\n\r\nWe need to unresolve that ID back into a cluster name when we go to print the statement.\r\n\r\n@jkosh44, perhaps you'd like to pick this one up as part of your name resolution work?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11129","id":1163648842,"node_id":"I_kwDOCkIcu85FW99K","number":11129,"title":"Add `cluster_id` to `mz_indexes` and `mz_sinks`","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":3908056952,"node_id":"LA_kwDOCkIcu87o8Dd4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-platform","name":"A-platform","color":"5fefa7","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T08:44:06Z","updated_at":"2022-03-09T08:44:06Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nSee: https://github.com/MaterializeInc/materialize/blob/main/doc%2Fdeveloper%2Fdesign%2F20220214_create_cluster.md#system-catalog-changes\r\n\r\nThis task should also include updating `SHOW INDEXES` and `SHOW SINKS` to display the cluster name, and add the `IN CLUSTER` filter clause.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11129/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11128","id":1163647778,"node_id":"I_kwDOCkIcu85FW9si","number":11128,"title":"sql: support `SHOW CLUSTERS`","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T08:42:54Z","updated_at":"2022-03-09T08:42:54Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nSee: https://github.com/MaterializeInc/materialize/blob/main/doc%2Fdeveloper%2Fdesign%2F20220214_create_cluster.md#cluster-sql-syntax-and-semantics","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11128/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11123","id":1163392271,"node_id":"I_kwDOCkIcu85FV_UP","number":11123,"title":"catalog: reconsider `i64` as ID type","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"},{"id":3908815277,"node_id":"LA_kwDOCkIcu87o-8mt","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/M-platform-blocker","name":"M-platform-blocker","color":"A71B80","default":false,"description":"Issue that will hold back shipping Materialize Platform"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-09T01:39:47Z","updated_at":"2022-03-09T01:40:04Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Databases, schemas, and (soon) compute instances use `i64` as their ID type. These would more properly be `u64`s, but due to a SQLite limitation they are presently `i64`s. We should reconsider this decision before committing to it.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11123/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11117","id":1163179663,"node_id":"PR_kwDOCkIcu840Ifin","number":11117,"title":"WIP persist apiv2 impl prototype","user":{"login":"danhhz","id":52528,"node_id":"MDQ6VXNlcjUyNTI4","avatar_url":"https://avatars.githubusercontent.com/u/52528?v=4","gravatar_id":"","url":"https://api.github.com/users/danhhz","html_url":"https://github.com/danhhz","followers_url":"https://api.github.com/users/danhhz/followers","following_url":"https://api.github.com/users/danhhz/following{/other_user}","gists_url":"https://api.github.com/users/danhhz/gists{/gist_id}","starred_url":"https://api.github.com/users/danhhz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danhhz/subscriptions","organizations_url":"https://api.github.com/users/danhhz/orgs","repos_url":"https://api.github.com/users/danhhz/repos","events_url":"https://api.github.com/users/danhhz/events{/privacy}","received_events_url":"https://api.github.com/users/danhhz/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-08T21:53:53Z","updated_at":"2022-03-10T23:47:29Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11117","html_url":"https://github.com/MaterializeInc/materialize/pull/11117","diff_url":"https://github.com/MaterializeInc/materialize/pull/11117.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11117.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11116","id":1163176906,"node_id":"PR_kwDOCkIcu840IfGs","number":11116,"title":"persist: disallow empty trace batch parts","user":{"login":"ruchirK","id":4015012,"node_id":"MDQ6VXNlcjQwMTUwMTI=","avatar_url":"https://avatars.githubusercontent.com/u/4015012?v=4","gravatar_id":"","url":"https://api.github.com/users/ruchirK","html_url":"https://github.com/ruchirK","followers_url":"https://api.github.com/users/ruchirK/followers","following_url":"https://api.github.com/users/ruchirK/following{/other_user}","gists_url":"https://api.github.com/users/ruchirK/gists{/gist_id}","starred_url":"https://api.github.com/users/ruchirK/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruchirK/subscriptions","organizations_url":"https://api.github.com/users/ruchirK/orgs","repos_url":"https://api.github.com/users/ruchirK/repos","events_url":"https://api.github.com/users/ruchirK/events{/privacy}","received_events_url":"https://api.github.com/users/ruchirK/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-08T21:51:38Z","updated_at":"2022-03-09T19:58:21Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11116","html_url":"https://github.com/MaterializeInc/materialize/pull/11116","diff_url":"https://github.com/MaterializeInc/materialize/pull/11116.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11116.patch","merged_at":null},"body":"This commit introduces a new invariant that trace batch parts cannot be empty.\r\nPreviously, empty trace batch parts were used to denote empty trace batches. Now,\r\nthere's only one way to represent that: with an empty list of keys.\r\n\r\nThis commit also bumps the encoding version and corresponding golden and upgrade\r\ntests.\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11109","id":1162959607,"node_id":"I_kwDOCkIcu85FUVr3","number":11109,"title":"Combine `SHOW CREATE INDEX` and `pg_get_indexdef` implementations","user":{"login":"jkosh44","id":10800303,"node_id":"MDQ6VXNlcjEwODAwMzAz","avatar_url":"https://avatars.githubusercontent.com/u/10800303?v=4","gravatar_id":"","url":"https://api.github.com/users/jkosh44","html_url":"https://github.com/jkosh44","followers_url":"https://api.github.com/users/jkosh44/followers","following_url":"https://api.github.com/users/jkosh44/following{/other_user}","gists_url":"https://api.github.com/users/jkosh44/gists{/gist_id}","starred_url":"https://api.github.com/users/jkosh44/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkosh44/subscriptions","organizations_url":"https://api.github.com/users/jkosh44/orgs","repos_url":"https://api.github.com/users/jkosh44/repos","events_url":"https://api.github.com/users/jkosh44/events{/privacy}","received_events_url":"https://api.github.com/users/jkosh44/received_events","type":"User","site_admin":false},"labels":[{"id":1244583500,"node_id":"MDU6TGFiZWwxMjQ0NTgzNTAw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/D-good%20first%20issue","name":"D-good first issue","color":"eac638","default":false,"description":"Difficulty: Good for newcomers"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-08T18:01:36Z","updated_at":"2022-03-08T18:01:36Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"<!-- Contributor use only. -->\r\nIn #10980 I added support for the `pg_get_index` function which recreates the command used to create the index. I was not aware that [`SHOW CREATE INDEX`](https://materialize.com/docs/sql/show-create-index/) already existed with the same functionality. Ideally the `pg_get_indexdef` implementation should be refactored to re-use the `SHOW CREATE INDEX` implementation.\r\n\r\nNote: `pg_get_indexdef` adds the `USING <index-type>` syntax to the output to match PostgreSQL behavior and so that the meta-command `\\d <object>` can properly parse the output. `SHOW CREATE INDEX` does not contain this syntax in the output currently. Since Materialize only supports a single index type, it's valid syntax to include `USING arrangement` when creating an index, but it's ignored. I think this output should be added to `SHOW CREATE INDEX`, still it's something to consider.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11109/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11105","id":1162843742,"node_id":"PR_kwDOCkIcu840HYkH","number":11105,"title":"docs:tail new features","user":{"login":"joacoc","id":11491779,"node_id":"MDQ6VXNlcjExNDkxNzc5","avatar_url":"https://avatars.githubusercontent.com/u/11491779?v=4","gravatar_id":"","url":"https://api.github.com/users/joacoc","html_url":"https://github.com/joacoc","followers_url":"https://api.github.com/users/joacoc/followers","following_url":"https://api.github.com/users/joacoc/following{/other_user}","gists_url":"https://api.github.com/users/joacoc/gists{/gist_id}","starred_url":"https://api.github.com/users/joacoc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joacoc/subscriptions","organizations_url":"https://api.github.com/users/joacoc/orgs","repos_url":"https://api.github.com/users/joacoc/repos","events_url":"https://api.github.com/users/joacoc/events{/privacy}","received_events_url":"https://api.github.com/users/joacoc/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-08T16:10:15Z","updated_at":"2022-03-08T21:56:20Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11105","html_url":"https://github.com/MaterializeInc/materialize/pull/11105","diff_url":"https://github.com/MaterializeInc/materialize/pull/11105.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11105.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n**Try to improve how TAIL is perceived and what is capable to do.**\r\n\r\nSince `TAIL` now has `SNAPSHOT` enabled by default and is now able to stream updates from an arbitrary `SELECT` statement, it makes easier to experience what is possible to acchieve. \r\n\r\nAs a side effect:\r\n* Doing `tail table` becomes a shorthand for `tail (select * from table)` \r\n* Using a `tail` by default will `query` (Snapshot) and `stream` updates.\r\n\r\nObjectives:\r\n* Setting the focus in the feature `tail (statement)` rather than `tail object`\r\n* Turning examples into plug & play\r\n* Add more languages examples: PHP and JAVA.  [GO Pending]\r\n* Help troubleshoot how many TAILS are currently running in Materialize\r\n* Guidethrough on how to use `AS OF` with `TAIL`\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11105/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11103","id":1162756926,"node_id":"PR_kwDOCkIcu840HGM9","number":11103,"title":"Command reconciliation","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-08T14:56:42Z","updated_at":"2022-03-10T18:35:38Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11103","html_url":"https://github.com/MaterializeInc/materialize/pull/11103","diff_url":"https://github.com/MaterializeInc/materialize/pull/11103.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11103.patch","merged_at":null},"body":"Add a client that reconciles commands from the ADAPTER to COMPUTE/STORAGE.\r\n\r\nThis is a work-in-progress.\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11100","id":1162710540,"node_id":"I_kwDOCkIcu85FTY4M","number":11100,"title":"creating a source from a kafka topic generated by debezium + transforms (logical table)","user":{"login":"docteurklein","id":109846,"node_id":"MDQ6VXNlcjEwOTg0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/109846?v=4","gravatar_id":"","url":"https://api.github.com/users/docteurklein","html_url":"https://github.com/docteurklein","followers_url":"https://api.github.com/users/docteurklein/followers","following_url":"https://api.github.com/users/docteurklein/following{/other_user}","gists_url":"https://api.github.com/users/docteurklein/gists{/gist_id}","starred_url":"https://api.github.com/users/docteurklein/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/docteurklein/subscriptions","organizations_url":"https://api.github.com/users/docteurklein/orgs","repos_url":"https://api.github.com/users/docteurklein/repos","events_url":"https://api.github.com/users/docteurklein/events{/privacy}","received_events_url":"https://api.github.com/users/docteurklein/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-03-08T14:16:36Z","updated_at":"2022-03-11T09:18:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.22.0\n\n### How did you install Materialize?\n\nDocker image\n\n### What was the issue?\n\nthe avro registry doesn't seem to include the extra key added by debezium `ByLogicalTableRouter` transformer (https://debezium.io/documentation/reference/1.8/transformations/topic-routing.html#_ensure_unique_key).\r\n\r\nHere is my debezium connector config:\r\n```\r\ncurl --request POST --url 0:8083/connectors --header 'Content-Type: application/json' --data @- << EOF\r\n{\r\n  \"name\": \"$1\",\r\n  \"config\": {\r\n    \"connector.class\": \"io.debezium.connector.mysql.MySqlConnector\",\r\n    \"tasks.max\": \"1\",\r\n    \"database.hostname\": \"mysql\",\r\n    \"database.port\": \"3306\",\r\n    \"database.user\": \"root\",\r\n    \"database.password\": \"root\",\r\n    \"database.server.name\": \"$1\",\r\n    \"database.include.list\": \"$1\",\r\n    \"database.history.kafka.bootstrap.servers\": \"redpanda:9092\",\r\n    \"database.history.kafka.topic\": \"schema-changes.$1\",\r\n    \"database.allowPublicKeyRetrieval\": true,\r\n    \"transforms\": \"Reroute\",\r\n    \"transforms.Reroute.type\": \"io.debezium.transforms.ByLogicalTableRouter\",\r\n    \"transforms.Reroute.topic.regex\": \"^$1\\\\\\.$1\\\\\\.(.*)$\",\r\n    \"transforms.Reroute.topic.replacement\": \"all_pim.\\$1\",\r\n    \"transforms.Reroute.key.field.name\": \"tenant\",\r\n    \"transforms.Reroute.key.field.regex\": \".*\",\r\n    \"transforms.Reroute.key.field.replacement\": \"$1\"\r\n  }\r\n}\r\nEOF\r\n\r\n```\r\n\r\nWhen I try to create a source from it, it fails about a lacking key: \r\n```\r\ncreate source all_pim.product\r\n  from kafka broker 'redpanda:9092'\r\n  topic 'all_pim.pim_catalog_product'\r\n  format avro\r\n  using confluent schema registry 'http://redpanda:8081'\r\n  envelope debezium\r\n;\r\nERROR:  Value schema missing primary key column: tenant\r\n```\r\n\r\nAm I missing something?\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11097","id":1162500008,"node_id":"I_kwDOCkIcu85FSleo","number":11097,"title":"Introduce a headless controller to enable COMPUTE development without waiting for ADAPTER","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":1465753202,"node_id":"MDU6TGFiZWwxNDY1NzUzMjAy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dataflow","name":"A-dataflow","color":"5fefa7","default":false,"description":"Area: dataflow"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-08T10:44:30Z","updated_at":"2022-03-08T10:44:30Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nCurrently, all features provided by COMPUTE need a corresponding implementation within ADAPTER to expose them to users and testing. This limits the speed at which COMPUTE features can be developed and tested.\r\n\r\nFor this reason, it would be good to introduce a headless controller that receives inputs using the same protocol that ADAPTER speaks but which would allow us to rapidly test COMPUTE's features.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11097/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11096","id":1162357204,"node_id":"I_kwDOCkIcu85FSCnU","number":11096,"title":"feature-benchmark: Allow detection of progressive slowdowns during the execution of a single scenario","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1467666356,"node_id":"MDU6TGFiZWwxNDY3NjY2MzU2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/D-good%20second%20issue","name":"D-good second issue","color":"eac638","default":false,"description":"Difficulty: Good for a newcomer who's warmed up"},{"id":1741965254,"node_id":"MDU6TGFiZWwxNzQxOTY1MjU0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-testing","name":"T-testing","color":"695bd3","default":false,"description":"Theme: tests or test infrastructure"}],"state":"open","locked":false,"assignee":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"assignees":[{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-03-08T08:21:48Z","updated_at":"2022-03-08T08:35:55Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Goal(s)\n\nIn https://github.com/MaterializeInc/materialize/issues/11071 we had a situation where a scenario was getting progressively slower between individual measurements. Since the feature benchmark framework takes the minimum measurement, this gradual degradation was not visible until the logs were manually reviewed.\r\n\r\nTo catch such situations in the future we could do one of the following:\r\n1. the `min` strategy can be replaced with a more conventional benchmark measurement using the average, percentiles, outlier removal, etc. A scenario that is getting progressively slower would have scored badly on such a measurement and a regression would have been signaled.\r\n2. we could keep the `min` strategy and add a follow-up check for performance degradation. We can collect all the measurements and pass them through a linear regression library. The slope of the line that is thus produced will tell us if there is an ongoing slowdown or not.\r\n\r\nThe advantage of doing No 2 is that the existing feature benchmark will be minimally perturbed so that there is no long followup stabilization period that will come from changing the measurement strategy.\n\n### Steps\n\n1. Pick a python library that does linear regression\r\n2. Implement an aggregator that accumulates the measurements and reports the slope of the linear function\r\n3. Figure out a way to signal failure for a particular scenario if the angle of the slope is steeper than some degree.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11096/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11087","id":1161967655,"node_id":"I_kwDOCkIcu85FQjgn","number":11087,"title":"Relax logical compaction to source frequency","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-07T21:57:41Z","updated_at":"2022-03-07T21:57:41Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nOur logical compaction is \"aggressive\" in that it uses 1ms as permission to compact. When a collection ticks at a coarser frequency, say once per second, this compaction leaves us with a collection that is unusable for a second: the `upper` ticks forward by one second, and compaction announces \"render it invalid until that next second minus one millisecond\".\r\n\r\nWe could fix this by having the minimum compaction for a source be a known lower bound on the frequency with which it ticks. If a source ticks once per second, the minimum compaction should be one second.\r\n\r\ncc: @mjibson who is regularly frustrated by this.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11087/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11085","id":1161829470,"node_id":"I_kwDOCkIcu85FQBxe","number":11085,"title":"[kafka resumption tests] Enable toxiproxy-timeout-hold.td error mode","user":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":2187378159,"node_id":"MDU6TGFiZWwyMTg3Mzc4MTU5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sink","name":"A-sink","color":"5fefa7","default":false,"description":"Area: sinks"}],"state":"open","locked":false,"assignee":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"assignees":[{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-03-07T19:25:01Z","updated_at":"2022-03-07T19:25:01Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nmaster\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nWe should enable this.  It currently sometimes fails so it's not reliable enough to be a part of the blocking CI suite.\r\n\r\nI don't believe this to be a correctness issue because we do fail with a fatal error if this occurs -- the sink is just hosed.  So the UX is not ideal but correctness is not an issue as far as I can tell.\r\n\r\nHere's an example failure: https://buildkite.com/materialize/tests/builds/29568#ab6fdea4-29bd-498b-9cb9-8744a99a81e8\n\n### Relevant log output\n\n```source\nmaterialized_1     | 2022-02-25T22:08:06.183479Z  INFO mz_coord::catalog: create sink materialize.public.output (u6)\r\nmaterialized_1     | 2022-02-25T22:08:11.672458Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:16.673554Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:21.673941Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:26.674894Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:31.675868Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:36.264893Z  INFO librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Disconnected (after 30073ms in state UP)\r\nmaterialized_1     | 2022-02-25T22:08:36.264982Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: Disconnected (after 30073ms in state UP)\r\nmaterialized_1     | 2022-02-25T22:08:36.676654Z  INFO mz_dataflow::sink::kafka: Retriable error in kafka sink: RDKafkaError(Failed to flush all outstanding messages within the transaction timeout: 1 message(s) remaining)\r\nmaterialized_1     | 2022-02-25T22:08:40.190312Z  WARN librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Disconnected (after 33999ms in state UP)\r\nmaterialized_1     | 2022-02-25T22:08:40.190393Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: Disconnected (after 33999ms in state UP)\r\nmaterialized_1     | 2022-02-25T22:08:50.262868Z  INFO librdkafka: REQTMOUT [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Timed out ApiVersionRequest in flight (after 10072ms, timeout #0)\r\nmaterialized_1     | 2022-02-25T22:08:50.262961Z  WARN librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: ApiVersionRequest failed: Local: Timed out: probably due to broker version < 0.10 (see api.version.request configuration) (after 10072ms in state APIVERSION_QUERY)\r\nmaterialized_1     | 2022-02-25T22:08:50.263000Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: ApiVersionRequest failed: Local: Timed out: probably due to broker version < 0.10 (see api.version.request configuration) (after 10072ms in state APIVERSION_QUERY)\r\nmaterialized_1     | 2022-02-25T22:08:50.263055Z  WARN librdkafka: REQTMOUT [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Timed out 1 in-flight, 0 retry-queued, 0 out-queue, 0 partially-sent requests\r\nmaterialized_1     | 2022-02-25T22:09:00.515944Z  INFO librdkafka: REQTMOUT [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Timed out ApiVersionRequest in flight (after 10009ms, timeout #0)\r\nmaterialized_1     | 2022-02-25T22:09:00.516036Z  WARN librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: ApiVersionRequest failed: Local: Timed out: probably due to broker version < 0.10 (see api.version.request configuration) (after 10009ms in state APIVERSION_QUERY, 1 identical error(s) suppressed)\r\nmaterialized_1     | 2022-02-25T22:09:00.516109Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: ApiVersionRequest failed: Local: Timed out: probably due to broker version < 0.10 (see api.version.request configuration) (after 10009ms in state APIVERSION_QUERY, 1 identical error(s) suppressed)\r\nmaterialized_1     | 2022-02-25T22:09:00.516147Z  WARN librdkafka: REQTMOUT [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Timed out 1 in-flight, 0 retry-queued, 0 out-queue, 0 partially-sent requests\r\nmaterialized_1     | 2022-02-25T22:09:07.340075Z  INFO librdkafka: FAIL [thrd:toxiproxy:9093/bootstrap]: toxiproxy:9093/bootstrap: Disconnected while requesting ApiVersion: might be caused by incorrect security.protocol configuration (connecting to a SSL listener?) or broker version is < 0.10 (see api.version.request) (after 5766ms in state APIVERSION_QUERY)\r\nmaterialized_1     | 2022-02-25T22:09:07.340125Z ERROR mz_kafka_util::client: librdkafka: Global error: BrokerTransportFailure (Local: Broker transport failure): toxiproxy:9093/bootstrap: Disconnected while requesting ApiVersion: might be caused by incorrect security.protocol configuration (connecting to a SSL listener?) or broker version is < 0.10 (see api.version.request) (after 5766ms in state APIVERSION_QUERY)\r\nmaterialized_1     | 2022-02-25T22:09:07.486988Z ERROR mz_dataflow_types::client::controller::compute: COMPUTE::allow_compaction attempted frontier regression for id Transient(54): Antichain { elements: [] } to Antichain { elements: [1645826947440] }\r\nmaterialized_1     | 2022-02-25T22:09:10.798491Z  INFO mz_coord::catalog: drop sink materialize.public.output (u6)\r\n```\n```\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11085/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11084","id":1161791408,"node_id":"PR_kwDOCkIcu840D6sG","number":11084,"title":"Expand formalism docs","user":{"login":"aphyr","id":3748,"node_id":"MDQ6VXNlcjM3NDg=","avatar_url":"https://avatars.githubusercontent.com/u/3748?v=4","gravatar_id":"","url":"https://api.github.com/users/aphyr","html_url":"https://github.com/aphyr","followers_url":"https://api.github.com/users/aphyr/followers","following_url":"https://api.github.com/users/aphyr/following{/other_user}","gists_url":"https://api.github.com/users/aphyr/gists{/gist_id}","starred_url":"https://api.github.com/users/aphyr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aphyr/subscriptions","organizations_url":"https://api.github.com/users/aphyr/orgs","repos_url":"https://api.github.com/users/aphyr/repos","events_url":"https://api.github.com/users/aphyr/events{/privacy}","received_events_url":"https://api.github.com/users/aphyr/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-07T18:46:30Z","updated_at":"2022-03-10T22:05:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11084","html_url":"https://github.com/MaterializeInc/materialize/pull/11084","diff_url":"https://github.com/MaterializeInc/materialize/pull/11084.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11084.patch","merged_at":null},"body":"This rewrites and expands the developer platform formalism docs up to the storage & compute layer discussion. It begins with a quick sketch of the entire document, introduces new terms and properties for implicit concepts, adds a diagram to help clarify the way that frontiers bound pTVC times, uses partial orders for times throughout, decouples time-function from update-set representations of TVCs and partial TVCs, discusses compacting and appending to pTVCs and gestures vaguely in the direction of those transformations' correctness, and makes immutability/mutability and modeled vs real time explicit.\r\n\r\n### Motivation\r\n\r\nThis PR aims to help make the formalism docs more approachable for new readers.\r\n\r\n### Tips for reviewer\r\n\r\nSeveral things in this rewrite I've guessed at or come up with names from scratch, so I'd appreciate detailed review!\r\n\r\nSee the rich markdown diff view!\r\n\r\n### Testing\r\n\r\nThere are no code changes required\r\n\r\n### Release notes\r\n\r\nThere are no user-facing changes, other than documentation.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11081","id":1161644017,"node_id":"I_kwDOCkIcu85FPUfx","number":11081,"title":"Validate order of correlated quantifiers.","user":{"login":"wangandi","id":5522362,"node_id":"MDQ6VXNlcjU1MjIzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/5522362?v=4","gravatar_id":"","url":"https://api.github.com/users/wangandi","html_url":"https://github.com/wangandi","followers_url":"https://api.github.com/users/wangandi/followers","following_url":"https://api.github.com/users/wangandi/following{/other_user}","gists_url":"https://api.github.com/users/wangandi/gists{/gist_id}","starred_url":"https://api.github.com/users/wangandi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wangandi/subscriptions","organizations_url":"https://api.github.com/users/wangandi/orgs","repos_url":"https://api.github.com/users/wangandi/repos","events_url":"https://api.github.com/users/wangandi/events{/privacy}","received_events_url":"https://api.github.com/users/wangandi/received_events","type":"User","site_admin":false},"labels":[{"id":2339219515,"node_id":"MDU6TGFiZWwyMzM5MjE5NTE1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/needs-details","name":"needs-details","color":"F9D0C4","default":false,"description":"Needs more details before work proceeds"},{"id":2456706162,"node_id":"MDU6TGFiZWwyNDU2NzA2MTYy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/needs-discussion","name":"needs-discussion","color":"F9D0C4","default":false,"description":"Requires discussion before work proceeds"},{"id":3020087139,"node_id":"MDU6TGFiZWwzMDIwMDg3MTM5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-optimization","name":"A-optimization","color":"5fefa7","default":false,"description":"Area: query optimization and transformation"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-07T16:28:18Z","updated_at":"2022-03-07T17:51:58Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"See discussion at https://github.com/MaterializeInc/materialize/pull/10901#discussion_r819167043 and https://github.com/MaterializeInc/materialize/pull/10901#discussion_r819153981.\r\n\r\nCurrently, a Query Graph Model is structured such that post-order visitation will visit the input box of a particular quantifier `Qi` before the input box of the correlated quantifier `Qj` that depends on it. This is quite convenient because it means that we know that attributes have already been computed for `Qi` when we are trying to perform an operation on `Qj`.\r\n\r\nWe should ensure that the structure preserves this property as we add more features to QGM by adding a constraint to the QGM validator.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11081/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11078","id":1161522016,"node_id":"I_kwDOCkIcu85FO2tg","number":11078,"title":"Refactor `Client` trait into independent stream and sink.","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[{"id":1465753202,"node_id":"MDU6TGFiZWwxNDY1NzUzMjAy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dataflow","name":"A-dataflow","color":"5fefa7","default":false,"description":"Area: dataflow"},{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-07T14:51:55Z","updated_at":"2022-03-07T14:51:55Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The `Client` trait serves as a well-defined boundary between the coordinator and dataflow layer. It allows sending commands and receiving responses:\r\n```\r\n/// A client to a running dataflow server.\r\n#[async_trait(?Send)]\r\npub trait Client<T = mz_repr::Timestamp> {\r\n    /// Sends a command to the dataflow server.\r\n    ///\r\n    /// The command can error for various reasons.\r\n    async fn send(&mut self, cmd: Command<T>) -> Result<(), anyhow::Error>;\r\n\r\n    /// Receives the next response from the dataflow server.\r\n    ///\r\n    /// This method blocks until the next response is available, or, if the\r\n    /// dataflow server has been shut down, returns `None`.\r\n    async fn recv(&mut self) -> Option<Response<T>>;\r\n}\r\n```\r\n\r\nWe could refactor the code to work on `Stream` and `Sink`, which would avoid the use of the `Client` trait and provide more idiomatic building blocks to compose streams and sinks.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11078/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11076","id":1161510984,"node_id":"PR_kwDOCkIcu840C_EN","number":11076,"title":"sql: move unnest to pg_catalog","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-07T14:42:53Z","updated_at":"2022-03-07T19:42:19Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11076","html_url":"https://github.com/MaterializeInc/materialize/pull/11076","diff_url":"https://github.com/MaterializeInc/materialize/pull/11076.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11076.patch","merged_at":null},"body":"The version of `unnest` that takes arrays as arguments rightly belongs in `pg_catalog`, not `mz_catalog`.\r\n\r\n### Motivation\r\n\r\nThis PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Move `unnest(arrayany)` to the `pg_catalog` schema. Previously, it had unintentionally been in the `mz_catalog` schema.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11076/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11072","id":1161298980,"node_id":"I_kwDOCkIcu85FOAQk","number":11072,"title":"regression: wrong result when joining with an unmaterialized source ","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":2240473760,"node_id":"MDU6TGFiZWwyMjQwNDczNzYw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-correctness","name":"T-correctness","color":"695bd3","default":false,"description":"Theme: relates to consistency and correctness of results."},{"id":3052793141,"node_id":"MDU6TGFiZWwzMDUyNzkzMTQx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/P1","name":"P1","color":"d10000","default":false,"description":"Priority: critical issue, panic, etc. drop what you're doing and fix immediately"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-03-07T11:33:39Z","updated_at":"2022-03-11T00:01:58Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nv0.22.1-dev (9611cc695)\r\n\r\n### How did you install Materialize?\r\n\r\nDocker image\r\n\r\n### What was the issue?\r\n\r\nThe `joins.td` test fails repeatably as follows:\r\n\r\n```\r\n> CREATE SOURCE mods_unmat FROM KAFKA BROKER 'kafka:9092' TOPIC 'testdrive-mods-3568222347' FORMAT AVRO USING SCHEMA '{   \"type\": \"record\",   \"name\": \"envelope\",   \"fields\": [     {       \"name\": \"before\",       \"type\": [         {           \"name\": \"row\",           \"type\": \"record\",           \"fields\": [             {\"name\": \"num\", \"type\": \"long\"},             {\"name\": \"mod\", \"type\": \"string\"}           ]         },         \"null\"       ]     },     { \"name\": \"after\", \"type\": [\"row\", \"null\"] }   ] }' ENVELOPE DEBEZIUM\r\n--\r\n  | rows match; continuing at ts 1646637643.033189\r\n  | > CREATE VIEW test15 (names_num, names_name, mods_num, mods_mod) AS SELECT * FROM names FULL OUTER JOIN mods_unmat ON 1 = 0;\r\n  | rows match; continuing at ts 1646637643.0903223\r\n  | > SELECT * FROM test15;\r\n  | rows didn't match; sleeping to see if dataflow catches up 50ms 75ms 112ms 169ms 253ms 380ms 570ms 854ms 1s 2s 3s 4s 6s 10s 893ms\r\n  | joins.td:237:1: error: non-matching rows: expected:\r\n  | [[\"1\", \"one\", \"<null>\", \"<null>\"], [\"2\", \"two\", \"<null>\", \"<null>\"], [\"3\", \"three\", \"<null>\", \"<null>\"], [\"<null>\", \"<null>\", \"0\", \"even\"], [\"<null>\", \"<null>\", \"1\", \"odd\"], [\"<null>\", \"<null>\", \"2\", \"even\"]]\r\n  | got:\r\n  | [[\"1\", \"one\", \"<null>\", \"<null>\"], [\"2\", \"two\", \"<null>\", \"<null>\"], [\"3\", \"three\", \"<null>\", \"<null>\"]]\r\n  | Diff:\r\n  | row missing: [\"<null>\", \"<null>\", \"0\", \"even\"]\r\n  | row missing: [\"<null>\", \"<null>\", \"1\", \"odd\"]\r\n  | row missing: [\"<null>\", \"<null>\", \"2\", \"even\"]\r\n  |  \r\n  | \\|\r\n  | 236 \\|\r\n  | 237 \\| > SELECT * FROM test15;\r\n  | \\| ^\r\n\r\n```\r\n\r\nThe failure is:\r\n- permanent, that is, the result never becomes correct no matter the timeout/retries\r\n- goes away if the source is dropped and recreated\r\n\r\nThis is seen both on the `--workers 1` and the `cluster` Nightly tests. I am able to reproduce it by running the following loop on a `c5.2xlarge` machine:\r\n\r\n```\r\n while bash -c -e \"./mzcompose down -v ; ./mzcompose run default --workers 1 joins.td\" ; do : ; done\r\n```\r\n\r\nBisection reports the following commit:\r\n\r\n```\r\n3af43e25388609cb43b7ab352ffe03d34f89d552 is the first bad commit\r\ncommit 3af43e25388609cb43b7ab352ffe03d34f89d552\r\nAuthor: Nikhil Benesch <nikhil.benesch@gmail.com>\r\nDate:   Sat Mar 5 14:53:30 2022 -0500\r\n\r\n    coord: allow SELECTing from unmaterialized sources\r\n```\r\n\r\n### Relevant log output\r\n\r\n```source\r\nNo errors in the Mz logs.\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11071","id":1161090986,"node_id":"I_kwDOCkIcu85FNNeq","number":11071,"title":"performance regression: UPDATE statements now ~50% slower against user tables","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"assignees":[{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false}],"milestone":null,"comments":17,"created_at":"2022-03-07T08:58:04Z","updated_at":"2022-03-11T07:03:41Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\n3f7aedf33e91b8497c2f1622a4333da15a37de10\r\n\r\n### How did you install Materialize?\r\n\r\nDocker image\r\n\r\n### What was the issue?\r\n\r\nThe `Update` feature benchmark is consistently reporting a performance regression:\r\n\r\n```\r\nUpdate                    \\|       1.606 \\|       1.096 \\|    !!YES!!    \\| 46.5 pct   slower  |  \r\n```\r\n\r\ngit bisect reports the following revision:\r\n\r\n```\r\n3f7aedf33e91b8497c2f1622a4333da15a37de10 is the first bad commit\r\ncommit 3f7aedf33e91b8497c2f1622a4333da15a37de10\r\nMerge: 588a9e720 253c608b1\r\nAuthor: Nikhil Benesch <nikhil.benesch@gmail.com>\r\nDate:   Sat Mar 5 19:50:34 2022 -0500\r\n\r\n    Merge pull request #10883 from benesch/table-unspecial\r\n    \r\n    coord,dataflow: remove special cases for table indexes\r\n\r\n```\r\n\r\nThe feature benchmark reports the **fastest** time the workload could execute in a given revision. There is also the problem that repeated executions of the same workload get progressively slower and slower:\r\n\r\n\r\n```\r\nMeasurement: 1.6061623096466064\r\nMeasurement: 1.9834446907043457\r\nMeasurement: 2.016334056854248\r\nMeasurement: 2.423788547515869\r\nMeasurement: 2.916515827178955\r\n...\r\nMeasurement: 9.298703670501709\r\nMeasurement: 9.861934185028076\r\nMeasurement: 8.153981685638428\r\nMeasurement: 8.687877178192139\r\nMeasurement: 8.837841987609863\r\nMeasurement: 9.046060562133789\r\nMeasurement: 9.261691808700562\r\n```\r\n\r\nWhat is special about the `Update` benchmark workload is that individual measurements operate on the same table without dropping it between measurements. The performance numbers indicate that some cruft is being accumulated in the process, e.g. no compaction is happening or something else long those lines.\r\n\r\n### Relevant log output\r\n\r\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11070","id":1160980116,"node_id":"PR_kwDOCkIcu840BVBm","number":11070,"title":"dataflow-types: beef up IndexDesc and use it more","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-07T06:53:23Z","updated_at":"2022-03-08T11:37:22Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11070","html_url":"https://github.com/MaterializeInc/materialize/pull/11070","diff_url":"https://github.com/MaterializeInc/materialize/pull/11070.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11070.patch","merged_at":null},"body":"Add two additional fields to the `IndexDesc` that are often stashed\r\nalongside it: the ID of the index itself and the type of the relation on\r\nwhich the index is built. The only cost is that the `index_imports`\r\nfield now stores index IDs twice, but that seems like a small price to\r\npay.\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11055","id":1160728279,"node_id":"PR_kwDOCkIcu840AgcI","number":11055,"title":"build(deps): bump parquet2 from 0.8.1 to 0.10.3","user":{"login":"dependabot[bot]","id":49699333,"node_id":"MDM6Qm90NDk2OTkzMzM=","avatar_url":"https://avatars.githubusercontent.com/in/29110?v=4","gravatar_id":"","url":"https://api.github.com/users/dependabot%5Bbot%5D","html_url":"https://github.com/apps/dependabot","followers_url":"https://api.github.com/users/dependabot%5Bbot%5D/followers","following_url":"https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dependabot%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/dependabot%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/dependabot%5Bbot%5D/repos","events_url":"https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/dependabot%5Bbot%5D/received_events","type":"Bot","site_admin":false},"labels":[{"id":1372937472,"node_id":"MDU6TGFiZWwxMzcyOTM3NDcy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dependencies","name":"A-dependencies","color":"5fefa7","default":false,"description":"Area: dependency upgrades"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-06T22:03:58Z","updated_at":"2022-03-07T18:39:27Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11055","html_url":"https://github.com/MaterializeInc/materialize/pull/11055","diff_url":"https://github.com/MaterializeInc/materialize/pull/11055.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11055.patch","merged_at":null},"body":"Bumps parquet2 from 0.8.1 to 0.10.3.\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=parquet2&package-manager=cargo&previous-version=0.8.1&new-version=0.10.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11048","id":1160654783,"node_id":"I_kwDOCkIcu85FLi-_","number":11048,"title":"RT inputs should provide linearizability properties","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-06T16:32:18Z","updated_at":"2022-03-06T16:32:18Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nOur RT sources assign timestamps as they read data, not as soon as they know data exists. For example, `FILE` sources know the length of a file as it is opened, and *could* assign `since` to all of the timestamps for existing offsets. By so doing, all subsequent uses of that source would be certain to have complete data in it.\r\n\r\nThis is a repetition of https://github.com/MaterializeInc/materialize/issues/2310 but with a correctness angle rather than a performance angle. We cannot test RT sources without retries until this is fixed. More fundamentally, this is really a glaring consistency issue: folks look at their data and know that it is there, and then query MZ and it is not reflected yet despite us announcing it as up to date.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11048/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11041","id":1160480349,"node_id":"I_kwDOCkIcu85FK4Zd","number":11041,"title":"coord: build confidence in new transaction handling","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":2314510340,"node_id":"MDU6TGFiZWwyMzE0NTEwMzQw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/M-release-blocker","name":"M-release-blocker","color":"cc0000","default":false,"description":"Critical issue that should block *any* release if not fixed"}],"state":"open","locked":false,"assignee":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"assignees":[{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},{"login":"jkosh44","id":10800303,"node_id":"MDQ6VXNlcjEwODAwMzAz","avatar_url":"https://avatars.githubusercontent.com/u/10800303?v=4","gravatar_id":"","url":"https://api.github.com/users/jkosh44","html_url":"https://github.com/jkosh44","followers_url":"https://api.github.com/users/jkosh44/followers","following_url":"https://api.github.com/users/jkosh44/following{/other_user}","gists_url":"https://api.github.com/users/jkosh44/gists{/gist_id}","starred_url":"https://api.github.com/users/jkosh44/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkosh44/subscriptions","organizations_url":"https://api.github.com/users/jkosh44/orgs","repos_url":"https://api.github.com/users/jkosh44/repos","events_url":"https://api.github.com/users/jkosh44/events{/privacy}","received_events_url":"https://api.github.com/users/jkosh44/received_events","type":"User","site_admin":false},{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false}],"milestone":null,"comments":9,"created_at":"2022-03-06T00:30:52Z","updated_at":"2022-03-11T10:42:41Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"In the interest of making forward progress on platform, @frankmcsherry and I pressed forward with a number of reasonably scary PRs to the coordinator over the weekend. It would be great to get post-merge reviews (or at least quick skims) on the following PRs:\r\n\r\n  * #11019 (@frankmcsherry added)\r\n  * #11035\r\n  * #11036 (@aljoscha you might want to take a look at this one too)\r\n  * #11037\r\n  * #10883 / #11039\r\n  * #11069\r\n\r\nMore PRs may be added over the course of the weekend.\r\n\r\nI'm marking this as a release blocker in an attempt to _relieve_ pressure. I want to make it clear that we won't ship the next release until we've got more consensus that we didn't miss something major in these PRs. We should 100% skip the release this week if y'all need more time to review.\r\n\r\n## Potential regressions\r\n\r\n* [ ] #11071\r\n* [ ] #11072\r\n* [ ] #11137\r\n* [x] #11134\r\n* [ ] #11155","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11032","id":1160051594,"node_id":"I_kwDOCkIcu85FJPuK","number":11032,"title":"sql: add tests for connections that execute multiple peeks simultaneously","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"},{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-03-04T21:05:33Z","updated_at":"2022-03-08T18:49:17Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Add tests for connections that have multiple peeks in flight. While reviewing #11016, we noticed that the existing code would have been wrong if connections could have multiple peeks alive at the same moment, and we believe that's possible via portals.\r\n\r\nMore context: https://github.com/MaterializeInc/materialize/pull/11016#discussion_r819837650\r\n\r\ncc @jkosh44 @mjibson \r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11025","id":1159561977,"node_id":"PR_kwDOCkIcu84z82sN","number":11025,"title":"Design document for the Zippy testing framework","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2022-03-04T11:50:39Z","updated_at":"2022-03-09T14:34:03Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11025","html_url":"https://github.com/MaterializeInc/materialize/pull/11025","diff_url":"https://github.com/MaterializeInc/materialize/pull/11025.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11025.patch","merged_at":null},"body":"This document describes the overall design of a new framework for testing Platform and all parts connected to it.\r\n\r\nRendered view: https://github.com/philip-stoev/materialize/blob/0119667cea45c9b6551e9c920e75982d21e23010/doc/developer/design/2022-02-28_zippy_testing_framework.md","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11021","id":1159195489,"node_id":"I_kwDOCkIcu85FF-th","number":11021,"title":"Implement heartbeat mechanism for Postgres replication to prevent upstream WAL disk usage issues","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":2348462791,"node_id":"MDU6TGFiZWwyMzQ4NDYyNzkx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-source","name":"A-source","color":"5fefa7","default":false,"description":"Area: sources"},{"id":3243762798,"node_id":"MDU6TGFiZWwzMjQzNzYyNzk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/T-PG","name":"T-PG","color":"695bd3","default":false,"description":"Theme: postgres sources (Sources & Sinks)"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-04T03:15:04Z","updated_at":"2022-03-04T03:15:04Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nThe basic problem is that Postgres shares one pool of WAL segments across all tables in all schemas, so if a server has some tables which receive lots of traffic and others which receive very little and replication is setup to Materialize only for some subset of low traffic tables it can cause elevated disk usage on the Postgres server and depending on server and replication config can lead to further negative outcomes for the upstream Postgres server. This disk usage is triggered because the server can only reclaim WAL segments when all references to WAL locations point to an LSN newer than the last LSN in the segment, so if a replication slot does not receive traffic for long periods of time it will hold open a reference to a very old LSN and no segments since then will be reclaimable.\r\n\r\nThe \"standard\" solution is to have a dedicated table with a tiny footprint in the publication, upon which an update is performed periodically in order to ensure that the publication has at least 1 event to send in whatever time period is necessary to prevent disk issues. ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11021/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11020","id":1159173674,"node_id":"I_kwDOCkIcu85FF5Yq","number":11020,"title":"Handle Origin messages in Postgres replication","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":2348462791,"node_id":"MDU6TGFiZWwyMzQ4NDYyNzkx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-source","name":"A-source","color":"5fefa7","default":false,"description":"Area: sources"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-04T02:30:08Z","updated_at":"2022-03-04T02:30:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nPostgres logical replication has a message type which enables clients to determine whether the source of a transaction is \"local\" or \"remote\" to the Postgres server, but these messages are currently ignored in the Postgres source. \r\n\r\nThe primary motivation for implementing a handler for this message type is as a pre-requisite to supporting Postgres logical replication as a sink, use of the Origin message would allow Materialize to discard replication events which actually originated from Materialize in a circulation replication setup.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11020/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11018","id":1159042300,"node_id":"PR_kwDOCkIcu84z7Khs","number":11018,"title":"persist/wip: bounded memory usage for get requests from Blob.","user":{"login":"ruchirK","id":4015012,"node_id":"MDQ6VXNlcjQwMTUwMTI=","avatar_url":"https://avatars.githubusercontent.com/u/4015012?v=4","gravatar_id":"","url":"https://api.github.com/users/ruchirK","html_url":"https://github.com/ruchirK","followers_url":"https://api.github.com/users/ruchirK/followers","following_url":"https://api.github.com/users/ruchirK/following{/other_user}","gists_url":"https://api.github.com/users/ruchirK/gists{/gist_id}","starred_url":"https://api.github.com/users/ruchirK/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruchirK/subscriptions","organizations_url":"https://api.github.com/users/ruchirK/orgs","repos_url":"https://api.github.com/users/ruchirK/repos","events_url":"https://api.github.com/users/ruchirK/events{/privacy}","received_events_url":"https://api.github.com/users/ruchirK/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-03T23:14:01Z","updated_at":"2022-03-10T20:40:24Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11018","html_url":"https://github.com/MaterializeInc/materialize/pull/11018","diff_url":"https://github.com/MaterializeInc/materialize/pull/11018.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11018.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11012","id":1158703017,"node_id":"PR_kwDOCkIcu84z6A2A","number":11012,"title":"Implement INCLUDE HEADERS for kafka sources","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-03T17:35:13Z","updated_at":"2022-03-08T23:47:54Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11012","html_url":"https://github.com/MaterializeInc/materialize/pull/11012","diff_url":"https://github.com/MaterializeInc/materialize/pull/11012.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11012.patch","merged_at":null},"body":"Implements the proposal outlined in https://github.com/MaterializeInc/materialize/pull/10951\r\n\r\nAs part of implementing this, I learned that _kafka allows multiple headers with the same key_. This PR implements \"keep the topologically smaller of the values\", but we could change it to support `map[test=>list[bytea]]` or something similar. Discussion can happen on the design document.\r\n\r\nThis PR implements `headers` as *metadata*, using the framework setup by @quodlibetor. This is 1. to reduce complexity of the implementation and 2. because the semantics of `headers` we want matches the semantics of metadata: We only record header changes if the value decodes properly, and an empty value means we ignore headers (I think, please check my work). We hop onto the existing `to_metadata_row` calls. (Question: do we ever de-duplicated equal values in `UPSERT`? I don't think we do). We also skip doing anything with headers if the source is not configured as such.\r\n\r\nAdditionally, this pr does the number of `to_vec/to_string/clone`'s necessary to keep the code simpler. Its possible some could be avoided. \r\n\r\n### Motivation\r\n\r\n  * This PR adds a known-desirable feature.\r\nhttps://github.com/MaterializeInc/materialize/issues/8446\r\n\r\n\r\n### Tips for reviewer\r\n- bottom pr adds `map_length`, which helps with testing later on\r\n- second add header support to `testdrive`\r\n- third is core implementation\r\n- rest are various changes/tests\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n- Adds a `map_length` function to count the number of entries in a `map`\r\n- Adds `INCLUDE HEADERS (as <column name>)` to Kafka sources to populate headers as list of `(k, v)` pairs in a column\r\n- Adds an experimental `headerstomap` to transform the headers list/multimap into a \"smallest-value-wins\" map\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11012/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11009","id":1158543666,"node_id":"PR_kwDOCkIcu84z5e7r","number":11009,"title":"doc: Cloud static IP docs","user":{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-03T15:20:22Z","updated_at":"2022-03-04T08:20:33Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11009","html_url":"https://github.com/MaterializeInc/materialize/pull/11009","diff_url":"https://github.com/MaterializeInc/materialize/pull/11009.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11009.patch","merged_at":null},"body":"Documented how to get your deployment static IP and added some guidelines on how to allow it in some common firewalls.\r\n\r\n### Motivation\r\n\r\nAs we now have static IPs for all Cloud deployments which can be added to security policies, firewall rules, etc. \r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11007","id":1158394295,"node_id":"PR_kwDOCkIcu84z4_Ms","number":11007,"title":"doc/user: Add PHP PDO guide","user":{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-03T13:13:15Z","updated_at":"2022-03-03T13:13:16Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11007","html_url":"https://github.com/MaterializeInc/materialize/pull/11007","diff_url":"https://github.com/MaterializeInc/materialize/pull/11007.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11007.patch","merged_at":null},"body":"Closes #10988 \r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11007/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/events","html_url":"https://github.com/MaterializeInc/materialize/pull/11002","id":1157999573,"node_id":"PR_kwDOCkIcu84z3sf9","number":11002,"title":"expr: possibly improve clarity of temporal filter evaluation","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-03T05:49:03Z","updated_at":"2022-03-04T16:57:35Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/11002","html_url":"https://github.com/MaterializeInc/materialize/pull/11002","diff_url":"https://github.com/MaterializeInc/materialize/pull/11002.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/11002.patch","merged_at":null},"body":"This is a revised take on #10976 that attempts to recover clarity in a different way.\r\n\r\nI've split this into two commits:\r\n\r\n  * The first commit replaces the dead code with an `unreachable!`. I think we're now all on the same page that this is worth doing.\r\n  * The second commit swaps the use of `Option` for the `Max1Antichain` type. I think this is an improvement in clarity, because `Max1Antichain` has the correct comparison semantics. (I think. Maybe I misunderstand something about the `PartialOrder` trait.) It's also potentially an annoying thing to have to review right now. I'm very happy to leave this commit out.\r\n\r\n### Motivation\r\n\r\n   * This PR refactors existing code.\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11001","id":1157853312,"node_id":"I_kwDOCkIcu85FA3CA","number":11001,"title":"Runtime checking of types in `Get` nodes.","user":{"login":"umanwizard","id":1893159,"node_id":"MDQ6VXNlcjE4OTMxNTk=","avatar_url":"https://avatars.githubusercontent.com/u/1893159?v=4","gravatar_id":"","url":"https://api.github.com/users/umanwizard","html_url":"https://github.com/umanwizard","followers_url":"https://api.github.com/users/umanwizard/followers","following_url":"https://api.github.com/users/umanwizard/following{/other_user}","gists_url":"https://api.github.com/users/umanwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/umanwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umanwizard/subscriptions","organizations_url":"https://api.github.com/users/umanwizard/orgs","repos_url":"https://api.github.com/users/umanwizard/repos","events_url":"https://api.github.com/users/umanwizard/events{/privacy}","received_events_url":"https://api.github.com/users/umanwizard/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-03T01:03:51Z","updated_at":"2022-03-03T01:03:51Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nToday we do not validate that the inputs to a dataflow (e.g. sources) actually produce `Row`s of a particular type. We should do so, (potentially as a debug assertion in case the validation is expensive), so that we can notice immediately at the input that a program is ill-formed, rather than crashing in some random downstream node or producing incorrect data.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11001/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/events","html_url":"https://github.com/MaterializeInc/materialize/issues/11000","id":1157852027,"node_id":"I_kwDOCkIcu85FA2t7","number":11000,"title":"Facilities for typechecking IR graphs","user":{"login":"umanwizard","id":1893159,"node_id":"MDQ6VXNlcjE4OTMxNTk=","avatar_url":"https://avatars.githubusercontent.com/u/1893159?v=4","gravatar_id":"","url":"https://api.github.com/users/umanwizard","html_url":"https://github.com/umanwizard","followers_url":"https://api.github.com/users/umanwizard/followers","following_url":"https://api.github.com/users/umanwizard/following{/other_user}","gists_url":"https://api.github.com/users/umanwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/umanwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umanwizard/subscriptions","organizations_url":"https://api.github.com/users/umanwizard/orgs","repos_url":"https://api.github.com/users/umanwizard/repos","events_url":"https://api.github.com/users/umanwizard/events{/privacy}","received_events_url":"https://api.github.com/users/umanwizard/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-03T01:01:33Z","updated_at":"2022-03-03T06:45:55Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nToday it's not possible to accurately type-check MIR and LIR programs, because the information about the input type of SQL functions is not available in `expr` . Thus, for example, it's possible to construct a MIR program in which one node produces a string, and the downstream node calls a function requesting an integer. The `typ` function will not detect this, and the dataflow we render will crash at runtime.\r\n\r\nThis makes the system brittle, because any bug in optimization or planning has the potential to cause a runtime crash, rather than being detectable at render time.\r\n\r\n@benesch has a plan for how to get this information in `expr`. He thinks we should eventually do it, but that it would take ~1 month of work. Nikhil, I didn't quite follow the idea when you explained it; would you mind repeating it here or linking to somewhere where it's described?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10990","id":1157271658,"node_id":"PR_kwDOCkIcu84z1T4o","number":10990,"title":"Do not merge: expr: playing around with indexes supporting implicit casts","user":{"login":"wangandi","id":5522362,"node_id":"MDQ6VXNlcjU1MjIzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/5522362?v=4","gravatar_id":"","url":"https://api.github.com/users/wangandi","html_url":"https://github.com/wangandi","followers_url":"https://api.github.com/users/wangandi/followers","following_url":"https://api.github.com/users/wangandi/following{/other_user}","gists_url":"https://api.github.com/users/wangandi/gists{/gist_id}","starred_url":"https://api.github.com/users/wangandi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wangandi/subscriptions","organizations_url":"https://api.github.com/users/wangandi/orgs","repos_url":"https://api.github.com/users/wangandi/repos","events_url":"https://api.github.com/users/wangandi/events{/privacy}","received_events_url":"https://api.github.com/users/wangandi/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-02T14:29:11Z","updated_at":"2022-03-02T14:29:11Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10990","html_url":"https://github.com/MaterializeInc/materialize/pull/10990","diff_url":"https://github.com/MaterializeInc/materialize/pull/10990.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10990.patch","merged_at":null},"body":"Created for spec-ing out #10871.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10990/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10989","id":1157256052,"node_id":"I_kwDOCkIcu85E-lN0","number":10989,"title":"doc/user: SQL Server via Debezium CDC Guide","user":{"login":"ruf-io","id":11527560,"node_id":"MDQ6VXNlcjExNTI3NTYw","avatar_url":"https://avatars.githubusercontent.com/u/11527560?v=4","gravatar_id":"","url":"https://api.github.com/users/ruf-io","html_url":"https://github.com/ruf-io","followers_url":"https://api.github.com/users/ruf-io/followers","following_url":"https://api.github.com/users/ruf-io/following{/other_user}","gists_url":"https://api.github.com/users/ruf-io/gists{/gist_id}","starred_url":"https://api.github.com/users/ruf-io/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruf-io/subscriptions","organizations_url":"https://api.github.com/users/ruf-io/orgs","repos_url":"https://api.github.com/users/ruf-io/repos","events_url":"https://api.github.com/users/ruf-io/events{/privacy}","received_events_url":"https://api.github.com/users/ruf-io/received_events","type":"User","site_admin":false},"labels":[{"id":1467624450,"node_id":"MDU6TGFiZWwxNDY3NjI0NDUw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-docs","name":"A-docs","color":"5fefa7","default":false,"description":"Area: documentation"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-02T14:15:46Z","updated_at":"2022-03-02T14:15:46Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### What pages are affected?\n\n_No response_\n\n### What needs to be changed or added?\n\nCreate a variant of https://materialize.com/docs/guides/cdc-mysql/ for SQL Server via Debezium.\r\n\r\nSee helpful notes from Mark here: https://materializecommunity.slack.com/archives/C0157GZ7UKF/p1646142131506359\r\n\r\n\n\n### Engineering tracking ticket\n\n_No response_\n\n### Feature description\n\n_No response_\n\n### Design documents\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10989/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10988","id":1157228701,"node_id":"I_kwDOCkIcu85E-eid","number":10988,"title":"doc/user: PHP guide + cheatsheet","user":{"login":"ruf-io","id":11527560,"node_id":"MDQ6VXNlcjExNTI3NTYw","avatar_url":"https://avatars.githubusercontent.com/u/11527560?v=4","gravatar_id":"","url":"https://api.github.com/users/ruf-io","html_url":"https://github.com/ruf-io","followers_url":"https://api.github.com/users/ruf-io/followers","following_url":"https://api.github.com/users/ruf-io/following{/other_user}","gists_url":"https://api.github.com/users/ruf-io/gists{/gist_id}","starred_url":"https://api.github.com/users/ruf-io/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruf-io/subscriptions","organizations_url":"https://api.github.com/users/ruf-io/orgs","repos_url":"https://api.github.com/users/ruf-io/repos","events_url":"https://api.github.com/users/ruf-io/events{/privacy}","received_events_url":"https://api.github.com/users/ruf-io/received_events","type":"User","site_admin":false},"labels":[{"id":1467624450,"node_id":"MDU6TGFiZWwxNDY3NjI0NDUw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-docs","name":"A-docs","color":"5fefa7","default":false,"description":"Area: documentation"}],"state":"open","locked":false,"assignee":{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false},"assignees":[{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2022-03-02T13:51:28Z","updated_at":"2022-03-03T09:15:39Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### What pages are affected?\r\n\r\n_No response_\r\n\r\n### What needs to be changed or added?\r\n\r\nStart with the node.js guide structure. https://materialize.com/docs/guides/node-js/\r\n\r\nLook for PHP-standard postgres libraries and vet that they can interact with Materialize in all the required ways (especially `TAIL WITH FETCH`)\r\n\r\n### Engineering tracking ticket\r\n\r\n_No response_\r\n\r\n### Feature description\r\n\r\n_No response_\r\n\r\n### Design documents\r\n\r\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10978","id":1155888303,"node_id":"PR_kwDOCkIcu84zwdiV","number":10978,"title":"persist: WIP strawman for new multi-writer persist interface","user":{"login":"danhhz","id":52528,"node_id":"MDQ6VXNlcjUyNTI4","avatar_url":"https://avatars.githubusercontent.com/u/52528?v=4","gravatar_id":"","url":"https://api.github.com/users/danhhz","html_url":"https://github.com/danhhz","followers_url":"https://api.github.com/users/danhhz/followers","following_url":"https://api.github.com/users/danhhz/following{/other_user}","gists_url":"https://api.github.com/users/danhhz/gists{/gist_id}","starred_url":"https://api.github.com/users/danhhz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danhhz/subscriptions","organizations_url":"https://api.github.com/users/danhhz/orgs","repos_url":"https://api.github.com/users/danhhz/repos","events_url":"https://api.github.com/users/danhhz/events{/privacy}","received_events_url":"https://api.github.com/users/danhhz/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2022-03-01T22:30:25Z","updated_at":"2022-03-09T18:41:44Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10978","html_url":"https://github.com/MaterializeInc/materialize/pull/10978","diff_url":"https://github.com/MaterializeInc/materialize/pull/10978.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10978.patch","merged_at":null},"body":"This is an attempt to redesign the persist API to balance all of the\r\nfollowing factors:\r\n- Usage within STORAGE\r\n- Operational simplicity\r\n- Maintainability of implementation\r\n- Performance\r\n- Cost\r\n\r\nAdditionally, we're also taking this shift in product priorities (as\r\nwell as some assumptions that have changed since persist started) to lay\r\nout a plan to incrementally ship this thing to production. Shipping\r\npersist incrementally is something everyone wants, is much less risky,\r\nand is an earlier timeline. This is something we've tried hard to do\r\nhistorically, but have been unable to tease apart into a workable plan\r\n(given the constraints of our initial goal of fast restarts for kafka\r\nsource persistence). Without over-promising, this interface rethink\r\nseems at the moment like it may unlock incremental delivery.\r\n\r\nThat's the good news. The bonus good news is that persist's internal\r\nimplementation is pretty clean and contains lots of great building\r\nblocks. Even if we entirely throw out the current API and switch to this\r\none, it should be a pretty fast process. This is in no way a rewrite.\r\n\r\nHere's my rough short-to-medium-term plan:\r\n- Figure out the balance of persist priorities (support platform vs the\r\n  kafka source fast restart alpha) with product. Adjust the following\r\n  steps accordingly. Timeline: ASAP\r\n- Get persist and storage to agree on this API boundary between them,\r\n  including performance and cost expectations. Then, get sign-off from\r\n  Cloud on the operational implications. Merge it. Timeline: ASAP\r\n- Write and merge a prototype-quality implementation of this API to\r\n  prove the concept and unblock storage prototyping. Timeline: ASAP\r\n- Write and merge a design doc for the production-quality implementation\r\n  of this API and its incremental rollout. Timeline: ASAP\r\n- Write a bare-bones production-quality implementation of this API. This\r\n  will happen in parallel with the initial production-quality\r\n  implementation of STORAGE. Adjust the API as necessary in light of the\r\n  inevitable discovery of unforeseen issues+requirements as persist and\r\n  STORAGE are implemented. Timeline: Platform launch.\r\n- Continue to incrementally ship persist features as decided by product\r\n  prioritization.\r\n\r\n### Motivation\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n### Tips for reviewer\r\n\r\nThis is both very much a WIP as well as a strawman. Everything is up for debate and nothing is set in stone.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10977","id":1155865205,"node_id":"PR_kwDOCkIcu84zwYii","number":10977,"title":"[WIP] first draft of JSON source","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-01T22:04:52Z","updated_at":"2022-03-04T22:02:41Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10977","html_url":"https://github.com/MaterializeInc/materialize/pull/10977","diff_url":"https://github.com/MaterializeInc/materialize/pull/10977.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10977.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\nVery WIP at the moment, but so far this lets us create a source with `FORMAT JSON USING TYPE <named_type>` and ingest records with basic data types. Looooots more changes + test coverage to ensue. \r\n\r\nTODO:\r\n- [ ] add tests for ingesting data into all possible scalar types\r\n- [ ] update catalog loading so that views can depend on custom types\r\n- [x] determine whether missing a field in a JSON document should produce a null or empty collection, when we know it is a collection type\r\n- [x] determine whether we want to add in the basic `FORMAT JSON` --> jsonb format\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10973","id":1155644413,"node_id":"PR_kwDOCkIcu84zvpfM","number":10973,"title":"misc: change use of term 'cluster' broadly to 'install'","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-01T18:02:57Z","updated_at":"2022-03-02T13:16:28Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10973","html_url":"https://github.com/MaterializeInc/materialize/pull/10973","diff_url":"https://github.com/MaterializeInc/materialize/pull/10973.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10973.patch","merged_at":null},"body":"With some upcoming platform work, we want to use the term \"cluster\" in the SQL API. Clusters will unfortunately also have IDs, which makes the existing `cluster_id` a little confusing. This PR attempts to begin moving the existing notion of \"cluster ID\" to \"installation ID.\"\r\n\r\nHowever, some of the cloud bench infrastructure seems to use this notion as a kind of column name, so I'm not sure what the fallout of that will be.\r\n\r\n### Motivation\r\n\r\nThis PR refactors existing code.\r\n\r\n### Tips for reviewer\r\n\r\nLargely code movement, besides the impact to cloud bench\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Move/rename the built-in function `mz_catalog.mz_cluster_id` to `mz_internal.mz_install_id`.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10973/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10971","id":1155629800,"node_id":"PR_kwDOCkIcu84zvmcB","number":10971,"title":"prevent select!-correctness problems for simple sources","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2022-03-01T17:47:34Z","updated_at":"2022-03-08T16:40:32Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10971","html_url":"https://github.com/MaterializeInc/materialize/pull/10971","diff_url":"https://github.com/MaterializeInc/materialize/pull/10971.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10971.patch","merged_at":null},"body":"There is a subtlety when using `select!`: when one future finishes, the other is _dropped_. This CAN cause subtle logic bugs and data loss (see https://tomaka.medium.com/a-look-back-at-asynchronous-rust-d54d63934a1c for more details). In the case of this pr, if the `SimpleSource`'s `start`-ed future finishes, then the timestamper `tick` future could be stopped in the middle of sleeping, or worse, in the middle of sending a result onto the bounded channel (https://github.com/MaterializeInc/materialize/blob/56a39246007194914cd02cfdcef0c4874b2ac7f9/src/dataflow/src/source/mod.rs#L716-L732)\r\n\r\nIn practice, this doesn't happen, because simple-source futures are long-running, and when they finish we `break;` but if we add short-running ones, or add more futures managing state, we could see bugs, so I figured I should change it now.\r\n\r\nI chose to use `Pin::set` to reset the `tick` future here because it was the simplest. I would have preferring moving the interval out into the `select!` statement, but this would require a larger refactor, where simple-sources's adopt some sort of poll model. @petrosagg let me know if thats better\r\n\r\n### Motivation\r\n  * This PR fixes a previously unreported bug.\r\nSee above\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10968","id":1155382430,"node_id":"I_kwDOCkIcu85E3bye","number":10968,"title":"sql: support larger numeric precision","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-01T14:05:57Z","updated_at":"2022-03-01T14:16:11Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\r\n\r\nThe precision of the `numeric` type in Materialize is currently capped at 39 digits, as we needed to choose _some_ fixed precision to back our [`Decimal`](https://docs.rs/dec/latest/dec/struct.Decimal.html) type.\r\n\r\nWe could lift that restriction by backing `Decimal` with a vector instead of an array, and allowing users to choose how many digits of precision to use at runtime. This is conceptually simple, but there are some practical difficulties:\r\n\r\n  * The upstream library rust-dec needs to be modified to use vectors instead of arrays. I'm not clear on whether this should be a separate type, or whether we should force all users of `Decimal` into the new implementation.\r\n  * Every `numeric` operation in Materialize needs to select a result scale and precision based on the scale and precision of its inputs.\r\n  * Selecting result scales is tricky. If you're not careful, operations like `1.0 / 3.0` result in `0.3`, and customers complain. Here's how [PostgreSQL chooses result scales](https://github.com/postgres/postgres/blob/9028cce426ba6e08ee5ef8fcaedb2445e6c08c75/src/backend/utils/adt/numeric.c#L9157-L9223) for divisions, for example.\r\n\r\n#10671 is a prerequisite.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10967","id":1155326331,"node_id":"PR_kwDOCkIcu84zumlz","number":10967,"title":"platform: add STORAGE architecure document","user":{"login":"petrosagg","id":939420,"node_id":"MDQ6VXNlcjkzOTQyMA==","avatar_url":"https://avatars.githubusercontent.com/u/939420?v=4","gravatar_id":"","url":"https://api.github.com/users/petrosagg","html_url":"https://github.com/petrosagg","followers_url":"https://api.github.com/users/petrosagg/followers","following_url":"https://api.github.com/users/petrosagg/following{/other_user}","gists_url":"https://api.github.com/users/petrosagg/gists{/gist_id}","starred_url":"https://api.github.com/users/petrosagg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/petrosagg/subscriptions","organizations_url":"https://api.github.com/users/petrosagg/orgs","repos_url":"https://api.github.com/users/petrosagg/repos","events_url":"https://api.github.com/users/petrosagg/events{/privacy}","received_events_url":"https://api.github.com/users/petrosagg/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-03-01T13:13:22Z","updated_at":"2022-03-07T10:50:16Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10967","html_url":"https://github.com/MaterializeInc/materialize/pull/10967","diff_url":"https://github.com/MaterializeInc/materialize/pull/10967.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10967.patch","merged_at":null},"body":null,"reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10963","id":1155068278,"node_id":"I_kwDOCkIcu85E2PF2","number":10963,"title":"TCP boundary: Server should never assert","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[{"id":1465753202,"node_id":"MDU6TGFiZWwxNDY1NzUzMjAy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-dataflow","name":"A-dataflow","color":"5fefa7","default":false,"description":"Area: dataflow"},{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-01T09:06:29Z","updated_at":"2022-03-01T09:06:29Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The current TCP boundary implementation uses `assert!` to maintain invariants. This is fine for the client where any invariant violation is unrecoverable, but bad for the STORAGE server. Here, invariant violations should lead to forceful disconnects of clients and state cleanup. Only if it is not possible to cleanly remove state, an `assert!` could be used.\r\n\r\nThis could also involve an extension of the `Response` protocol to communicate error conditions to the client before disconnecting, or giving the client a chance to rectify the problem. For the moment, explaining to the client what went wrong and then disconnecting is a fine option.\r\n\r\nI'd expect most of the errors originating configuration errors, for example if the number of storage workers is incorrect.\r\n\r\nCode location: https://github.com/MaterializeInc/materialize/blob/main/src/dataflow/src/server/tcp_boundary.rs#L206-L223","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10963/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10962","id":1154903438,"node_id":"PR_kwDOCkIcu84ztNpa","number":10962,"title":"doc/user: Revamp Third-Party Tools Page","user":{"login":"ruf-io","id":11527560,"node_id":"MDQ6VXNlcjExNTI3NTYw","avatar_url":"https://avatars.githubusercontent.com/u/11527560?v=4","gravatar_id":"","url":"https://api.github.com/users/ruf-io","html_url":"https://github.com/ruf-io","followers_url":"https://api.github.com/users/ruf-io/followers","following_url":"https://api.github.com/users/ruf-io/following{/other_user}","gists_url":"https://api.github.com/users/ruf-io/gists{/gist_id}","starred_url":"https://api.github.com/users/ruf-io/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruf-io/subscriptions","organizations_url":"https://api.github.com/users/ruf-io/orgs","repos_url":"https://api.github.com/users/ruf-io/repos","events_url":"https://api.github.com/users/ruf-io/events{/privacy}","received_events_url":"https://api.github.com/users/ruf-io/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-01T05:55:43Z","updated_at":"2022-03-11T07:46:25Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10962","html_url":"https://github.com/MaterializeInc/materialize/pull/10962","diff_url":"https://github.com/MaterializeInc/materialize/pull/10962.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10962.patch","merged_at":null},"body":"👉  Preview Link: https://preview.materialize.com/10962/third-party/supported-tools/ 👈 \r\n\r\n\r\n### Motivation\r\n\r\nUsers will often come to us with questions about \"Does Materialize integrate with X?\"\r\n\r\n- When the answer is **Yes**\r\n   - Often the only way to know is to ask and get an answer in Slack or discussion. This page works as a self-serve index of tools and integrations that have already been looked at. \r\n   - The follow-up question of \"how does it integrate\" is not always well documented.\r\n- When the answer is **no**\r\n   - We don't have a great way of registering their interest, following up with them when the integration improves, and quantifying how many users are asking about certain integrations.\r\n\r\nUsers will also come to us asking \"what tools can I use to do X with Materialize?\" (e.g. manage SQL) - This page can also serve as a lightweight index for some of those questions.\r\n\r\n### Review Criteria\r\n\r\n- [ ] The definitions of support levels has been reviewed.\r\n- [ ] All the claimed statuses of tools has been checked.\r\n- [ ] The \"Notify Me\" feature fires Segment events with user email, integration requested\r\n- [ ] Intro sentences for sections has been reviewed and approved.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10962/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10957","id":1154524358,"node_id":"I_kwDOCkIcu85E0KTG","number":10957,"title":"Improve robustness of timestamp binding compaction","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"},{"id":3052793738,"node_id":"MDU6TGFiZWwzMDUyNzkzNzM4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/P3","name":"P3","color":"6b0000","default":false,"description":"Priority: we want to get this done in the next X days"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-28T20:35:14Z","updated_at":"2022-02-28T21:31:31Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Our `sqlite` timestamp binding compaction uses the following logic:\r\n```rust\r\n        let latest_not_beyond_compaction: Option<Timestamp> = self\r\n            .inner\r\n            .prepare_cached(\r\n                \"SELECT max(timestamp) FROM timestamps WHERE sid = ? AND timestamp <= ?\",\r\n            )?\r\n            .query_row(params![SqlVal(&source_id), frontier], |row| row.get(0))?;\r\n\r\n        if let Some(latest_not_beyond_compaction) = latest_not_beyond_compaction {\r\n            let result = match self\r\n                .inner\r\n                .prepare_cached(\"DELETE FROM timestamps WHERE sid = ? AND timestamp < ?\")?\r\n                .execute(params![SqlVal(&source_id), latest_not_beyond_compaction])\r\n            {\r\n                Ok(_) => Ok(()),\r\n                Err(err) => Err(err.into()),\r\n            };\r\n\r\n            result\r\n        } else {\r\n            Ok(())\r\n        }\r\n```\r\nIt selects the maximum timestamp less or equal to the input argument, and deletes bindings at strictly lower timestamp. However, there are bindings for each of various subdivisions of the `sid` collection: kafka topics have multiple parts, for example. Instead, I believe we should use the minimum across maximum values for parts (or whatever the subdivisions are).\r\n\r\nThe current thinking is that this doesn't manifest as a bug at present because we ensure that some other invariants are maintained on the data, relating the skew of the bound timestamps in each of the parts.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10957/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10956","id":1154521040,"node_id":"I_kwDOCkIcu85E0JfQ","number":10956,"title":"compute: Transactional facade for `Controller`","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-28T20:31:08Z","updated_at":"2022-02-28T20:31:08Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The `Controller` presents many operations that manipulate the state of collections. It would be valuable for users to sequence commands that can be assess for tentative \"acceptability\": when ready to commit, they should none of them error.\r\n\r\nThis appears not too hard, at least if we pivot capability downgrades to the end of the sequence of commands, so that all validation can be done against the initial frontier values of existing collections, and initial values of newly introduced collections.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10956/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10945","id":1154436088,"node_id":"PR_kwDOCkIcu84zrrLX","number":10945,"title":"ci: enable all Kafka tests in Redpanda nightly","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-02-28T18:54:44Z","updated_at":"2022-03-01T04:08:52Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10945","html_url":"https://github.com/MaterializeInc/materialize/pull/10945","diff_url":"https://github.com/MaterializeInc/materialize/pull/10945.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10945.patch","merged_at":null},"body":"@ruf-io reports that the issue might be fixed.\r\n\r\n### Motivation\r\n\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR accounts for a fix to a recognized bug: redpanda-data/redpanda#2397\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - N/A\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10944","id":1154432735,"node_id":"I_kwDOCkIcu85Ezz7f","number":10944,"title":"row_num - Document limitations","user":{"login":"krishmanoh2","id":72518904,"node_id":"MDQ6VXNlcjcyNTE4OTA0","avatar_url":"https://avatars.githubusercontent.com/u/72518904?v=4","gravatar_id":"","url":"https://api.github.com/users/krishmanoh2","html_url":"https://github.com/krishmanoh2","followers_url":"https://api.github.com/users/krishmanoh2/followers","following_url":"https://api.github.com/users/krishmanoh2/following{/other_user}","gists_url":"https://api.github.com/users/krishmanoh2/gists{/gist_id}","starred_url":"https://api.github.com/users/krishmanoh2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krishmanoh2/subscriptions","organizations_url":"https://api.github.com/users/krishmanoh2/orgs","repos_url":"https://api.github.com/users/krishmanoh2/repos","events_url":"https://api.github.com/users/krishmanoh2/events{/privacy}","received_events_url":"https://api.github.com/users/krishmanoh2/received_events","type":"User","site_admin":false},"labels":[{"id":1467624450,"node_id":"MDU6TGFiZWwxNDY3NjI0NDUw","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-docs","name":"A-docs","color":"5fefa7","default":false,"description":"Area: documentation"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-28T18:50:05Z","updated_at":"2022-02-28T18:50:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What pages are affected?\n\nhttps://materialize.com/docs/sql/functions/\r\n\r\n\n\n### What needs to be changed or added?\n\nMaterialize implementation of row_num can lead to higher than expected memory usage. Recommend that anyone trying this function out understand the limitations.\n\n### Engineering tracking ticket\n\n_No response_\n\n### Feature description\n\n_No response_\n\n### Design documents\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10944/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10939","id":1154164480,"node_id":"PR_kwDOCkIcu84zqx-G","number":10939,"title":"dataflow: TCP boundary supporting multi-process STORAGE","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-28T14:32:21Z","updated_at":"2022-02-28T14:32:21Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10939","html_url":"https://github.com/MaterializeInc/materialize/pull/10939","diff_url":"https://github.com/MaterializeInc/materialize/pull/10939.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10939.patch","merged_at":null},"body":"This doesn't quite work yet but I didn't want to spend more time on\r\ndebugging. We're currently not focusing on a multi-process STORAGE runtime,\r\nso this should just serve as an example of what probably needs to be done,\r\nin case someone would like to pick it up.\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10939/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10938","id":1153979238,"node_id":"I_kwDOCkIcu85EyFNm","number":10938,"title":"regression: Failure during snapshot not retried properly, source never advances","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":3052793141,"node_id":"MDU6TGFiZWwzMDUyNzkzMTQx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/P1","name":"P1","color":"d10000","default":false,"description":"Priority: critical issue, panic, etc. drop what you're doing and fix immediately"}],"state":"open","locked":false,"assignee":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"assignees":[{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false}],"milestone":null,"comments":5,"created_at":"2022-02-28T11:28:59Z","updated_at":"2022-03-07T21:58:36Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nv0.19.1-dev (89f9dfdc2)\r\n\r\n### How did you install Materialize?\r\n\r\nDocker image\r\n\r\n### What was the issue?\r\n\r\nThe pg-cdc-resumption test has started to fail in its `restart_pg_during_snapshot` subtest:\r\n\r\n```\r\nverify-data.td | 1m 0s\r\n-- | --\r\n  | > SELECT COUNT(*) = 500000 FROM t1;\r\n  | rows didn't match; sleeping to see if dataflow catches up 50ms 75ms 112ms 169ms 253ms 380ms 570ms 854ms 1s 2s 3s 4s 6s 10s 15s 16s\r\n  | verify-data.td:10:1: error: executing query failed: db error: ERROR: At least one input has no complete timestamps yet: [User(28)]: ERROR: At least one input has no complete timestamps yet: [User(28)]\r\n  | \\|\r\n  | 9 \\|\r\n  | 10 \\| > SELECT COUNT(*) = 500000 FROM t1;\r\n\r\n\r\n```\r\n\r\nThis output essentially means that absolutely no data was received from Postgres whatsoever and the test waited for 60 seconds for progress to be made.\r\n\r\nGit bisect reports that the test started failing after the following commit. It may be that the faster speed of `COPY` caused the timing of the events to change.\r\n\r\n```\r\n89f9dfdc20e4547e90ca97599089a73553b6b365 is the first bad commit\r\ncommit 89f9dfdc20e4547e90ca97599089a73553b6b365\r\nAuthor: Paul Hemberger <paul@materialize.com>\r\nDate:   Mon Feb 7 08:42:02 2022 -0500\r\n\r\n    pg-cdc: switch from `SELECT *` to `COPY TO` for faster initial loading (#10299)\r\n\r\n```\r\n\r\nSimplified test coming up shortly.\r\n\r\n### Relevant log output\r\n\r\nNo errors in Mz log","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10935","id":1153540153,"node_id":"I_kwDOCkIcu85EwaA5","number":10935,"title":"sql: support new polymorphic types","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"assignees":[{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-02-28T02:26:01Z","updated_at":"2022-03-07T15:02:16Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nPostgreSQL v13 introduced some new [polymorphic types](https://www.postgresql.org/docs/current/extend-type-system.html#EXTEND-TYPES-POLYMORPHIC):\r\n\r\n  * `anycompatible`\r\n  * `anycompatiblearray`\r\n  * `anycompatiblenonarray`\r\n  * `anycompatiblerange`\r\n  * `anycompatiblemultirange`\r\n\r\nThese are like the existing polymorphic types that don't mention `compatible` in their names, except that they don't constrain their arguments to be literally identical, but only to share a common type that both arguments can be promoted to (as determined by `guess_best_common_type`).\r\n\r\nMany existing functions in PostgreSQL were redefined to take e.g. `anycompatible` where they used to take `any`. I think our [`resolve_polymorphic_types`](https://github.com/MaterializeInc/materialize/blob/c608ae71b4814f53ea9aff75aa39fbaa5ce4084f/src/sql/src/func.rs#L626) function is understandably a bit confused on this point, and is currently a hybrid of `compatible` and non-`compatible` behavior.\r\n\r\nI'm also pretty thoroughly confused by our breakdown of types into \"custom\", \"built-in\", \"complex\", and \"simple\": https://github.com/MaterializeInc/materialize/blob/c608ae71b4814f53ea9aff75aa39fbaa5ce4084f/src/sql/src/func.rs#L554-L560\r\n\r\nI think quite a bit of this complexity can vanish by properly implementing the new `compatible` polymorphic types. Then we won't need special handling to allow e.g. `int4 list` and `int4_list_as_custom_type` to be interchanged; we can just use the new `compatible` polymorphic types in function signatures. \r\n\r\ncc @sploiselle ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10935/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10934","id":1153535478,"node_id":"I_kwDOCkIcu85EwY32","number":10934,"title":"sql: introduce a `CoercibleScalarType` enum","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1587553694,"node_id":"MDU6TGFiZWwxNTg3NTUzNjk0","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-refactoring","name":"C-refactoring","color":"7842aa","default":false,"description":"Category: replacing or reorganizing code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-02-28T02:17:35Z","updated_at":"2022-02-28T16:33:41Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"We currently don't handle coercion of `ROW` literals correctly in some contexts. See #8597 and #10422.\r\n\r\n#10868 is one attempt to fix this by changing the typing of `CoercibleScalarType` so that a `ROW` literal is typed as `Some(ScalarType::Record { ... })`.  I don't think this is quite right, though!\r\n\r\nHere's the background. PostgreSQL has an explicit `unknown` type that it uses throughout planning. It slowly converts expressions from `unknown` type to known types during planning... usually. Sometimes an unknown type will slip through, and the execution pathway is resilient to that. Unknown types get special coercion behavior; e.g., a string literal has type `unknown` so that it can be freely cast to any type.\r\n\r\nRequiring every part of the system to be prepared for `unknown` types is a very C way of doing things. We've opted instead to represent `unknown` types with proper typestates. `unknown` types only exist for a brief moment in the planner, and then are transformed away.\r\n\r\n`CoercibleScalarExpr` is the way we do this. Any type of expression that _would_ be typed as `unknown` in PostgreSQL is instead held as a `CoercibleScalarExpr`; this makes the transformation to a known `ScalarExpr` explicit. Forgetting to coerce a `CoercibleScalarExpr` becomes a compile time error of `materialized`.\r\n\r\nWe currently use `Option<ScalarType>` to represent the type of a `CoercibleScalarExpr`. `None` is used to mean \"unknown\" and `Some` is used to mean \"known\". I think we instead need to expand this out into:\r\n\r\n```rust\r\nenum CoercibleScalarType {\r\n    Unknown,\r\n    Record,\r\n    Known(ScalarType),\r\n}\r\n```\r\n\r\nThe idea is that `ROW` literals get typed as their own special `unknown`-like type called `CoercibleScalarType::Record`. PostgreSQL causes this type `record`. Note that we do _not_ have an exact analog to `record`; our `ScalarType::Record { custom_oid: None, ... }` is not quite as squishy as the PostgreSQL `record` psuedotype. `ScalarType::Record` without an OID behaves _exactly_ like a named composite type in PostgreSQL except that it lacks a name. Whereas the `record` pseudotype has some notable differences from a proper composite type, like the fact that its type category is `TypeCategory::Pseudo` rather than `TypeCategory::Composite`.\r\n\r\nThis latter point is actually exactly what makes `coalesce(row(1, 2), row(1, 2)::some_equivalent_named_type)` fail. The first expression has `TypeCategory::Pseudo`, while the second expression has `TypeCategory::Composite`.\r\n\r\nI've teed up this work with #10911. If we add the `CoercibleScalarType` enum as described above, then it will be easy to match PostgreSQL's behavior in `guess_best_common_type` by declaring that `CoercibleScalarType::Record`'s type category is `TypeCategory::Pseudo` while `CoercibleScalarType::Known(ScalarType::Record { .. })`'s type category is `TypeCategory::Record`.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10927","id":1153470622,"node_id":"I_kwDOCkIcu85EwJCe","number":10927,"title":"`kafka-exactly-once-sink.td` is flaking on main","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"}],"state":"open","locked":false,"assignee":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"assignees":[{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-02-28T00:38:19Z","updated_at":"2022-02-28T18:07:39Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The `kafka-exactly-once-sink.td` test file is now flaking on `main`. See, for example: https://buildkite.com/materialize/tests/builds/29657#598f531d-8284-47bc-9f01-41723b10cce7\r\n\r\nLikely related to #10910, but loathe to revert that PR because it is important for platform. I'm going to send a PR to disable `kafka-exactly-once-sink.td` instead, but marking this as a release blocker.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10927/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10913","id":1153350833,"node_id":"PR_kwDOCkIcu84zoFEM","number":10913,"title":"design: multiwriter persistent collections","user":{"login":"petrosagg","id":939420,"node_id":"MDQ6VXNlcjkzOTQyMA==","avatar_url":"https://avatars.githubusercontent.com/u/939420?v=4","gravatar_id":"","url":"https://api.github.com/users/petrosagg","html_url":"https://github.com/petrosagg","followers_url":"https://api.github.com/users/petrosagg/followers","following_url":"https://api.github.com/users/petrosagg/following{/other_user}","gists_url":"https://api.github.com/users/petrosagg/gists{/gist_id}","starred_url":"https://api.github.com/users/petrosagg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/petrosagg/subscriptions","organizations_url":"https://api.github.com/users/petrosagg/orgs","repos_url":"https://api.github.com/users/petrosagg/repos","events_url":"https://api.github.com/users/petrosagg/events{/privacy}","received_events_url":"https://api.github.com/users/petrosagg/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-02-27T18:30:23Z","updated_at":"2022-03-01T15:48:44Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10913","html_url":"https://github.com/MaterializeInc/materialize/pull/10913","diff_url":"https://github.com/MaterializeInc/materialize/pull/10913.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10913.patch","merged_at":null},"body":"### Motivation\r\n\r\nAn implementation of `persist` that supports multiple writers would simplify immensely the amount of additional work needed for STORAGE. This design document proposes a `persist` implementation that can do that and hopefully is easy to reason about its correctness.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10906","id":1152209908,"node_id":"I_kwDOCkIcu85ErVP0","number":10906,"title":"coord,dataflow: restore humanization of source errors","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-26T19:51:16Z","updated_at":"2022-02-26T19:51:16Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\n#10904 caused a regression in the humanization of source error messages. Error messages like\r\n\r\n```\r\nSource error: materialize.public.deleting_csv: file IO: file source: unable to open file at path\r\n```\r\n\r\nare now rendered with a source ID in place of the name:\r\n\r\n```\r\nSource error: u12/2: file IO: file source: unable to open file at path\r\n```\r\n\r\nThis was necessary to avoid a panic on short notice and amounts to a partial reversion of #6791. \r\n\r\nWe should add back the humanization of the name. But this time, we should do so in the coordinator, where the name of the erroring source can be correctly ascertained at the time the error is sent to the client.\r\n\r\nHere is the start of the required work:\r\n\r\n```diff\r\ndiff --git a/src/dataflow-types/src/errors.rs b/src/dataflow-types/src/errors.rs\r\nindex d488546d9..2f55aa4e4 100644\r\n--- a/src/dataflow-types/src/errors.rs\r\n+++ b/src/dataflow-types/src/errors.rs\r\n@@ -10,10 +10,11 @@\r\n use std::fmt::Display;\r\n \r\n use bytes::BufMut;\r\n+use serde::{Deserialize, Serialize};\r\n+\r\n use mz_expr::{EvalError, SourceInstanceId};\r\n use mz_persist_types::Codec;\r\n \r\n-use serde::{Deserialize, Serialize};\r\n \r\n #[derive(Ord, PartialOrd, Clone, Debug, Eq, PartialEq, Serialize, Deserialize, Hash)]\r\n pub enum DecodeError {\r\n@@ -98,6 +99,10 @@ pub enum DataflowError {\r\n     DecodeError(DecodeError),\r\n     EvalError(EvalError),\r\n     SourceError(SourceError),\r\n+    NegativeMultiplicity {\r\n+        copies: i64,\r\n+        data: String,\r\n+    }\r\n }\r\n \r\n impl Display for DataflowError {\r\n@@ -106,6 +111,14 @@ impl Display for DataflowError {\r\n             DataflowError::DecodeError(e) => write!(f, \"Decode error: {}\", e),\r\n             DataflowError::EvalError(e) => write!(f, \"Evaluation error: {}\", e),\r\n             DataflowError::SourceError(e) => write!(f, \"Source error: {}\", e),\r\n+            DataflowError::NegativeMultiplicity { copies, data } => {\r\n+                write!(\r\n+                    f,\r\n+                    \"Invalid data: saw retractions ({}) for row that does not exist: {}\",\r\n+                    copies,\r\n+                    data,\r\n+                )\r\n+            }\r\n         }\r\n     }\r\n }\r\ndiff --git a/src/dataflow-types/src/types.rs b/src/dataflow-types/src/types.rs\r\nindex 7eec589de..93eedd4d9 100644\r\n--- a/src/dataflow-types/src/types.rs\r\n+++ b/src/dataflow-types/src/types.rs\r\n@@ -22,6 +22,7 @@ use timely::progress::frontier::Antichain;\r\n use mz_expr::{GlobalId, MirRelationExpr, MirScalarExpr, OptimizedMirRelationExpr};\r\n use mz_repr::{Diff, RelationType, Row};\r\n \r\n+use crate::DataflowError;\r\n use crate::sources::persistence::SourcePersistDesc;\r\n use crate::types::sources::SourceDesc;\r\n \r\n@@ -32,7 +33,7 @@ use crate::types::sources::SourceDesc;\r\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\r\n pub enum PeekResponse {\r\n     Rows(Vec<(Row, NonZeroUsize)>),\r\n-    Error(String),\r\n+    Error(DataflowError),\r\n     Canceled,\r\n }\r\n \r\n@@ -43,7 +44,7 @@ pub enum PeekResponse {\r\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\r\n pub enum PeekResponseUnary {\r\n     Rows(Vec<Row>),\r\n-    Error(String),\r\n+    Error(DataflowError),\r\n     Canceled,\r\n }\r\n \r\ndiff --git a/src/dataflow/src/server.rs b/src/dataflow/src/server.rs\r\nindex ed5caa7e9..31a2579b5 100644\r\n--- a/src/dataflow/src/server.rs\r\n+++ b/src/dataflow/src/server.rs\r\n@@ -30,11 +30,10 @@ use tokio::sync::mpsc;\r\n use mz_dataflow_types::client::ComputeInstanceId;\r\n use mz_dataflow_types::client::{Command, ComputeCommand, LocalClient, Response};\r\n use mz_dataflow_types::sources::AwsExternalId;\r\n-use mz_dataflow_types::PeekResponse;\r\n+use mz_dataflow_types::{DataflowError, PeekResponse};\r\n use mz_expr::{GlobalId, RowSetFinishing};\r\n use mz_ore::metrics::MetricsRegistry;\r\n use mz_ore::now::NowFn;\r\n-use mz_ore::result::ResultExt;\r\n use mz_repr::{DatumVec, Diff, Row, RowArena, Timestamp};\r\n \r\n use self::metrics::{ServerMetrics, WorkerMetrics};\r\n@@ -391,7 +390,7 @@ impl PendingPeek {\r\n     }\r\n \r\n     /// Collects data for a known-complete peek.\r\n-    fn collect_finished_data(&mut self) -> Result<Vec<(Row, NonZeroUsize)>, String> {\r\n+    fn collect_finished_data(&mut self) -> Result<Vec<(Row, NonZeroUsize)>, DataflowError> {\r\n         // Check if there exist any errors and, if so, return whatever one we\r\n         // find first.\r\n         let (mut cursor, storage) = self.trace_bundle.errs_mut().cursor();\r\n@@ -403,14 +402,13 @@ impl PendingPeek {\r\n                 }\r\n             });\r\n             if copies < 0 {\r\n-                return Err(format!(\r\n-                    \"Invalid data in source errors, saw retractions ({}) for row that does not exist: {}\",\r\n-                    copies * -1,\r\n-                    cursor.key(&storage),\r\n-                ));\r\n+                return Err(DataflowError::NegativeMultiplicity {\r\n+                    copies: copies * -1,\r\n+                    data: cursor.key(&storage).to_string(),\r\n+                });\r\n             }\r\n             if copies > 0 {\r\n-                return Err(cursor.key(&storage).to_string());\r\n+                return Err(cursor.key(&storage).clone());\r\n             }\r\n             cursor.step_key(&storage);\r\n         }\r\n@@ -452,8 +450,7 @@ impl PendingPeek {\r\n                 let mut borrow = datum_vec.borrow_with_many(&[key, row]);\r\n                 if let Some(result) = self\r\n                     .map_filter_project\r\n-                    .evaluate_into(&mut borrow, &arena, &mut row_builder)\r\n-                    .map_err_to_string()?\r\n+                    .evaluate_into(&mut borrow, &arena, &mut row_builder)?\r\n                 {\r\n                     let mut copies = 0;\r\n                     cursor.map_times(&storage, |time, diff| {\r\n@@ -462,11 +459,10 @@ impl PendingPeek {\r\n                         }\r\n                     });\r\n                     let copies: usize = if copies < 0 {\r\n-                        return Err(format!(\r\n-                            \"Invalid data in source, saw retractions ({}) for row that does not exist: {:?}\",\r\n-                            copies * -1,\r\n-                            &*borrow,\r\n-                        ));\r\n+                        return Err(DataflowError::NegativeMultiplicity {\r\n+                            copies: copies * -1,\r\n+                            data: format!(\"{:?}\", borrow),\r\n+                        });\r\n                     } else {\r\n                         copies.try_into().unwrap()\r\n                     };\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10906/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10891","id":1150907238,"node_id":"PR_kwDOCkIcu84zfPnD","number":10891,"title":"add timely-console feature","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-25T21:44:43Z","updated_at":"2022-02-25T21:44:43Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10891","html_url":"https://github.com/MaterializeInc/materialize/pull/10891","diff_url":"https://github.com/MaterializeInc/materialize/pull/10891.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10891.patch","merged_at":null},"body":"NOT READY FOR REVIEW: depends on https://github.com/TimelyDataflow/timely-dataflow/pull/452\r\n\r\n<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10891/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10886","id":1150606226,"node_id":"PR_kwDOCkIcu84zeUnn","number":10886,"title":"test wip","user":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-25T15:54:50Z","updated_at":"2022-02-25T19:12:58Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10886","html_url":"https://github.com/MaterializeInc/materialize/pull/10886","diff_url":"https://github.com/MaterializeInc/materialize/pull/10886.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10886.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\n### Motivation\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Tips for reviewer\r\n\r\n<!--\r\nLeave some tips for your reviewer, like:\r\n\r\n    * The diff is much smaller if viewed with whitespace hidden.\r\n    * [Some function/module/file] deserves extra attention.\r\n    * [Some function/module/file] is pure code movement and only needs a skim.\r\n\r\nDelete this section if no tips.\r\n-->\r\n\r\n### Testing\r\n\r\n- [ ] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - <!-- Add release notes here or explicitly state that there are no user-facing behavior changes. -->\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10886/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10879","id":1149844907,"node_id":"I_kwDOCkIcu85EiT2r","number":10879,"title":"JWK-based authentication: log the reason for failure","user":{"login":"antifuchs","id":11864,"node_id":"MDQ6VXNlcjExODY0","avatar_url":"https://avatars.githubusercontent.com/u/11864?v=4","gravatar_id":"","url":"https://api.github.com/users/antifuchs","html_url":"https://github.com/antifuchs","followers_url":"https://api.github.com/users/antifuchs/followers","following_url":"https://api.github.com/users/antifuchs/following{/other_user}","gists_url":"https://api.github.com/users/antifuchs/gists{/gist_id}","starred_url":"https://api.github.com/users/antifuchs/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antifuchs/subscriptions","organizations_url":"https://api.github.com/users/antifuchs/orgs","repos_url":"https://api.github.com/users/antifuchs/repos","events_url":"https://api.github.com/users/antifuchs/events{/privacy}","received_events_url":"https://api.github.com/users/antifuchs/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"assignees":[{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-02-24T22:41:50Z","updated_at":"2022-02-24T22:41:50Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nRight now, we silently reject login attempts, and it's great to be silent to the person requesting the login! But it would be great if the server could log that a login attempt failed, and why it failed. I'd love to see the following things in the log:\r\n\r\n* reason for failure, as close as we can get it (mismatching JWK, tenant, email?)\r\n* remote IP address","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10879/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10878","id":1149787432,"node_id":"PR_kwDOCkIcu84zbmPl","number":10878,"title":"[kafka sink] Force compaction in EOS test suite","user":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-02-24T21:54:39Z","updated_at":"2022-03-08T23:12:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10878","html_url":"https://github.com/MaterializeInc/materialize/pull/10878","diff_url":"https://github.com/MaterializeInc/materialize/pull/10878.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10878.patch","merged_at":null},"body":"Update kafka EOS test to make it more robustly guarantee timestamp compaction has occurred before restarting","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10876","id":1149689368,"node_id":"I_kwDOCkIcu85Eht4Y","number":10876,"title":"kafka exactly once sink: transaction timeout maybe hoses sink","user":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":2187378159,"node_id":"MDU6TGFiZWwyMTg3Mzc4MTU5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sink","name":"A-sink","color":"5fefa7","default":false,"description":"Area: sinks"}],"state":"open","locked":false,"assignee":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"assignees":[{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-02-24T19:55:34Z","updated_at":"2022-03-09T15:54:20Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nmaster\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nhttps://github.com/MaterializeInc/product/issues/136\r\n\r\n- Kafka transaction timeout causes one of our transaction state transitions to trip an assert in rdkafka: https://github.com/edenhill/librdkafka/blob/master/src/rdkafka_txnmgr.c#L237.  We've seen this occur in a customer running v0.12 (which predates some pretty big sink refactors)\r\n\r\nI'm not sure that we handle this well so the purpose of this ticket is to:\r\n1) Investigate and determine if this is still an issue\r\n2) Fix it if necessary\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10875","id":1149647541,"node_id":"PR_kwDOCkIcu84zbIv_","number":10875,"title":"Pass `librdkafka` debug level down as a value","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-02-24T19:05:26Z","updated_at":"2022-02-25T19:51:35Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10875","html_url":"https://github.com/MaterializeInc/materialize/pull/10875","diff_url":"https://github.com/MaterializeInc/materialize/pull/10875.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10875.patch","merged_at":null},"body":"This pr implements the changes described in https://github.com/MaterializeInc/materialize/issues/10441 (minus one). \r\nIt accomplishes this by:\r\n- adding more helper functions\r\n- pre-determining the `tracing::Level` for `librdkafka` based on the `Targets` for the fmt layer\r\n- passing this level down. We have a few `Context` structs, mainly `CoordContext` so that this level can be passed to purification, and `RenderContext` to be passed into source and sink creation\r\n  - In a later pr, more information (likely the new aws information adde by I think @quodlibetor ) can be moved into these contexts, I believe\r\n- Passing this level into the new `ClientConfig::new` wrapper, and `conditionally enabling `debug=all`. It is not 100% to me what the difference between these is, but I believe we should leave it as is for now and investigate later, to prevent behavioral changes\r\nWhat is not accomplished:\r\n- removing the filter from the metrics layer. In my testing, the regression existed in at least the `KafkaUpsert` feature-benchmark. This benchmark is pretty noisy, but after some investigation, I believe the regression is due to us not longer hitting this fast path: https://docs.rs/tracing/latest/src/tracing/macros.rs.html#2064-2069 that is checked before every tracing call.\r\n  - Its possible that turning off `tracing-log` will help, but I doubt removing this filter will ever be perf-neutral: We are simply 1. checking `enabled` more and 2. dispatching more events (i should have realized this would have happened)\r\n  - Even with the regression, this change is worth it, as it still means the `debug=all` case is correctly setup\r\n  - I think in the platform world, I think we will have to accept this regression, especially because turning it on `tokio-console`, and, more importantly, `opentelemetry` will cause it to exist anyways. We probably need to have some kind of proposal on the default, single-instance setup for mz, vs, the cloud/platform setup, which configures tracing in a more aggressive way.\r\n  - @benesch @philip-stoev it would be nice to get some pointers, after this lands, on how to do a full perf test when removing the filter from other other layers\r\n  \r\nOverall, I think this pr improves the general flow of values and extra context into sources, and fixes the mis-use of `tracing::enabled!` for when we DO have more layers enabled (which may only be the `tokio-console` option right now), so i think it is correct to land it as is\r\n\r\n### Motivation\r\n\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n   * This PR refactors existing code.\r\nas described above and in https://github.com/MaterializeInc/materialize/issues/10441\r\n\r\n### Tips for reviewer\r\n\r\n- bottom pr: refactor so that in the later commit, `ClientConfig::new` is always called correctly (through ore)\r\n- second pr: the main refactor, described above:\r\n- third pr: this is a description of an absolutely bizarre bug, and after multiple hours with the tracing team, the conclusion was: lets not use `tracing-log` anymore (we are VERY close to this). I think `rdkafka` is the last MEANINGFUL dep that used `log`\r\n- top pr: a TODO describing the performance followup\r\n\r\n### Testing\r\n\r\n- [N/A] This PR has adequate test coverage / QA involvement has been duly considered.\r\ntested locally\r\n\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10871","id":1149458747,"node_id":"I_kwDOCkIcu85Eg1k7","number":10871,"title":"Optimization/dataflow: have indexes support implicit casts","user":{"login":"wangandi","id":5522362,"node_id":"MDQ6VXNlcjU1MjIzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/5522362?v=4","gravatar_id":"","url":"https://api.github.com/users/wangandi","html_url":"https://github.com/wangandi","followers_url":"https://api.github.com/users/wangandi/followers","following_url":"https://api.github.com/users/wangandi/following{/other_user}","gists_url":"https://api.github.com/users/wangandi/gists{/gist_id}","starred_url":"https://api.github.com/users/wangandi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wangandi/subscriptions","organizations_url":"https://api.github.com/users/wangandi/orgs","repos_url":"https://api.github.com/users/wangandi/repos","events_url":"https://api.github.com/users/wangandi/events{/privacy}","received_events_url":"https://api.github.com/users/wangandi/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":2456706162,"node_id":"MDU6TGFiZWwyNDU2NzA2MTYy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/needs-discussion","name":"needs-discussion","color":"F9D0C4","default":false,"description":"Requires discussion before work proceeds"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-02-24T15:57:13Z","updated_at":"2022-03-10T16:14:45Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"## TL;DR\r\nFor the convenience of the user, indexes on a column should be usable also for contexts where the column has been cast implicitly to another type when the cast does not lose information (i.e., it is an injective function).\r\n\r\n## Description\r\n\r\nWhen a user enters any SQL query:\r\n```\r\nselect * from foo where foo.a = 'to_match' \r\n```\r\nThe SQL layer may decide to implicitly cast `foo.a` so that it is the same type as 'to_match'. This implicit cast may happen even if you cast 'to_match' to become the same type as `foo.a`.\r\n\r\nExample:\r\n\r\n```\r\nmaterialize=> explain raw plan for select selectcol from test where varcharcol = cast('string' as character varying);\r\n                              Raw Plan                              \r\n--------------------------------------------------------------------\r\n %0 =                                                              +\r\n | Get materialize.public.test (u19)                               +\r\n | Filter (varchartostr(#1) = varchartostr(strtovarchar(\"string\")))+\r\n | Project (#0)  \r\n```\r\n\r\nCurrently, if you create an index on a column, the index cannot be used in contexts where it has been implicitly cast to something else. In the query above, you would need an index on `varcharcol::string` instead of an index on `varcharcol` to speed up the filter. But this is not readily apparent to the user. \r\n\r\n## Linked Tickets\r\n\r\n- Case of an implicit cast where the in-memory representation is identical: [#10738](10738).\r\n- Case of an implicit cast where the in-memory representation is different: [#4171](4171).","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10870","id":1149370562,"node_id":"I_kwDOCkIcu85EggDC","number":10870,"title":"sql: values of unknown type too aggressively cast to text","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-02-24T14:41:14Z","updated_at":"2022-02-25T11:27:48Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv21.0.0\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nIn PG, values of unknown types (e.g. values surrounded in quotes that look like text) are treated as unknown types later in the planning process than they are in Materialize:\r\n\r\nPG:\r\n\r\n```\r\nSELECT (ROW('fuzzy dice')).f1;\r\nERROR:  failed to find conversion function from unknown to text\r\n```\r\n\r\nMZ:\r\n```\r\n SELECT (ROW('fuzzy dice')).f1;\r\n     f1     \r\n------------\r\n fuzzy dice\r\n```\r\n```\r\nselect pg_typeof( (ROW('fuzzy dice')).f1);\r\n pg_typeof \r\n-----------\r\n text\r\n```\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/events","html_url":"https://github.com/MaterializeInc/materialize/pull/10868","id":1149292591,"node_id":"PR_kwDOCkIcu84zZ9W8","number":10868,"title":"sql: make literal records coercible into scalar records","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2022-02-24T13:29:55Z","updated_at":"2022-02-28T16:23:19Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/MaterializeInc/materialize/pulls/10868","html_url":"https://github.com/MaterializeInc/materialize/pull/10868","diff_url":"https://github.com/MaterializeInc/materialize/pull/10868.diff","patch_url":"https://github.com/MaterializeInc/materialize/pull/10868.patch","merged_at":null},"body":"<!--\r\nDescribe the contents of the PR briefly but completely.\r\n\r\nIf you write detailed commit messages, it is acceptable to copy/paste them\r\nhere, or write \"see commit messages for details.\" If there is only one commit\r\nin the PR, GitHub will have already added its commit message above.\r\n-->\r\n\r\nGot sidetracked by the interesting error of `ERROR:  VALUES cannot be cast to uniform type: record(f1: integer) vs text` resulting from a `select least(row(1))` statement and got curious where `text` was coming from. We now have an answer!\r\n\r\nWhen coercing a `LiteralRecord` into a scalar type, we produced a `None` column type. Homogenizing functions like `least` try to guess the most appropriate return type, and defaults to `text` if there are no type hints.\r\n\r\nThis PR adds in coercion of `LiteralRecords` into scalar `Record` types and adds in several tests.\r\n\r\n### Motivation\r\n\r\nFixes https://github.com/MaterializeInc/materialize/issues/10422\r\nFixes https://github.com/MaterializeInc/materialize/issues/8597\r\n\r\n<!--\r\nWhich of the following best describes the motivation behind this PR?\r\n\r\n  * This PR fixes a recognized bug.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR adds a known-desirable feature.\r\n\r\n    [Ensure issue is linked somewhere.]\r\n\r\n  * This PR fixes a previously unreported bug.\r\n\r\n    [Describe the bug in detail, as if you were filing a bug report.]\r\n\r\n  * This PR adds a feature that has not yet been specified.\r\n\r\n    [Write a brief specification for the feature, including justification\r\n     for its inclusion in Materialize, as if you were writing the original\r\n     feature specification.]\r\n\r\n   * This PR refactors existing code.\r\n\r\n    [Describe what was wrong with the existing code, if it is not obvious.]\r\n-->\r\n\r\n### Testing\r\n\r\n- [x] This PR has adequate test coverage / QA involvement has been duly considered.\r\n\r\n### Release notes\r\n\r\nThis PR includes the following [user-facing behavior changes](https://github.com/MaterializeInc/materialize/blob/main/doc/developer/guide-changes.md#what-changes-require-a-release-note):\r\n\r\n  - Fixes `ROW` incompatibility in functions and `VALUES` clauses {{% gh 8597 %}} {{% gh 10422 %}}","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10859","id":1148699351,"node_id":"I_kwDOCkIcu85Ed8LX","number":10859,"title":"Support Writing Metadata to Kafka Headers in Sinks","user":{"login":"nmeagan11","id":19657850,"node_id":"MDQ6VXNlcjE5NjU3ODUw","avatar_url":"https://avatars.githubusercontent.com/u/19657850?v=4","gravatar_id":"","url":"https://api.github.com/users/nmeagan11","html_url":"https://github.com/nmeagan11","followers_url":"https://api.github.com/users/nmeagan11/followers","following_url":"https://api.github.com/users/nmeagan11/following{/other_user}","gists_url":"https://api.github.com/users/nmeagan11/gists{/gist_id}","starred_url":"https://api.github.com/users/nmeagan11/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nmeagan11/subscriptions","organizations_url":"https://api.github.com/users/nmeagan11/orgs","repos_url":"https://api.github.com/users/nmeagan11/repos","events_url":"https://api.github.com/users/nmeagan11/events{/privacy}","received_events_url":"https://api.github.com/users/nmeagan11/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":2187378159,"node_id":"MDU6TGFiZWwyMTg3Mzc4MTU5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sink","name":"A-sink","color":"5fefa7","default":false,"description":"Area: sinks"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-23T23:44:50Z","updated_at":"2022-02-23T23:44:50Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Feature request\n\nRelevant Use Case and Internal Discussion: https://materializeinc.slack.com/archives/C01CFKM1QRF/p1645606997350319","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10859/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10854","id":1148624879,"node_id":"I_kwDOCkIcu85Edp_v","number":10854,"title":"Consider implementing sane comparisons for Intervals","user":{"login":"jkosh44","id":10800303,"node_id":"MDQ6VXNlcjEwODAwMzAz","avatar_url":"https://avatars.githubusercontent.com/u/10800303?v=4","gravatar_id":"","url":"https://api.github.com/users/jkosh44","html_url":"https://github.com/jkosh44","followers_url":"https://api.github.com/users/jkosh44/followers","following_url":"https://api.github.com/users/jkosh44/following{/other_user}","gists_url":"https://api.github.com/users/jkosh44/gists{/gist_id}","starred_url":"https://api.github.com/users/jkosh44/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkosh44/subscriptions","organizations_url":"https://api.github.com/users/jkosh44/orgs","repos_url":"https://api.github.com/users/jkosh44/repos","events_url":"https://api.github.com/users/jkosh44/events{/privacy}","received_events_url":"https://api.github.com/users/jkosh44/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"},{"id":1465752765,"node_id":"MDU6TGFiZWwxNDY1NzUyNzY1","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-sql","name":"A-sql","color":"5fefa7","default":false,"description":"Area: SQL planning"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-02-23T22:00:58Z","updated_at":"2022-02-23T22:02:40Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\r\n\r\nThere's no requirement in Dataflow/Materialize for ordering to be deterministic, that limitation only exists with equality. So as far as Dataflow/Materialize is concerned, we can implement `PartialOrd` and `Ord` on Interval such that we consider 24 hours equal to 1 day (and 30 days equal to 1 month).\r\n\r\nHowever I do think there is a limitation in Rust that prevents this. The `PartialOrd` docs contain the following (https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html):\r\n\r\n>    The methods of this trait must be consistent with each other and with those of PartialEq in the following sense:\r\n    a == b if and only if partial_cmp(a, b) == Some(Equal).\r\n    a < b if and only if partial_cmp(a, b) == Some(Less) (ensured by the default implementation).\r\n    a > b if and only if partial_cmp(a, b) == Some(Greater) (ensured by the default implementation).\r\n    a <= b if and only if a < b || a == b (ensured by the default implementation).\r\n    a >= b if and only if a > b || a == b (ensured by the default implementation).\r\n    a != b if and only if !(a == b) (already part of PartialEq).\r\n\r\nSo I'm not sure that's it's possible to implement `PartialOrd` in a \"sane\" way where we consider 24 hours == 1 day without also implementing `Eq` and `PartialEq` to consider 24 hours == 1 day.\r\n\r\nThough there is a potential workaround I was considering where we arbitrarily say that 1 day > 24 hours, and 1 day < 24 hours 1 microsecond. That may allow us to sanely order Interval's without breaking the requirement Rust imposes on `PartialOrd` and `PartialEq`.\r\n\r\nOnce #10566 is fixed then we can fully support 24 hours == 1 day.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10849","id":1148478509,"node_id":"I_kwDOCkIcu85EdGQt","number":10849,"title":"Support SELECTs with AS OF clause in EXPLAIN","user":{"login":"andrioni","id":159177,"node_id":"MDQ6VXNlcjE1OTE3Nw==","avatar_url":"https://avatars.githubusercontent.com/u/159177?v=4","gravatar_id":"","url":"https://api.github.com/users/andrioni","html_url":"https://github.com/andrioni","followers_url":"https://api.github.com/users/andrioni/followers","following_url":"https://api.github.com/users/andrioni/following{/other_user}","gists_url":"https://api.github.com/users/andrioni/gists{/gist_id}","starred_url":"https://api.github.com/users/andrioni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrioni/subscriptions","organizations_url":"https://api.github.com/users/andrioni/orgs","repos_url":"https://api.github.com/users/andrioni/repos","events_url":"https://api.github.com/users/andrioni/events{/privacy}","received_events_url":"https://api.github.com/users/andrioni/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-23T19:14:40Z","updated_at":"2022-02-23T19:14:40Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nRight now `EXPLAIN` can only take a query (which is a subset of what can be done in a `SELECT` statement), not a fully-formed `SELECT` statement, disagreeing with [our documentation](https://materialize.com/docs/sql/explain/). The main known practical limitation is that `SELECT` statements with an `AS OF` clause are currently not supported by `EXPLAIN`.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10849/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10840","id":1147911324,"node_id":"I_kwDOCkIcu85Ea7yc","number":10840,"title":"loss of interactivity when running .td tests","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":3052793141,"node_id":"MDU6TGFiZWwzMDUyNzkzMTQx","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/P1","name":"P1","color":"d10000","default":false,"description":"Priority: critical issue, panic, etc. drop what you're doing and fix immediately"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2022-02-23T10:27:27Z","updated_at":"2022-03-02T12:29:23Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\n\nv0.20.1-dev (30e6e61db)\n\n### How did you install Materialize?\n\nBuilt from source\n\n### What was the issue?\n\nRunning the following sequences of testdrive tests results in a hang:\r\n- testdrive + redpanda\r\n- persistence tests + confluent\r\n\r\nThe symptoms are as follows:\r\n- no new SQL connections are accepted\r\n- the mzdata/blob directory has just a couple of blobs\r\n- the timestamps table has ~70 entries\r\n- memory consumption nominal\r\n- CPU usage slightly above 100%\r\n-  perf report has librdkafka consuming all the CPU:\r\n```\r\n+   17.50%     0.10%  rdk:broker0      [kernel.kallsyms]   [k] entry_SYSCALL_64_after_hwframe                                                                                                                ◆\r\n+   17.36%     0.15%  rdk:broker0      [kernel.kallsyms]   [k] do_syscall_64                                                                                                                                 ▒\r\n+   10.14%     0.08%  rdk:broker0      [kernel.kallsyms]   [k] schedule                                                                                                                                      ▒\r\n+   10.02%     0.58%  rdk:broker0      [kernel.kallsyms]   [k] __sched_text_start                                                                                                                            ▒\r\n+    9.50%     0.29%  rdk:broker0      libc-2.31.so        [.] __poll                                                                                                                                        ▒\r\n+    9.38%     0.51%  rdk:main         libc-2.31.so        [.] clock_gettime                                                                                                                                 ▒\r\n+    8.78%     0.56%  rdk:main         [vdso]              [.] __vdso_clock_gettime                                                                                                                          ▒\r\n+    8.30%     0.09%  rdk:broker0      [kernel.kallsyms]   [k] __x64_sys_poll                                                                                                                                ▒\r\n+    8.08%     0.00%  rdk:broker0      [unknown]           [k] 0x0000000000000001                                                                                                                            ▒\r\n+    8.01%     0.33%  rdk:broker0      [kernel.kallsyms]   [k] do_sys_poll                                                                                                                                   ▒\r\n+    8.01%     0.72%  rdk:broker0      libpthread-2.31.so  [.] pthread_cond_timedwait@@GLIBC_2.3.2                                                                                                           ▒\r\n+    7.78%     0.06%  coordinator      [kernel.kallsyms]   [k] entry_SYSCALL_64_after_hwframe                                                                                                                ▒\r\n+    7.68%     0.12%  coordinator      [kernel.kallsyms]   [k] do_syscall_64                                                                                                                                 ▒\r\n+    6.93%     0.00%  rdk:main         [vdso]              [.] 0x00007ffc4a6f86cb                                                                                                                            ▒\r\n+    6.87%     0.09%  rdk:broker0      [kernel.kallsyms]   [k] __x64_sys_futex                                                                                                                               ▒\r\n+    6.72%     6.72%  rdk:main         [vdso]              [.] 0x00000000000006cb                                                                                                                            ▒\r\n+    6.68%     0.05%  rdk:broker0      [kernel.kallsyms]   [k] do_futex                                                                                                                                      ▒\r\n+    6.15%     0.18%  rdk:broker0      [kernel.kallsyms]   [k] futex_wait                                                                                                                                    ▒\r\n+    5.65%     0.07%  rdk:broker0      [kernel.kallsyms]   [k] futex_wait_queue_me                                                                                                                           ▒\r\n+    5.32%     0.06%  rdk:broker0      [kernel.kallsyms]   [k] poll_schedule_timeout.constprop.0                                                                                                             ▒\r\n+    5.26%     0.01%  rdk:broker0      [kernel.kallsyms]   [k] schedule_hrtimeout_range                                                                                                                      ▒\r\n+    5.24%     0.05%  rdk:broker0      [kernel.kallsyms]   [k] schedule_hrtimeout_range_clock                                                                                                                ▒\r\n+    3.68%     0.30%  rdk:broker0      [kernel.kallsyms]   [k] __perf_event_task_sched_out                                                                                                                   ▒\r\n```\r\n\r\n- there are 1468 threads, mostly Kafka of course.\n\n### Relevant log output\n\n_No response_","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10839","id":1147807550,"node_id":"I_kwDOCkIcu85Eaic-","number":10839,"title":"Map out how different clients and drivers deal with Postgres notices","user":{"login":"andrioni","id":159177,"node_id":"MDQ6VXNlcjE1OTE3Nw==","avatar_url":"https://avatars.githubusercontent.com/u/159177?v=4","gravatar_id":"","url":"https://api.github.com/users/andrioni","html_url":"https://github.com/andrioni","followers_url":"https://api.github.com/users/andrioni/followers","following_url":"https://api.github.com/users/andrioni/following{/other_user}","gists_url":"https://api.github.com/users/andrioni/gists{/gist_id}","starred_url":"https://api.github.com/users/andrioni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrioni/subscriptions","organizations_url":"https://api.github.com/users/andrioni/orgs","repos_url":"https://api.github.com/users/andrioni/repos","events_url":"https://api.github.com/users/andrioni/events{/privacy}","received_events_url":"https://api.github.com/users/andrioni/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-23T08:41:13Z","updated_at":"2022-02-23T08:41:13Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nPostgres has a mechanism to send messages to clients with different levels of severity: from `DEBUG` to `WARNING` (with `EXCEPTION` being equivalent to a full-fledged error). It would be good to map out how different clients and drivers deal with these messages, so that we can:\r\n1. Document it for end-users\r\n2. Make internal prioritization decisions regarding when/how to use these messages.\r\n\r\nThis might also inform further architecture decisions, e.g. should we reuse these messages to push things to the Cloud product.\r\n\r\nRelated issue: #4290","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10839/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10837","id":1147474186,"node_id":"I_kwDOCkIcu85EZREK","number":10837,"title":"Add precision type modifier to time, timestamp and interval types to improve compatibility with Postgres","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"labels":[{"id":1244583498,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk4","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-feature","name":"C-feature","color":"7842aa","default":false,"description":"Category: new feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-02-22T23:35:03Z","updated_at":"2022-02-27T10:51:04Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Feature request\n\nThe Postgres definitions of `time`, `timestamp` and `interval` all support an optional type modifier to limit digits of precision retained for the seconds field which is not currently present in the equivalent Materialize types. The current Materialize behavior operates using the maximum digits Postgres supports, so Materialize will never return answers which are less precise than the equivalent query in Postgres; however, the difference in precision can compound through arithmetic operations and yield meaningfully different answers to the same query.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837/timeline","performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821","repository_url":"https://api.github.com/repos/MaterializeInc/materialize","labels_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/labels{/name}","comments_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/comments","events_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/events","html_url":"https://github.com/MaterializeInc/materialize/issues/10821","id":1147082491,"node_id":"I_kwDOCkIcu85EXxb7","number":10821,"title":"Predicates are not propagated through an inner equi-join","user":{"login":"aalexandrov","id":1071946,"node_id":"MDQ6VXNlcjEwNzE5NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1071946?v=4","gravatar_id":"","url":"https://api.github.com/users/aalexandrov","html_url":"https://github.com/aalexandrov","followers_url":"https://api.github.com/users/aalexandrov/followers","following_url":"https://api.github.com/users/aalexandrov/following{/other_user}","gists_url":"https://api.github.com/users/aalexandrov/gists{/gist_id}","starred_url":"https://api.github.com/users/aalexandrov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aalexandrov/subscriptions","organizations_url":"https://api.github.com/users/aalexandrov/orgs","repos_url":"https://api.github.com/users/aalexandrov/repos","events_url":"https://api.github.com/users/aalexandrov/events{/privacy}","received_events_url":"https://api.github.com/users/aalexandrov/received_events","type":"User","site_admin":false},"labels":[{"id":1244583496,"node_id":"MDU6TGFiZWwxMjQ0NTgzNDk2","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/C-bug","name":"C-bug","color":"7842aa","default":false,"description":"Category: something is broken"},{"id":2456706162,"node_id":"MDU6TGFiZWwyNDU2NzA2MTYy","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/needs-discussion","name":"needs-discussion","color":"F9D0C4","default":false,"description":"Requires discussion before work proceeds"},{"id":3020087139,"node_id":"MDU6TGFiZWwzMDIwMDg3MTM5","url":"https://api.github.com/repos/MaterializeInc/materialize/labels/A-optimization","name":"A-optimization","color":"5fefa7","default":false,"description":"Area: query optimization and transformation"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-22T15:55:09Z","updated_at":"2022-02-22T17:38:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### What version of Materialize are you using?\r\n\r\nv0.20.1-dev (edfc3b017)\r\n\r\n### How did you install Materialize?\r\n\r\nBuilt from source\r\n\r\n### What was the issue?\r\n\r\nSee details and reproduction instructions:\r\n\r\n* [in this writeup (Item No 5)](https://github.com/aalexandrov/mzt-repos/blob/main/simplify_outer_joins/PR_10679.md#item-no-5),\r\n* [in this comment (summarized from the above)](https://github.com/MaterializeInc/materialize/pull/10679#issuecomment-1047937546).\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10821/timeline","performed_via_github_app":null}
