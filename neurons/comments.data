{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062938532","html_url":"https://github.com/MaterializeInc/materialize/issues/11130#issuecomment-1062938532","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130","id":1062938532,"node_id":"IC_kwDOCkIcu84_Wyek","user":{"login":"jkosh44","id":10800303,"node_id":"MDQ6VXNlcjEwODAwMzAz","avatar_url":"https://avatars.githubusercontent.com/u/10800303?v=4","gravatar_id":"","url":"https://api.github.com/users/jkosh44","html_url":"https://github.com/jkosh44","followers_url":"https://api.github.com/users/jkosh44/followers","following_url":"https://api.github.com/users/jkosh44/following{/other_user}","gists_url":"https://api.github.com/users/jkosh44/gists{/gist_id}","starred_url":"https://api.github.com/users/jkosh44/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkosh44/subscriptions","organizations_url":"https://api.github.com/users/jkosh44/orgs","repos_url":"https://api.github.com/users/jkosh44/repos","events_url":"https://api.github.com/users/jkosh44/events{/privacy}","received_events_url":"https://api.github.com/users/jkosh44/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T13:48:01Z","updated_at":"2022-03-09T13:48:01Z","author_association":"CONTRIBUTOR","body":"Yeah I think this is related to #5302, though I probably won't get to it until the later half of that issue.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062938532/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061012791","html_url":"https://github.com/MaterializeInc/materialize/pull/11084#issuecomment-1061012791","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11084","id":1061012791,"node_id":"IC_kwDOCkIcu84_PcU3","user":{"login":"CLAassistant","id":11571300,"node_id":"MDQ6VXNlcjExNTcxMzAw","avatar_url":"https://avatars.githubusercontent.com/u/11571300?v=4","gravatar_id":"","url":"https://api.github.com/users/CLAassistant","html_url":"https://github.com/CLAassistant","followers_url":"https://api.github.com/users/CLAassistant/followers","following_url":"https://api.github.com/users/CLAassistant/following{/other_user}","gists_url":"https://api.github.com/users/CLAassistant/gists{/gist_id}","starred_url":"https://api.github.com/users/CLAassistant/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/CLAassistant/subscriptions","organizations_url":"https://api.github.com/users/CLAassistant/orgs","repos_url":"https://api.github.com/users/CLAassistant/repos","events_url":"https://api.github.com/users/CLAassistant/events{/privacy}","received_events_url":"https://api.github.com/users/CLAassistant/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T18:46:35Z","updated_at":"2022-03-07T20:08:12Z","author_association":"NONE","body":"[![CLA assistant check](https://cla-assistant.io/pull/badge/not_signed)](https://cla-assistant.io/MaterializeInc/materialize?pullRequest=11084) <br/>Thank you for your submission! We really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla-assistant.io/MaterializeInc/materialize?pullRequest=11084) before we can accept your contribution.<br/> <br/> **Note:** In case you are already a member of **jepsen-io**, there is no need to sign the CLA again because **jepsen-io** has already signed the (Corporate) CLA, hence just make sure that your membership is public. If you are not a member of **jepsen-io** then you need to accept our CLA. <br/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https://cla-assistant.io/check/MaterializeInc/materialize?pullRequest=11084) it.</sub>","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061012791/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1053813824","html_url":"https://github.com/MaterializeInc/materialize/issues/10934#issuecomment-1053813824","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934","id":1053813824,"node_id":"IC_kwDOCkIcu84-z-xA","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T02:35:02Z","updated_at":"2022-02-28T02:35:02Z","author_association":"MEMBER","body":"cc @pH14 @sploiselle ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1053813824/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054440058","html_url":"https://github.com/MaterializeInc/materialize/issues/10934#issuecomment-1054440058","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10934","id":1054440058,"node_id":"IC_kwDOCkIcu84-2Xp6","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T16:33:40Z","updated_at":"2022-02-28T16:33:40Z","author_association":"MEMBER","body":"Hrm, this interacts a bit poorly with `pg_typeof`. We might need to special case the hell out of `pg_typeof` so that it operates on coercible scalar types directly.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054440058/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064028594","html_url":"https://github.com/MaterializeInc/materialize/issues/11155#issuecomment-1064028594","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155","id":1064028594,"node_id":"IC_kwDOCkIcu84_a8my","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T12:58:28Z","updated_at":"2022-03-10T12:58:28Z","author_association":"MEMBER","body":"This problem has several facets, but concerning the dataflow construction we seem to be importing all available indexes and retain their tokens, even if we're only reading from a subset of the indexes. Specifically, the following code states this behavior: https://github.com/MaterializeInc/materialize/blob/350e79f51c33a5b243cd18b27f9866f44bf5e72d/src/dataflow-types/src/types.rs#L317-L319\r\n\r\nWhile fixing this wouldn't prevent the quadratic behavior for constructing a dataflow plan, it would avoid the quadratic cost while rendering and maintaining the index.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064028594/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064031974","html_url":"https://github.com/MaterializeInc/materialize/issues/11155#issuecomment-1064031974","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11155","id":1064031974,"node_id":"IC_kwDOCkIcu84_a9bm","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T13:02:08Z","updated_at":"2022-03-10T13:02:08Z","author_association":"MEMBER","body":"> This same case works like charm on v0.22.0 (a7c727ac4) , so it appears different from https://github.com/MaterializeInc/materialize/issues/4887 that has been there forever. Note that the test case does not ingest any data nor it runs any SELECTs.\r\n\r\nI believe what has changed since 0.22 is that we now import more than one index for sources (e.g. tables). Imo, that is now *good*, and what is bad is that we do not remove the indexes we do not use. I believe that addressing #4887 would address this problem.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064031974/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064539451","html_url":"https://github.com/MaterializeInc/materialize/issues/11072#issuecomment-1064539451","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072","id":1064539451,"node_id":"IC_kwDOCkIcu84_c5U7","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T21:53:26Z","updated_at":"2022-03-10T21:53:26Z","author_association":"CONTRIBUTOR","body":"@philip-stoev How often did you see this fail? I am running in repeatedly (not using mzcompose, but with `--workers 1` and with a fresh mz and mzdata each time), and I haven't seen a failure with like 10+ runs","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064539451/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064549076","html_url":"https://github.com/MaterializeInc/materialize/issues/11072#issuecomment-1064549076","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072","id":1064549076,"node_id":"IC_kwDOCkIcu84_c7rU","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T22:06:55Z","updated_at":"2022-03-10T22:06:55Z","author_association":"MEMBER","body":"Are you using a release build?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064549076/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064559264","html_url":"https://github.com/MaterializeInc/materialize/issues/11072#issuecomment-1064559264","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072","id":1064559264,"node_id":"IC_kwDOCkIcu84_c-Kg","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T22:12:53Z","updated_at":"2022-03-10T22:12:53Z","author_association":"CONTRIBUTOR","body":"not when testing locally, when running ` while bash -c -e \"./mzcompose down -v ; ./mzcompose run default --workers 1 joins.td\" ; do : ; done` on a `dev-box` (t3.2xlarge, not a c5.2xlarge, but I can't imagine that matters), I still dont see a repro. The nightly failed with this test this morning, on this commit: https://github.com/MaterializeInc/materialize/commit/2ab33038daf6643c07ffd2cf73c2d5ce327d3d9f\r\nI dont see any relevant changes on main past that","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064559264/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064631234","html_url":"https://github.com/MaterializeInc/materialize/issues/11072#issuecomment-1064631234","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072","id":1064631234,"node_id":"IC_kwDOCkIcu84_dPvC","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T23:51:20Z","updated_at":"2022-03-10T23:51:20Z","author_association":"CONTRIBUTOR","body":"`release` build to trigger this WAY more, adding a sleep in various places seems to help as well, but in some cases it appears to be consistently triggered even without any sleeping, perhaps my kafka setup is just in the right place locally to trigger it","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064631234/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064636691","html_url":"https://github.com/MaterializeInc/materialize/issues/11072#issuecomment-1064636691","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11072","id":1064636691,"node_id":"IC_kwDOCkIcu84_dRET","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T00:01:58Z","updated_at":"2022-03-11T00:01:58Z","author_association":"CONTRIBUTOR","body":"This is the `EXPLAIN` I get:\r\nSource materialize.public.mods_unmat (u11):\r\n| Project (#0, #1)\r\n\r\nQuery:\r\n%0 =\r\n| Get materialize.public.names (u7)\r\n| Map null, null\r\n\r\n%1 =\r\n| Get materialize.public.mods_unmat (u11)\r\n| Map null, null\r\n| Project (#2, #3, #0, #1)\r\n\r\n%2 =\r\n| Union %0 %1\r\n\r\nto me this looks like (correctly, it noticed 0=1 is always false) it turned the RAW plan:\r\n%0 =\r\n| Get materialize.public.names (u13)\r\n\r\n%1 =\r\n| Get materialize.public.mods_unmat (u17)\r\n\r\n%2 =\r\n| FullOuterJoin %0 %1 on (1 = 0)\r\ninto just a union of 2 projections, where the first adds the null, null to the materialized source (I assume using its index), and the second…builds an index for the correct columns in the unmaterialized source, as that doesn't have an index yet? Does this all make sense? when I squint it seems right","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064636691/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063034386","html_url":"https://github.com/MaterializeInc/materialize/issues/11136#issuecomment-1063034386","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11136","id":1063034386,"node_id":"IC_kwDOCkIcu84_XJ4S","user":{"login":"danhhz","id":52528,"node_id":"MDQ6VXNlcjUyNTI4","avatar_url":"https://avatars.githubusercontent.com/u/52528?v=4","gravatar_id":"","url":"https://api.github.com/users/danhhz","html_url":"https://github.com/danhhz","followers_url":"https://api.github.com/users/danhhz/followers","following_url":"https://api.github.com/users/danhhz/following{/other_user}","gists_url":"https://api.github.com/users/danhhz/gists{/gist_id}","starred_url":"https://api.github.com/users/danhhz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danhhz/subscriptions","organizations_url":"https://api.github.com/users/danhhz/orgs","repos_url":"https://api.github.com/users/danhhz/repos","events_url":"https://api.github.com/users/danhhz/events{/privacy}","received_events_url":"https://api.github.com/users/danhhz/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T15:22:03Z","updated_at":"2022-03-09T15:22:03Z","author_association":"CONTRIBUTOR","body":"@elindsey Nothing much has changed in persist recently. Is this sort of thing something that coord/sql should be looking at?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063034386/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064083509","html_url":"https://github.com/MaterializeInc/materialize/pull/11103#issuecomment-1064083509","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11103","id":1064083509,"node_id":"IC_kwDOCkIcu84_bKA1","user":{"login":"antiguru","id":582946,"node_id":"MDQ6VXNlcjU4Mjk0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/582946?v=4","gravatar_id":"","url":"https://api.github.com/users/antiguru","html_url":"https://github.com/antiguru","followers_url":"https://api.github.com/users/antiguru/followers","following_url":"https://api.github.com/users/antiguru/following{/other_user}","gists_url":"https://api.github.com/users/antiguru/gists{/gist_id}","starred_url":"https://api.github.com/users/antiguru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antiguru/subscriptions","organizations_url":"https://api.github.com/users/antiguru/orgs","repos_url":"https://api.github.com/users/antiguru/repos","events_url":"https://api.github.com/users/antiguru/events{/privacy}","received_events_url":"https://api.github.com/users/antiguru/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T13:49:17Z","updated_at":"2022-03-10T13:49:17Z","author_association":"MEMBER","body":"@frankmcsherry I added you as a reviewer. Don't consider this done, but it seems to be at least partially working. There is some doubt around the command reconciliation for storage, but it seems to work now with the `Truncate` command.\r\n\r\nI can run a `dataflowd` and `coordd`, point `testdrive` at it and kill+restart `coordd`, and most of the time it works. Failures include:\r\n* Pending peeks that aren't cleaned up.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064083509/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062703846","html_url":"https://github.com/MaterializeInc/materialize/pull/11132#issuecomment-1062703846","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132","id":1062703846,"node_id":"IC_kwDOCkIcu84_V5Lm","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T09:07:53Z","updated_at":"2022-03-09T09:08:04Z","author_association":"MEMBER","body":"I'm off to bed, but perhaps we can nerdsnipe @petrosagg or @guswynn into debugging the inscrutable futures error!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062703846/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062711430","html_url":"https://github.com/MaterializeInc/materialize/pull/11132#issuecomment-1062711430","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132","id":1062711430,"node_id":"IC_kwDOCkIcu84_V7CG","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T09:16:01Z","updated_at":"2022-03-09T09:16:01Z","author_association":"MEMBER","body":"Never mind. Frank found it!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062711430/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062896380","html_url":"https://github.com/MaterializeInc/materialize/pull/11132#issuecomment-1062896380","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132","id":1062896380,"node_id":"IC_kwDOCkIcu84_WoL8","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T12:59:31Z","updated_at":"2022-03-09T12:59:31Z","author_association":"MEMBER","body":"The intent is that this PR is \"harmless\", though it does add a new flag to `materialized` and I have no clue what the right process for that is (ideally: no one knows about it other than us). No rush to merge it at all, but interested to discuss if it is a sane path forward (essentially: trying to re-unite `materialized` and `coordd`).","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062896380/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1056956284","html_url":"https://github.com/MaterializeInc/materialize/issues/10988#issuecomment-1056956284","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988","id":1056956284,"node_id":"IC_kwDOCkIcu84-_998","user":{"login":"ruf-io","id":11527560,"node_id":"MDQ6VXNlcjExNTI3NTYw","avatar_url":"https://avatars.githubusercontent.com/u/11527560?v=4","gravatar_id":"","url":"https://api.github.com/users/ruf-io","html_url":"https://github.com/ruf-io","followers_url":"https://api.github.com/users/ruf-io/followers","following_url":"https://api.github.com/users/ruf-io/following{/other_user}","gists_url":"https://api.github.com/users/ruf-io/gists{/gist_id}","starred_url":"https://api.github.com/users/ruf-io/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruf-io/subscriptions","organizations_url":"https://api.github.com/users/ruf-io/orgs","repos_url":"https://api.github.com/users/ruf-io/repos","events_url":"https://api.github.com/users/ruf-io/events{/privacy}","received_events_url":"https://api.github.com/users/ruf-io/received_events","type":"User","site_admin":false},"created_at":"2022-03-02T13:53:51Z","updated_at":"2022-03-02T13:53:51Z","author_association":"MEMBER","body":"Might be nice to include some notes about the other PHP frameworks (Laravel) you've tested.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1056956284/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":1,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1057173368","html_url":"https://github.com/MaterializeInc/materialize/issues/10988#issuecomment-1057173368","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988","id":1057173368,"node_id":"IC_kwDOCkIcu84_Ay94","user":{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false},"created_at":"2022-03-02T17:12:30Z","updated_at":"2022-03-02T17:12:30Z","author_association":"CONTRIBUTOR","body":"> Might be nice to include some notes about the other PHP frameworks (Laravel) you've tested.\r\n\r\nSounds good! I have the Laravel example ready and tested. Just working on the pure PHP one now.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1057173368/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1057834762","html_url":"https://github.com/MaterializeInc/materialize/issues/10988#issuecomment-1057834762","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10988","id":1057834762,"node_id":"IC_kwDOCkIcu84_DUcK","user":{"login":"bobbyiliev","id":21223421,"node_id":"MDQ6VXNlcjIxMjIzNDIx","avatar_url":"https://avatars.githubusercontent.com/u/21223421?v=4","gravatar_id":"","url":"https://api.github.com/users/bobbyiliev","html_url":"https://github.com/bobbyiliev","followers_url":"https://api.github.com/users/bobbyiliev/followers","following_url":"https://api.github.com/users/bobbyiliev/following{/other_user}","gists_url":"https://api.github.com/users/bobbyiliev/gists{/gist_id}","starred_url":"https://api.github.com/users/bobbyiliev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bobbyiliev/subscriptions","organizations_url":"https://api.github.com/users/bobbyiliev/orgs","repos_url":"https://api.github.com/users/bobbyiliev/repos","events_url":"https://api.github.com/users/bobbyiliev/events{/privacy}","received_events_url":"https://api.github.com/users/bobbyiliev/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T09:15:39Z","updated_at":"2022-03-03T09:15:39Z","author_association":"CONTRIBUTOR","body":"Just prepared an example for PHP PDO which includes an example with `TAIL` as well:\r\n\r\nhttps://gist.github.com/bobbyiliev/7880e636115336afc11c5cf69c29ad9c\r\n\r\nI will prepare the description today.\r\n\r\nThis example can be extended to show how to use SSE with just PHP and Materialize as described [here](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events).\r\n\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1057834762/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063074285","html_url":"https://github.com/MaterializeInc/materialize/issues/10876#issuecomment-1063074285","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10876","id":1063074285,"node_id":"IC_kwDOCkIcu84_XTnt","user":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T15:54:20Z","updated_at":"2022-03-09T15:54:20Z","author_association":"CONTRIBUTOR","body":"This has occurred again with a customer running v0.20.0:\r\n\r\n```\r\n2022-03-08T03:42:49.724124Z ERROR librdkafka: TXNERR [thrd:main]: Current transaction failed in state CommittingTransaction: Transactional API operation (commit_transaction) timed out (_TIMED_OUT)\r\n2022-03-08T03:42:49.725947Z  INFO dataflow::sink::kafka: Error requiring abort in kafka sink: RDKafkaError(Transactional API operation (commit_transaction) timed out)\r\n```\r\n\r\nand then sometime afterwards, there's a fencing error.\r\n\r\n```\r\n2022-03-08T04:38:51.888454Z ERROR kafka_util::client: librdkafka: Global error: AllBrokersDown (Local: All broker connections are down): 10/10 brokers are down\r\n2022-03-08T04:38:53.046492Z ERROR librdkafka: TXNERR [thrd:main]: Fatal transaction error: Failed to end transaction: Local: This instance has been fenced by a newer instance (_FENCED)\r\n2022-03-08T04:38:53.046674Z ERROR librdkafka: FATAL [thrd:main]: Fatal error: Local: This instance has been fenced by a newer instance: Failed to end transaction: Local: This instance has been fenced by a newer instance\r\n2022-03-08T04:38:53.047277Z ERROR kafka_util::client: librdkafka: Global error: Fatal (Local: Fatal error): Fatal error: Local: This instance has been fenced by a newer instance: Failed to end transaction : Local: This instance has been fenced by a newer instance\r\n2022-03-08T04:39:06.003407Z  INFO dataflow::sink::kafka: shutting down kafka sink: kafka-u5\r\n```\r\n\r\nI believe I understand the transaction timeout error but I'm not immediately sure how we end up getting a fencing error that doesn't show up right after startup.  Because the initial error occurs while waiting for a `CommitTxn`, we know we've definitely started up and initialized by the time we got here (This version has most of the recent sink rewrites -- including the change to the fencing ordering)","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063074285/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1057558814","html_url":"https://github.com/MaterializeInc/materialize/pull/10978#issuecomment-1057558814","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978","id":1057558814,"node_id":"IC_kwDOCkIcu84_CREe","user":{"login":"ruchirK","id":4015012,"node_id":"MDQ6VXNlcjQwMTUwMTI=","avatar_url":"https://avatars.githubusercontent.com/u/4015012?v=4","gravatar_id":"","url":"https://api.github.com/users/ruchirK","html_url":"https://github.com/ruchirK","followers_url":"https://api.github.com/users/ruchirK/followers","following_url":"https://api.github.com/users/ruchirK/following{/other_user}","gists_url":"https://api.github.com/users/ruchirK/gists{/gist_id}","starred_url":"https://api.github.com/users/ruchirK/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruchirK/subscriptions","organizations_url":"https://api.github.com/users/ruchirK/orgs","repos_url":"https://api.github.com/users/ruchirK/repos","events_url":"https://api.github.com/users/ruchirK/events{/privacy}","received_events_url":"https://api.github.com/users/ruchirK/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T01:07:15Z","updated_at":"2022-03-03T01:07:15Z","author_association":"MEMBER","body":"I ran out of steam before being able to look at this today, will do so second thing tomorrow!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1057558814/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058136410","html_url":"https://github.com/MaterializeInc/materialize/pull/10978#issuecomment-1058136410","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978","id":1058136410,"node_id":"IC_kwDOCkIcu84_EeFa","user":{"login":"ruchirK","id":4015012,"node_id":"MDQ6VXNlcjQwMTUwMTI=","avatar_url":"https://avatars.githubusercontent.com/u/4015012?v=4","gravatar_id":"","url":"https://api.github.com/users/ruchirK","html_url":"https://github.com/ruchirK","followers_url":"https://api.github.com/users/ruchirK/followers","following_url":"https://api.github.com/users/ruchirK/following{/other_user}","gists_url":"https://api.github.com/users/ruchirK/gists{/gist_id}","starred_url":"https://api.github.com/users/ruchirK/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruchirK/subscriptions","organizations_url":"https://api.github.com/users/ruchirK/orgs","repos_url":"https://api.github.com/users/ruchirK/repos","events_url":"https://api.github.com/users/ruchirK/events{/privacy}","received_events_url":"https://api.github.com/users/ruchirK/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T15:08:00Z","updated_at":"2022-03-03T15:08:00Z","author_association":"MEMBER","body":"Reviewing now!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058136410/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058339140","html_url":"https://github.com/MaterializeInc/materialize/pull/10978#issuecomment-1058339140","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978","id":1058339140,"node_id":"IC_kwDOCkIcu84_FPlE","user":{"login":"aljoscha","id":68551,"node_id":"MDQ6VXNlcjY4NTUx","avatar_url":"https://avatars.githubusercontent.com/u/68551?v=4","gravatar_id":"","url":"https://api.github.com/users/aljoscha","html_url":"https://github.com/aljoscha","followers_url":"https://api.github.com/users/aljoscha/followers","following_url":"https://api.github.com/users/aljoscha/following{/other_user}","gists_url":"https://api.github.com/users/aljoscha/gists{/gist_id}","starred_url":"https://api.github.com/users/aljoscha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aljoscha/subscriptions","organizations_url":"https://api.github.com/users/aljoscha/orgs","repos_url":"https://api.github.com/users/aljoscha/repos","events_url":"https://api.github.com/users/aljoscha/events{/privacy}","received_events_url":"https://api.github.com/users/aljoscha/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T18:11:11Z","updated_at":"2022-03-03T18:11:11Z","author_association":"CONTRIBUTOR","body":"Mostly requests for clarification so far. :sweat_smile: \r\n\r\nWhat is the thing that allows us to have multiple writers with this API? I'm guessing it's the combination of `write`/`seal` into one method, but I don't yet understand why. What type of _multiple writer_ situation do we want to support? Is it \"multiple writers write exactly the same data\", as mentioned in the STORAGE document? Or is it \"multiple writers write the data of their partition? I can imagine the latter being useful for the case where you have one persisted collection backing a Kafka source, and you have one process writing updates from partition 0 and another process writing updates from partition 1, but to the same collection.\r\n\r\nCan `Client::new()` be called from multiple processes for a given location? I'm assuming yes but wanted to double check.\r\n\r\nDo the shards we see in the snapshot API correspond to shards as described in the STORAGE doc or are they rather the mechanism that we use to get parallel snapshot reading. I'm assuming the latter, but am not very sure. If yes, then the naming might be confusin between the two docs. (cc @petrosagg).\r\n\r\nI have yet to think about how a source implementation would use the API. One thing that obviously wouldn't work anymore is independent writing and sealing, which we use in the current persistent source implementation to seal the different collections that are backing a source atomically.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058339140/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058536659","html_url":"https://github.com/MaterializeInc/materialize/pull/10978#issuecomment-1058536659","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978","id":1058536659,"node_id":"IC_kwDOCkIcu84_F_zT","user":{"login":"danhhz","id":52528,"node_id":"MDQ6VXNlcjUyNTI4","avatar_url":"https://avatars.githubusercontent.com/u/52528?v=4","gravatar_id":"","url":"https://api.github.com/users/danhhz","html_url":"https://github.com/danhhz","followers_url":"https://api.github.com/users/danhhz/followers","following_url":"https://api.github.com/users/danhhz/following{/other_user}","gists_url":"https://api.github.com/users/danhhz/gists{/gist_id}","starred_url":"https://api.github.com/users/danhhz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danhhz/subscriptions","organizations_url":"https://api.github.com/users/danhhz/orgs","repos_url":"https://api.github.com/users/danhhz/repos","events_url":"https://api.github.com/users/danhhz/events{/privacy}","received_events_url":"https://api.github.com/users/danhhz/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T22:01:58Z","updated_at":"2022-03-03T22:01:58Z","author_association":"CONTRIBUTOR","body":"Added a first swing at rustdoc. I think I caught all the changes I promised, please let me know if I missed any. Also renamed \"tail\" to \"listen\" given that Frank was just renaming some things that were both called \"tail\" at the coord/dataflow boundary","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058536659/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1059007700","html_url":"https://github.com/MaterializeInc/materialize/pull/10978#issuecomment-1059007700","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978","id":1059007700,"node_id":"IC_kwDOCkIcu84_HyzU","user":{"login":"aljoscha","id":68551,"node_id":"MDQ6VXNlcjY4NTUx","avatar_url":"https://avatars.githubusercontent.com/u/68551?v=4","gravatar_id":"","url":"https://api.github.com/users/aljoscha","html_url":"https://github.com/aljoscha","followers_url":"https://api.github.com/users/aljoscha/followers","following_url":"https://api.github.com/users/aljoscha/following{/other_user}","gists_url":"https://api.github.com/users/aljoscha/gists{/gist_id}","starred_url":"https://api.github.com/users/aljoscha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aljoscha/subscriptions","organizations_url":"https://api.github.com/users/aljoscha/orgs","repos_url":"https://api.github.com/users/aljoscha/repos","events_url":"https://api.github.com/users/aljoscha/events{/privacy}","received_events_url":"https://api.github.com/users/aljoscha/received_events","type":"User","site_admin":false},"created_at":"2022-03-04T09:50:05Z","updated_at":"2022-03-04T09:50:05Z","author_association":"CONTRIBUTOR","body":"I think one of my questions got lost: What is the thing that allows us to have multiple writers with this API, or why wouldn't the old API allow that? I'm guessing it's the combination of write/seal into one method, but I don't yet understand why.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1059007700/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1059288523","html_url":"https://github.com/MaterializeInc/materialize/pull/10978#issuecomment-1059288523","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10978","id":1059288523,"node_id":"IC_kwDOCkIcu84_I3XL","user":{"login":"danhhz","id":52528,"node_id":"MDQ6VXNlcjUyNTI4","avatar_url":"https://avatars.githubusercontent.com/u/52528?v=4","gravatar_id":"","url":"https://api.github.com/users/danhhz","html_url":"https://github.com/danhhz","followers_url":"https://api.github.com/users/danhhz/followers","following_url":"https://api.github.com/users/danhhz/following{/other_user}","gists_url":"https://api.github.com/users/danhhz/gists{/gist_id}","starred_url":"https://api.github.com/users/danhhz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danhhz/subscriptions","organizations_url":"https://api.github.com/users/danhhz/orgs","repos_url":"https://api.github.com/users/danhhz/repos","events_url":"https://api.github.com/users/danhhz/events{/privacy}","received_events_url":"https://api.github.com/users/danhhz/received_events","type":"User","site_admin":false},"created_at":"2022-03-04T15:58:59Z","updated_at":"2022-03-04T15:58:59Z","author_association":"CONTRIBUTOR","body":"> I think one of my questions got lost: What is the thing that allows us to have multiple writers with this API, or why wouldn't the old API allow that? I'm guessing it's the combination of write/seal into one method, but I don't yet understand why.\r\n\r\nI tried to answer it but perhaps didn't do a good enough job :). Here's more words in the hope that helps. There's two things here.\r\n\r\nOne is the concept introduced in https://github.com/MaterializeInc/materialize/pull/10913. Multiple writers of the same collection are required to be writing the same data (same in the sense of definiteness), so we're free to use whichever we get first. Each writer places batches in s3 in a unique sub-dir called \"pending\". The main persist state machine finds out about these, either by watching or rpc, and plugs them in as inputs to the machine in Description order. The combination of write and seal into one method isn't necessary for this, just the semantics of definiteness. (A followup optimization that is allowed but not required is that readers can duplicate just enough of the state machine logic to peek ahead at data in \"pending\" and use it.\r\n\r\nI think that's the one you're asking about but just in case, here's the other. Previously, we required each \"storage location\" to have one exclusive writer, which was the persist state machine. Now, we tolerate multiple ones (to make an easier operational story) by having them each operate in unique sub-dirs and using a tiny bit of distributed consensus (via an external service) to handle flipping from one version of META to the next. This will allow cloud to simply restart persist coordinators that are in an unknown state, and if they come back, one of the two discovers this and bails.\r\n\r\n(All of this btw, is very much \"proposal for discussion and validation\" not \"decision that was made while you were on vacation\".)","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1059288523/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063310161","html_url":"https://github.com/MaterializeInc/materialize/issues/11145#issuecomment-1063310161","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11145","id":1063310161,"node_id":"IC_kwDOCkIcu84_YNNR","user":{"login":"andrioni","id":159177,"node_id":"MDQ6VXNlcjE1OTE3Nw==","avatar_url":"https://avatars.githubusercontent.com/u/159177?v=4","gravatar_id":"","url":"https://api.github.com/users/andrioni","html_url":"https://github.com/andrioni","followers_url":"https://api.github.com/users/andrioni/followers","following_url":"https://api.github.com/users/andrioni/following{/other_user}","gists_url":"https://api.github.com/users/andrioni/gists{/gist_id}","starred_url":"https://api.github.com/users/andrioni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrioni/subscriptions","organizations_url":"https://api.github.com/users/andrioni/orgs","repos_url":"https://api.github.com/users/andrioni/repos","events_url":"https://api.github.com/users/andrioni/events{/privacy}","received_events_url":"https://api.github.com/users/andrioni/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T19:56:22Z","updated_at":"2022-03-09T19:56:22Z","author_association":"CONTRIBUTOR","body":"Behavior is intentional, due to not being able to return errors from aggregate functions, according to [this comment](https://github.com/MaterializeInc/materialize/blob/3e154f7c12c68876766d7e2485a0f48bb3a0c3b4/src/expr/src/relation/func.rs#L486-L492) from @benesch ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063310161/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063306871","html_url":"https://github.com/MaterializeInc/materialize/pull/11116#issuecomment-1063306871","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11116","id":1063306871,"node_id":"IC_kwDOCkIcu84_YMZ3","user":{"login":"ruchirK","id":4015012,"node_id":"MDQ6VXNlcjQwMTUwMTI=","avatar_url":"https://avatars.githubusercontent.com/u/4015012?v=4","gravatar_id":"","url":"https://api.github.com/users/ruchirK","html_url":"https://github.com/ruchirK","followers_url":"https://api.github.com/users/ruchirK/followers","following_url":"https://api.github.com/users/ruchirK/following{/other_user}","gists_url":"https://api.github.com/users/ruchirK/gists{/gist_id}","starred_url":"https://api.github.com/users/ruchirK/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruchirK/subscriptions","organizations_url":"https://api.github.com/users/ruchirK/orgs","repos_url":"https://api.github.com/users/ruchirK/repos","events_url":"https://api.github.com/users/ruchirK/events{/privacy}","received_events_url":"https://api.github.com/users/ruchirK/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T19:53:49Z","updated_at":"2022-03-09T19:53:49Z","author_association":"MEMBER","body":"Marking this as draft so it doesn't get accidentally merged when we don't want an encoding version bump","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063306871/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064284193","html_url":"https://github.com/MaterializeInc/materialize/pull/11143#issuecomment-1064284193","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143","id":1064284193,"node_id":"IC_kwDOCkIcu84_b7Ah","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T16:55:39Z","updated_at":"2022-03-10T16:55:39Z","author_association":"CONTRIBUTOR","body":"@benesch unconditionally printing this sounds great to me!\r\n\r\nhowever, how should we write it to the log file? isnt that under the control of `tracing`?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064284193/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064486238","html_url":"https://github.com/MaterializeInc/materialize/pull/11143#issuecomment-1064486238","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11143","id":1064486238,"node_id":"IC_kwDOCkIcu84_csVe","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T20:44:02Z","updated_at":"2022-03-10T20:44:02Z","author_association":"MEMBER","body":"What would go wrong if we just `fs::write` it? I contend nothing!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064486238/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1055490411","html_url":"https://github.com/MaterializeInc/materialize/issues/10968#issuecomment-1055490411","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10968","id":1055490411,"node_id":"IC_kwDOCkIcu84-6YFr","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"created_at":"2022-03-01T14:15:52Z","updated_at":"2022-03-01T14:16:11Z","author_association":"MEMBER","body":"Hot takes on this. I think selecting result scales is easy, because there can be correct answers. If \"xxx.yyy\" means \"any of the set of numbers xxx.yyy plus 0.000zzz for zzz bounded away from 0.5 in magnitude\" then there can be a correct interpretation (it would be 0 here, because 1.05 / 2.95 is 0.355... which exceeds the range implied by 0.3). \r\n\r\nThe hard part seems to be determining the *input scales*: deciding or not that 1.0 actually means 1.000000000000000000000000, and dealing with the mismatch between the two legitimate uses.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1055490411/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1056245444","html_url":"https://github.com/MaterializeInc/materialize/pull/10977#issuecomment-1056245444","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10977","id":1056245444,"node_id":"IC_kwDOCkIcu84-9QbE","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-02T05:14:31Z","updated_at":"2022-03-02T05:14:31Z","author_association":"MEMBER","body":"So exciting!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1056245444/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051177017","html_url":"https://github.com/MaterializeInc/materialize/pull/10875#issuecomment-1051177017","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875","id":1051177017,"node_id":"IC_kwDOCkIcu84-p7A5","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T19:50:09Z","updated_at":"2022-02-25T19:50:09Z","author_association":"CONTRIBUTOR","body":"@frankmcsherry as far as I can tell, it needs to be passed down into the `ActiveComputeState` to be passed to kafka sinks, which is created by the `Worker` in `activate_compute`","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051177017/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051178686","html_url":"https://github.com/MaterializeInc/materialize/pull/10875#issuecomment-1051178686","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10875","id":1051178686,"node_id":"IC_kwDOCkIcu84-p7a-","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T19:51:35Z","updated_at":"2022-02-25T19:51:35Z","author_association":"CONTRIBUTOR","body":"I can see it being better to move it into structs that are for extra context for compute and storage","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051178686/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063194294","html_url":"https://github.com/MaterializeInc/materialize/pull/11144#issuecomment-1063194294","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144","id":1063194294,"node_id":"IC_kwDOCkIcu84_Xw62","user":{"login":"mkysel","id":7513948,"node_id":"MDQ6VXNlcjc1MTM5NDg=","avatar_url":"https://avatars.githubusercontent.com/u/7513948?v=4","gravatar_id":"","url":"https://api.github.com/users/mkysel","html_url":"https://github.com/mkysel","followers_url":"https://api.github.com/users/mkysel/followers","following_url":"https://api.github.com/users/mkysel/following{/other_user}","gists_url":"https://api.github.com/users/mkysel/gists{/gist_id}","starred_url":"https://api.github.com/users/mkysel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkysel/subscriptions","organizations_url":"https://api.github.com/users/mkysel/orgs","repos_url":"https://api.github.com/users/mkysel/repos","events_url":"https://api.github.com/users/mkysel/events{/privacy}","received_events_url":"https://api.github.com/users/mkysel/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T17:48:07Z","updated_at":"2022-03-09T17:48:07Z","author_association":"CONTRIBUTOR","body":"I have not added any tests since they would only really test that it does nothing :). But they are a super quick change, so I will do that.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063194294/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063207546","html_url":"https://github.com/MaterializeInc/materialize/pull/11144#issuecomment-1063207546","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11144","id":1063207546,"node_id":"IC_kwDOCkIcu84_X0J6","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T18:02:47Z","updated_at":"2022-03-09T18:02:47Z","author_association":"MEMBER","body":"> I have not added any tests since they would only really test that it does nothing :). But they are a super quick change, so I will do that.\r\n\r\nThe tests in the file I linked test that the parser can correctly roundtrip parse and stringify the DDL statements. These aren't tests that do nothing! The stringification logic in particular doesn't get well exercised in other tests.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063207546/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062254483","html_url":"https://github.com/MaterializeInc/materialize/pull/11117#issuecomment-1062254483","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11117","id":1062254483,"node_id":"IC_kwDOCkIcu84_ULeT","user":{"login":"danhhz","id":52528,"node_id":"MDQ6VXNlcjUyNTI4","avatar_url":"https://avatars.githubusercontent.com/u/52528?v=4","gravatar_id":"","url":"https://api.github.com/users/danhhz","html_url":"https://github.com/danhhz","followers_url":"https://api.github.com/users/danhhz/followers","following_url":"https://api.github.com/users/danhhz/following{/other_user}","gists_url":"https://api.github.com/users/danhhz/gists{/gist_id}","starred_url":"https://api.github.com/users/danhhz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danhhz/subscriptions","organizations_url":"https://api.github.com/users/danhhz/orgs","repos_url":"https://api.github.com/users/danhhz/repos","events_url":"https://api.github.com/users/danhhz/events{/privacy}","received_events_url":"https://api.github.com/users/danhhz/received_events","type":"User","site_admin":false},"created_at":"2022-03-08T21:55:06Z","updated_at":"2022-03-08T21:55:06Z","author_association":"CONTRIBUTOR","body":"cc @aljoscha @ruchirK here's where I'm at. I don't expect most of this to make sense to anyone besides me yet, so don't spend too much time looking at it, but take a quick scan before we all chat tomorrow if you can","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062254483/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064992476","html_url":"https://github.com/MaterializeInc/materialize/pull/11169#issuecomment-1064992476","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169","id":1064992476,"node_id":"IC_kwDOCkIcu84_en7c","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T10:43:09Z","updated_at":"2022-03-11T10:43:09Z","author_association":"CONTRIBUTOR","body":"@benesch I am pushing a test for this in your branch, please stand by.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064992476/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065037391","html_url":"https://github.com/MaterializeInc/materialize/pull/11169#issuecomment-1065037391","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169","id":1065037391,"node_id":"IC_kwDOCkIcu84_ey5P","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T11:43:13Z","updated_at":"2022-03-11T11:43:13Z","author_association":"MEMBER","body":"If it helps to unpick the issue: what is happening behind the scenes is that the updates accumulate until their number has doubled, at which point they are reduced back down through compaction. I could imagine the number of updates is such that the compaction happens at a regular frequency that is lower than the measurement frequency. If you dial around the number of distinct records or the number of updates per round, it might smooth out.\r\n\r\nAlso something we should be comfortable with in our measurements though (non-stationary behavior that remains below some fixed bound).","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065037391/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058339732","html_url":"https://github.com/MaterializeInc/materialize/pull/11009#issuecomment-1058339732","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11009","id":1058339732,"node_id":"IC_kwDOCkIcu84_FPuU","user":{"login":"mkysel","id":7513948,"node_id":"MDQ6VXNlcjc1MTM5NDg=","avatar_url":"https://avatars.githubusercontent.com/u/7513948?v=4","gravatar_id":"","url":"https://api.github.com/users/mkysel","html_url":"https://github.com/mkysel","followers_url":"https://api.github.com/users/mkysel/followers","following_url":"https://api.github.com/users/mkysel/following{/other_user}","gists_url":"https://api.github.com/users/mkysel/gists{/gist_id}","starred_url":"https://api.github.com/users/mkysel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkysel/subscriptions","organizations_url":"https://api.github.com/users/mkysel/orgs","repos_url":"https://api.github.com/users/mkysel/repos","events_url":"https://api.github.com/users/mkysel/events{/privacy}","received_events_url":"https://api.github.com/users/mkysel/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T18:11:53Z","updated_at":"2022-03-03T18:11:53Z","author_association":"CONTRIBUTOR","body":"good to see this documented","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058339732/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1055334302","html_url":"https://github.com/MaterializeInc/materialize/pull/10913#issuecomment-1055334302","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913","id":1055334302,"node_id":"IC_kwDOCkIcu84-5x-e","user":{"login":"petrosagg","id":939420,"node_id":"MDQ6VXNlcjkzOTQyMA==","avatar_url":"https://avatars.githubusercontent.com/u/939420?v=4","gravatar_id":"","url":"https://api.github.com/users/petrosagg","html_url":"https://github.com/petrosagg","followers_url":"https://api.github.com/users/petrosagg/followers","following_url":"https://api.github.com/users/petrosagg/following{/other_user}","gists_url":"https://api.github.com/users/petrosagg/gists{/gist_id}","starred_url":"https://api.github.com/users/petrosagg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/petrosagg/subscriptions","organizations_url":"https://api.github.com/users/petrosagg/orgs","repos_url":"https://api.github.com/users/petrosagg/repos","events_url":"https://api.github.com/users/petrosagg/events{/privacy}","received_events_url":"https://api.github.com/users/petrosagg/received_events","type":"User","site_admin":false},"created_at":"2022-03-01T11:33:53Z","updated_at":"2022-03-01T11:39:01Z","author_association":"CONTRIBUTOR","body":"@danhhz \r\n\r\n>  I understand how this reduces complexity in storage, but in our conversation on Friday I didn't see anything that we couldn't accomplish by storage piloting around something that's much closer to the current persist.\r\n\r\nI did some more thinking on this point and tried to sketch out what STORAGE would have to do if persist collections were single writer. I came up with the following design that maintains the single writer constraint of `persist` and has the advantage that is simple at the expense of excessive writing.\r\n\r\nImagine every time a worker initializes a persist writer it writes in a brand new persistent collection and we never resume writing a preexisting collection. This makes restarting CLUSTERs and HA setups trivial since all they do is each write to their own private persistent collection. The reason for never resuming is because it is hard to ensure that the previous writer is really gone and not temporarily timing out, which would lead to concurrent writes when these old writers come back online and we have resumed from a new process in the meantime. Does this sound right to you? Maybe there is an easier solution that I'm not thinking about.\r\n\r\nSo now readers are tasked with monitoring a dynamic list of persist collections than can grow when a new process is started and shrink when a persist collection is deemed unnecessary. Each such list has its own `since` and `upper` frontiers and readers can choose to follow one of them until it falls behind too much (like in the proposal above). \r\n\r\nI think the above is a potential path forward with the downside that we'll be always storing as many copies of the data (and performing its associated maintenance work) as the HA replication factor and that would require a significant engineering effort to optimize if choose to do so in the future.\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1055334302/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1053490417","html_url":"https://github.com/MaterializeInc/materialize/issues/10837#issuecomment-1053490417","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10837","id":1053490417,"node_id":"IC_kwDOCkIcu84-yvzx","user":{"login":"Linksku","id":7908179,"node_id":"MDQ6VXNlcjc5MDgxNzk=","avatar_url":"https://avatars.githubusercontent.com/u/7908179?v=4","gravatar_id":"","url":"https://api.github.com/users/Linksku","html_url":"https://github.com/Linksku","followers_url":"https://api.github.com/users/Linksku/followers","following_url":"https://api.github.com/users/Linksku/following{/other_user}","gists_url":"https://api.github.com/users/Linksku/gists{/gist_id}","starred_url":"https://api.github.com/users/Linksku/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Linksku/subscriptions","organizations_url":"https://api.github.com/users/Linksku/orgs","repos_url":"https://api.github.com/users/Linksku/repos","events_url":"https://api.github.com/users/Linksku/events{/privacy}","received_events_url":"https://api.github.com/users/Linksku/received_events","type":"User","site_admin":false},"created_at":"2022-02-27T10:51:03Z","updated_at":"2022-02-27T10:51:03Z","author_association":"NONE","body":"I also want to add that allowing `timestamp(3)` should improve compatibility with Kafka timestamps, which only support milliseconds. Since Materialize's timestamps are microseconds, it's pretty tricky to get Kafka to interpret them correctly. I may have to change all `timestamptz`s to `bigint`s.\r\n\r\nRelated Kafka issue: https://issues.apache.org/jira/browse/KAFKA-10561","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1053490417/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064769214","html_url":"https://github.com/MaterializeInc/materialize/pull/11167#issuecomment-1064769214","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11167","id":1064769214,"node_id":"IC_kwDOCkIcu84_dxa-","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T04:48:25Z","updated_at":"2022-03-11T04:48:25Z","author_association":"MEMBER","body":"This is all code movement, btw, except for the first commit. We lose the error code `FEATURE_NOT_SUPPORTED`, because `sql` is a bit silly in not having structured errors at the moment. But we'll get that back eventually.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064769214/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054172068","html_url":"https://github.com/MaterializeInc/materialize/issues/10938#issuecomment-1054172068","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938","id":1054172068,"node_id":"IC_kwDOCkIcu84-1WOk","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T11:43:08Z","updated_at":"2022-02-28T11:43:08Z","author_association":"CONTRIBUTOR","body":"To reproduce\r\n\r\n1. Clone `gh10938-test` from `git@github.com:philip-stoev/materialize.git`\r\n2. Start some unrelated background load\r\n```\r\nwhile bash -c \"cargo clean ; cargo build --release\" ; do : ; done\r\n```\r\n3. Run the problematic test in a loop:\r\n```\r\nbash -e -c 'for i in $(seq 1 10) ; do bin/mzcompose --find pg-cdc-resumption down -v ; bin/mzcompose --find pg-cdc-resumption run default ; done'\r\n```\r\n\r\n4. Wait for the test to fail.\r\n\r\nThe test in this branch is a simplified version of the specific scenario within `pg-cdc-resumption` that is failing. It has been modified to **not** use Toxyproxy in any way, it just restarts PG immediately after creating the Mz pg source.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054172068/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054172213","html_url":"https://github.com/MaterializeInc/materialize/issues/10938#issuecomment-1054172213","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938","id":1054172213,"node_id":"IC_kwDOCkIcu84-1WQ1","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T11:43:21Z","updated_at":"2022-02-28T11:43:21Z","author_association":"CONTRIBUTOR","body":"@petrosagg  @pH14 ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054172213/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060319878","html_url":"https://github.com/MaterializeInc/materialize/issues/10938#issuecomment-1060319878","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938","id":1060319878,"node_id":"IC_kwDOCkIcu84_MzKG","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T08:24:31Z","updated_at":"2022-03-07T08:24:31Z","author_association":"CONTRIBUTOR","body":"I am putting this as a P1, as it is a regression.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060319878/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060861183","html_url":"https://github.com/MaterializeInc/materialize/issues/10938#issuecomment-1060861183","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938","id":1060861183,"node_id":"IC_kwDOCkIcu84_O3T_","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T16:11:16Z","updated_at":"2022-03-07T16:11:16Z","author_association":"CONTRIBUTOR","body":"Hmm interesting... my initial thought was that we're problematically swallowing Errs here https://github.com/MaterializeInc/materialize/blob/23f42733a4c5630a549db48fdd7c6674b618b484/src/dataflow/src/source/postgres.rs#L256 (which still seems to be the case, but not the causal issue here)\r\n\r\nbut it actually looks like we're waiting indefinitely on `reader.next().await` after the postgres connection initially shuts down. Will dig into what's happening here under the hood","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060861183/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061178619","html_url":"https://github.com/MaterializeInc/materialize/issues/10938#issuecomment-1061178619","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10938","id":1061178619,"node_id":"IC_kwDOCkIcu84_QEz7","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T21:58:36Z","updated_at":"2022-03-07T21:58:36Z","author_association":"CONTRIBUTOR","body":"Definitely perplexing. I can repro this locally when running via Docker `bin/mzcompose --find pg-cdc-resumption down -v ; bin/mzcompose --find pg-cdc-resumption run default`, and the client gets stuck waiting on its receiver indefinitely: https://github.com/MaterializeInc/rust-postgres/blob/5ae9ff03d1b8085fe026c7d179226b1d169ef6c6/tokio-postgres/src/client.rs#L47 From what I can tell, at no point does the `CopyOutStream` get any error, so it just hangs. The replication stream resumes fine separately, so it's specifically the copy out stream that gets jammed.\r\n\r\nUnfortunately I have not been able to repro running Materialize directly. When I do so, and kill Postgres mid-copy, it immediately receives an error and retries as one would hope.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061178619/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058637046","html_url":"https://github.com/MaterializeInc/materialize/pull/11018#issuecomment-1058637046","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018","id":1058637046,"node_id":"IC_kwDOCkIcu84_GYT2","user":{"login":"ruchirK","id":4015012,"node_id":"MDQ6VXNlcjQwMTUwMTI=","avatar_url":"https://avatars.githubusercontent.com/u/4015012?v=4","gravatar_id":"","url":"https://api.github.com/users/ruchirK","html_url":"https://github.com/ruchirK","followers_url":"https://api.github.com/users/ruchirK/followers","following_url":"https://api.github.com/users/ruchirK/following{/other_user}","gists_url":"https://api.github.com/users/ruchirK/gists{/gist_id}","starred_url":"https://api.github.com/users/ruchirK/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruchirK/subscriptions","organizations_url":"https://api.github.com/users/ruchirK/orgs","repos_url":"https://api.github.com/users/ruchirK/repos","events_url":"https://api.github.com/users/ruchirK/events{/privacy}","received_events_url":"https://api.github.com/users/ruchirK/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T23:15:04Z","updated_at":"2022-03-03T23:15:04Z","author_association":"MEMBER","body":"This is just a draft to validate that we can observe and fix the issue this is nowhere near mergeable quality code. ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058637046/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064483490","html_url":"https://github.com/MaterializeInc/materialize/pull/11018#issuecomment-1064483490","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11018","id":1064483490,"node_id":"IC_kwDOCkIcu84_crqi","user":{"login":"ruchirK","id":4015012,"node_id":"MDQ6VXNlcjQwMTUwMTI=","avatar_url":"https://avatars.githubusercontent.com/u/4015012?v=4","gravatar_id":"","url":"https://api.github.com/users/ruchirK","html_url":"https://github.com/ruchirK","followers_url":"https://api.github.com/users/ruchirK/followers","following_url":"https://api.github.com/users/ruchirK/following{/other_user}","gists_url":"https://api.github.com/users/ruchirK/gists{/gist_id}","starred_url":"https://api.github.com/users/ruchirK/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruchirK/subscriptions","organizations_url":"https://api.github.com/users/ruchirK/orgs","repos_url":"https://api.github.com/users/ruchirK/repos","events_url":"https://api.github.com/users/ruchirK/events{/privacy}","received_events_url":"https://api.github.com/users/ruchirK/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T20:40:24Z","updated_at":"2022-03-10T20:40:24Z","author_association":"MEMBER","body":"This PR definitely successfully bounds the memory usage\r\n\r\nthis is main\r\n<img width=\"888\" alt=\"Screen Shot 2022-03-10 at 3 32 49 PM\" src=\"https://user-images.githubusercontent.com/4015012/157749734-47a38215-4b8c-4f81-a8cf-a836ae3b88d8.png\">\r\n\r\nvs this is this pr:\r\n<img width=\"907\" alt=\"Screen Shot 2022-03-10 at 3 34 46 PM\" src=\"https://user-images.githubusercontent.com/4015012/157749894-9da079b0-c609-4279-9454-5980be1a7055.png\">\r\n\r\nIt's still a little bit unclear to me whether Materialize is actually doing the right thing here, because ~3100 threads whose names start with `persist:runtime` remained spawned even after the memory usage dropped with this PR, which suggests that perhaps some snapshot wasn't fully read because some threads had finished reading out of batch/index order or something like that? Weirdly, querying Materialize seemed to all work fine which is not what I would expect if a snapshot was partially complete. ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064483490/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050508966","html_url":"https://github.com/MaterializeInc/materialize/issues/10870#issuecomment-1050508966","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870","id":1050508966,"node_id":"IC_kwDOCkIcu84-nX6m","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T04:23:57Z","updated_at":"2022-02-25T04:23:57Z","author_association":"MEMBER","body":"TBH this seems like a bug in PostgreSQL!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050508966/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050772382","html_url":"https://github.com/MaterializeInc/materialize/issues/10870#issuecomment-1050772382","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870","id":1050772382,"node_id":"IC_kwDOCkIcu84-oYOe","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T11:27:47Z","updated_at":"2022-02-25T11:27:47Z","author_association":"MEMBER","body":"That's a more sensible take, @benesch. This reminded me of was our conversation about how long to carry around `CoercibleScalarExpr`s, and this seemed like a thread to pull on to figure out how that's handled in PG.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050772382/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061387530","html_url":"https://github.com/MaterializeInc/materialize/pull/11070#issuecomment-1061387530","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070","id":1061387530,"node_id":"IC_kwDOCkIcu84_Q30K","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-08T04:13:47Z","updated_at":"2022-03-08T04:13:47Z","author_association":"MEMBER","body":"This ended up being quite a bit less important than I expected, but I believe it is still a nice simplification, if someone would like to take a look!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061387530/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1057928387","html_url":"https://github.com/MaterializeInc/materialize/pull/11002#issuecomment-1057928387","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002","id":1057928387,"node_id":"IC_kwDOCkIcu84_DrTD","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T11:01:33Z","updated_at":"2022-03-03T11:01:33Z","author_association":"MEMBER","body":"For clarity: `lower_bound` is not an antichain, it is a \"`numeric` that may not fit in a `mz_repr::Timestamp`\". The `None` value has a meaning that is similar \"larger than actual values\" but it's definitely not afaict a degenerate antichain. If we switch `mz_logical_timestamp` and `mz_repr::Timestamp` to be `i64` it will fit, and someone will have to come back, re-understand what is going on here, and we'll need to discuss it again.\r\n\r\nI hope this helps explain the code better. This is currently explained in the comment \r\n```\r\n            // Lower and upper bounds. If set, the value indicates the respective\r\n            // bound. If not set, indicates \"larger than `u64::MAX`\".\r\n            let mut lower_bound = Some(time);\r\n            let mut upper_bound = None;\r\n```\r\nbut if it would be helpful to introduce a new type to represent this convention, we can do that.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1057928387/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058283663","html_url":"https://github.com/MaterializeInc/materialize/pull/11002#issuecomment-1058283663","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11002","id":1058283663,"node_id":"IC_kwDOCkIcu84_FCCP","user":{"login":"umanwizard","id":1893159,"node_id":"MDQ6VXNlcjE4OTMxNTk=","avatar_url":"https://avatars.githubusercontent.com/u/1893159?v=4","gravatar_id":"","url":"https://api.github.com/users/umanwizard","html_url":"https://github.com/umanwizard","followers_url":"https://api.github.com/users/umanwizard/followers","following_url":"https://api.github.com/users/umanwizard/following{/other_user}","gists_url":"https://api.github.com/users/umanwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/umanwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umanwizard/subscriptions","organizations_url":"https://api.github.com/users/umanwizard/orgs","repos_url":"https://api.github.com/users/umanwizard/repos","events_url":"https://api.github.com/users/umanwizard/events{/privacy}","received_events_url":"https://api.github.com/users/umanwizard/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T17:17:05Z","updated_at":"2022-03-03T17:17:05Z","author_association":"MEMBER","body":"I agree with Frank that it would be clearer to make a new type that wraps `Option` but sorts differently than to repurpose `Max1Antichain ` for this. (You're right that `Max1Antichain` has the right sorting semantics, but other than that, the bounds here aren't really logically \"Antichain\"s in any meaningful way).\r\n\r\nOther than that, LGTM, thanks for picking this up @benesch ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058283663/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064563088","html_url":"https://github.com/MaterializeInc/materialize/pull/11163#issuecomment-1064563088","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163","id":1064563088,"node_id":"IC_kwDOCkIcu84_c_GQ","user":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T22:18:47Z","updated_at":"2022-03-10T22:18:47Z","author_association":"CONTRIBUTOR","body":"I have another take on this which is: if callers want this they can just call `fast_forward` before doing a write, so maybe the generics can stay, but the `next` stuff goes?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064563088/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064665214","html_url":"https://github.com/MaterializeInc/materialize/pull/11163#issuecomment-1064665214","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11163","id":1064665214,"node_id":"IC_kwDOCkIcu84_dYB-","user":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T00:57:44Z","updated_at":"2022-03-11T00:57:44Z","author_association":"CONTRIBUTOR","body":"A counter take: calling `fast_forward` before every write will prevent writes from sharing timestamps, which we spent some time to implement for persist reasons, so maybe the PR here is good?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064665214/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061006700","html_url":"https://github.com/MaterializeInc/materialize/pull/11055#issuecomment-1061006700","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11055","id":1061006700,"node_id":"IC_kwDOCkIcu84_Pa1s","user":{"login":"jorgecarleitao","id":2772607,"node_id":"MDQ6VXNlcjI3NzI2MDc=","avatar_url":"https://avatars.githubusercontent.com/u/2772607?v=4","gravatar_id":"","url":"https://api.github.com/users/jorgecarleitao","html_url":"https://github.com/jorgecarleitao","followers_url":"https://api.github.com/users/jorgecarleitao/followers","following_url":"https://api.github.com/users/jorgecarleitao/following{/other_user}","gists_url":"https://api.github.com/users/jorgecarleitao/gists{/gist_id}","starred_url":"https://api.github.com/users/jorgecarleitao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jorgecarleitao/subscriptions","organizations_url":"https://api.github.com/users/jorgecarleitao/orgs","repos_url":"https://api.github.com/users/jorgecarleitao/repos","events_url":"https://api.github.com/users/jorgecarleitao/events{/privacy}","received_events_url":"https://api.github.com/users/jorgecarleitao/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T18:39:27Z","updated_at":"2022-03-07T18:39:27Z","author_association":"NONE","body":"oh, I just noticed that you are using arrow2 and parquet2. What an honor :)\r\n\r\nDo let me know if you would need help in migrating this one.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061006700/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051348975","html_url":"https://github.com/MaterializeInc/materialize/pull/10878#issuecomment-1051348975","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10878","id":1051348975,"node_id":"IC_kwDOCkIcu84-qk_v","user":{"login":"cjubb39","id":3459231,"node_id":"MDQ6VXNlcjM0NTkyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3459231?v=4","gravatar_id":"","url":"https://api.github.com/users/cjubb39","html_url":"https://github.com/cjubb39","followers_url":"https://api.github.com/users/cjubb39/followers","following_url":"https://api.github.com/users/cjubb39/following{/other_user}","gists_url":"https://api.github.com/users/cjubb39/gists{/gist_id}","starred_url":"https://api.github.com/users/cjubb39/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjubb39/subscriptions","organizations_url":"https://api.github.com/users/cjubb39/orgs","repos_url":"https://api.github.com/users/cjubb39/repos","events_url":"https://api.github.com/users/cjubb39/events{/privacy}","received_events_url":"https://api.github.com/users/cjubb39/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T23:14:35Z","updated_at":"2022-02-25T23:14:35Z","author_association":"CONTRIBUTOR","body":"- Testdrive`input_kafka_cdcv2`: has not compacted since it was introduced in 0f01272e7\r\n- EOS test suite `input`: has not compacted since 0f01272e7.  Before this, `input_rt` did successfully make progress compacting. (As would be expected, the old `input_byo` did not have any bindings)","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051348975/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061923303","html_url":"https://github.com/MaterializeInc/materialize/issues/11100#issuecomment-1061923303","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100","id":1061923303,"node_id":"IC_kwDOCkIcu84_S6nn","user":{"login":"docteurklein","id":109846,"node_id":"MDQ6VXNlcjEwOTg0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/109846?v=4","gravatar_id":"","url":"https://api.github.com/users/docteurklein","html_url":"https://github.com/docteurklein","followers_url":"https://api.github.com/users/docteurklein/followers","following_url":"https://api.github.com/users/docteurklein/following{/other_user}","gists_url":"https://api.github.com/users/docteurklein/gists{/gist_id}","starred_url":"https://api.github.com/users/docteurklein/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/docteurklein/subscriptions","organizations_url":"https://api.github.com/users/docteurklein/orgs","repos_url":"https://api.github.com/users/docteurklein/repos","events_url":"https://api.github.com/users/docteurklein/events{/privacy}","received_events_url":"https://api.github.com/users/docteurklein/received_events","type":"User","site_admin":false},"created_at":"2022-03-08T15:48:33Z","updated_at":"2022-03-08T15:48:33Z","author_association":"NONE","body":"it seems to look like https://github.com/MaterializeInc/materialize/pull/3679","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061923303/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061927802","html_url":"https://github.com/MaterializeInc/materialize/issues/11100#issuecomment-1061927802","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100","id":1061927802,"node_id":"IC_kwDOCkIcu84_S7t6","user":{"login":"docteurklein","id":109846,"node_id":"MDQ6VXNlcjEwOTg0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/109846?v=4","gravatar_id":"","url":"https://api.github.com/users/docteurklein","html_url":"https://github.com/docteurklein","followers_url":"https://api.github.com/users/docteurklein/followers","following_url":"https://api.github.com/users/docteurklein/following{/other_user}","gists_url":"https://api.github.com/users/docteurklein/gists{/gist_id}","starred_url":"https://api.github.com/users/docteurklein/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/docteurklein/subscriptions","organizations_url":"https://api.github.com/users/docteurklein/orgs","repos_url":"https://api.github.com/users/docteurklein/repos","events_url":"https://api.github.com/users/docteurklein/events{/privacy}","received_events_url":"https://api.github.com/users/docteurklein/received_events","type":"User","site_admin":false},"created_at":"2022-03-08T15:52:50Z","updated_at":"2022-03-08T15:52:50Z","author_association":"NONE","body":"and possibly introduced by https://github.com/MaterializeInc/materialize/pull/389","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061927802/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064923673","html_url":"https://github.com/MaterializeInc/materialize/issues/11100#issuecomment-1064923673","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11100","id":1064923673,"node_id":"IC_kwDOCkIcu84_eXIZ","user":{"login":"docteurklein","id":109846,"node_id":"MDQ6VXNlcjEwOTg0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/109846?v=4","gravatar_id":"","url":"https://api.github.com/users/docteurklein","html_url":"https://github.com/docteurklein","followers_url":"https://api.github.com/users/docteurklein/followers","following_url":"https://api.github.com/users/docteurklein/following{/other_user}","gists_url":"https://api.github.com/users/docteurklein/gists{/gist_id}","starred_url":"https://api.github.com/users/docteurklein/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/docteurklein/subscriptions","organizations_url":"https://api.github.com/users/docteurklein/orgs","repos_url":"https://api.github.com/users/docteurklein/repos","events_url":"https://api.github.com/users/docteurklein/events{/privacy}","received_events_url":"https://api.github.com/users/docteurklein/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T09:18:48Z","updated_at":"2022-03-11T09:18:48Z","author_association":"NONE","body":"continuing my investigation: \r\nit looks like debezium's transformer doesn't update the value schema to include the generated key: https://github.com/debezium/debezium/blob/759e52c4234e4247bb6cdfb0f7c983ca7c35de30/debezium-core/src/main/java/io/debezium/transforms/ByLogicalTableRouter.java#L230-L231","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064923673/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050006367","html_url":"https://github.com/MaterializeInc/materialize/issues/10871#issuecomment-1050006367","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871","id":1050006367,"node_id":"IC_kwDOCkIcu84-ldNf","user":{"login":"wangandi","id":5522362,"node_id":"MDQ6VXNlcjU1MjIzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/5522362?v=4","gravatar_id":"","url":"https://api.github.com/users/wangandi","html_url":"https://github.com/wangandi","followers_url":"https://api.github.com/users/wangandi/followers","following_url":"https://api.github.com/users/wangandi/following{/other_user}","gists_url":"https://api.github.com/users/wangandi/gists{/gist_id}","starred_url":"https://api.github.com/users/wangandi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wangandi/subscriptions","organizations_url":"https://api.github.com/users/wangandi/orgs","repos_url":"https://api.github.com/users/wangandi/repos","events_url":"https://api.github.com/users/wangandi/events{/privacy}","received_events_url":"https://api.github.com/users/wangandi/received_events","type":"User","site_admin":false},"created_at":"2022-02-24T16:00:33Z","updated_at":"2022-02-24T16:00:33Z","author_association":"MEMBER","body":"The current workaround for users is that they should call `explain <query>` and see if there are implicit casts in the plan. If yes, create an index for `column::<type that column has been cast into>`.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050006367/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1057655567","html_url":"https://github.com/MaterializeInc/materialize/issues/10871#issuecomment-1057655567","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871","id":1057655567,"node_id":"IC_kwDOCkIcu84_CosP","user":{"login":"wangandi","id":5522362,"node_id":"MDQ6VXNlcjU1MjIzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/5522362?v=4","gravatar_id":"","url":"https://api.github.com/users/wangandi","html_url":"https://github.com/wangandi","followers_url":"https://api.github.com/users/wangandi/followers","following_url":"https://api.github.com/users/wangandi/following{/other_user}","gists_url":"https://api.github.com/users/wangandi/gists{/gist_id}","starred_url":"https://api.github.com/users/wangandi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wangandi/subscriptions","organizations_url":"https://api.github.com/users/wangandi/orgs","repos_url":"https://api.github.com/users/wangandi/repos","events_url":"https://api.github.com/users/wangandi/events{/privacy}","received_events_url":"https://api.github.com/users/wangandi/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T04:28:49Z","updated_at":"2022-03-08T15:38:45Z","author_association":"MEMBER","body":"## Task Breakdown\r\n\r\nWill edit this comment as I have more details.\r\n\r\n### Outline\r\n\r\nIndexes are used in 3 cases:\r\n- Filters of the form `<expr> = constant`.\r\n- Differential joins.\r\n- Delta joins.\r\n\r\nFor each of the 3 cases, we have to consider 2 subcases:\r\n- A: the cast does not change the underlying binary representation.\r\n- B: the cast does change the underlying binary representation.\r\n\r\n#### Case 1A and 1B: Filters of the form `<expr> = constant`.\r\n\r\nIf the predicate involves a downcast, e.g. `castint64toint32(<col>)=1::int32`, the entire query will error if any row in `<col>` cannot be downcast. Thus, it is simply not possible to use an index on `(<col>)` to speed up this query because we will need to do a full scan of the index in order to see whether or not the query should error.\r\n\r\nIf the predicate involves an upcast, e.g. `castint32toint64(<col>) = 1::int64`, the way to allow an index on `<col>` to be used is to downcast both sides of the equality: `<col> = 1::int32`. If downcasting the constant results in an error, then instead of propagating the error, we should transform the entire sub-relation into a zero-row constant. \r\n\r\nOptimization can theoretically handle the entirety of this case, but there is the issue that the code that selects indexes to use with filters of the form `<expr>=constant` currently lives in the MIR => LIR code. https://github.com/MaterializeInc/materialize/blob/47cc5960aa004de48fe09bbb5bb174a69f1d86aa/src/dataflow-types/src/plan/mod.rs#L442\r\n\r\nI think that the selection of indexes to use with filters of the form `<expr>=constant` should be moved to be the last transform in the MIR => MIR physical optimization block. (Incidentally, by having all index selection happen in the transform crate, this will unblock https://github.com/MaterializeInc/materialize/issues/4887#issuecomment-845278946.) The MIR => LIR code still needs to keep the code that detects if a filter can be sped up using an index since filter evaluation using an index is rendered differently from normal filter evaluation. \r\n\r\n#### Case 2B & Case 3B: Joins where columns with different underlying representations are compared\r\n\r\nThis is conceptually easy. Joins are already designed to run filters and projects between join stages. \r\nThe following diagram shows how differential join currently works. \r\n<img width=\"1404\" alt=\"Screen Shot 2022-03-03 at 1 41 27 PM\" src=\"https://user-images.githubusercontent.com/5522362/156960750-846b0676-a56e-4863-82d3-657dc6a94f8e.png\">\r\nThus, all we need to do is change everywhere that says \"Filter + Project\" and \"Cast + Filter + Project\".\r\n\r\nSpecifically, \r\n* If we need to upcast to use an existing arrangement, we just need to upcast the input collection.\r\n* If we need to downcast to use an existing arrangement, we need to filter away values that would error before running the downcast. This behavior is already built into dataflow rendering; `MapFilterProject` evaluates filters before maps if the filter does not depend on a value produced by the map,  https://github.com/MaterializeInc/materialize/blob/9611cc69528eee6228fe17e931340b1bb91e5684/src/expr/src/linear.rs#L1317\r\n* We should make sure that rows coming out of the join are of the expected types. \r\n\r\nHowever, this requires\r\n1) the optimization team to change [join_implementation.rs](https://github.com/MaterializeInc/materialize/blob/main/src/transform/src/join_implementation.rs) so it can select an index on `<col>` when the join constraint specifies `cast(<col>)`. \r\n2) the dataflow team to modify the [join rendering code](https://github.com/MaterializeInc/materialize/tree/main/src/dataflow-types/src/plan/join) to be able to infer, based on the indexes selected by optimization, in between which stages casts + filters would go.\r\n\r\nBoth of these tasks are non-trivial. It is likely that if we take on this task, both teams will consider handling delta joins will be a separate task from handling differential joins. Before starting, optimization and dataflow should what optimization should communicate to dataflow. It is possible that `MirRelationExpr` will have to be modified to convey more detailed information about the join that it currently does; if so, we should also take the opportunity to think about how the modified `MirRelationExpr` could support #7476.\r\n\r\n#### Case 2A & Case 3A: Joins where columns with the same underlying representations are compared\r\n\r\nThis is doable entirely on the optimization side:\r\n1) Do the same change to [join_implementation.rs](https://github.com/MaterializeInc/materialize/blob/main/src/transform/src/join_implementation.rs) as needed for the Case 2B + Case3B\r\n2) Teach the [`MapFilterProject` struct](https://github.com/MaterializeInc/materialize/blob/main/src/expr/src/linear.rs) that upcasts that don't change the underlying representation are no-ops and downcasts that change the underlying representation are filters.  ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1057655567/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062934058","html_url":"https://github.com/MaterializeInc/materialize/issues/10871#issuecomment-1062934058","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871","id":1062934058,"node_id":"IC_kwDOCkIcu84_WxYq","user":{"login":"aalexandrov","id":1071946,"node_id":"MDQ6VXNlcjEwNzE5NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1071946?v=4","gravatar_id":"","url":"https://api.github.com/users/aalexandrov","html_url":"https://github.com/aalexandrov","followers_url":"https://api.github.com/users/aalexandrov/followers","following_url":"https://api.github.com/users/aalexandrov/following{/other_user}","gists_url":"https://api.github.com/users/aalexandrov/gists{/gist_id}","starred_url":"https://api.github.com/users/aalexandrov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aalexandrov/subscriptions","organizations_url":"https://api.github.com/users/aalexandrov/orgs","repos_url":"https://api.github.com/users/aalexandrov/repos","events_url":"https://api.github.com/users/aalexandrov/events{/privacy}","received_events_url":"https://api.github.com/users/aalexandrov/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T13:42:48Z","updated_at":"2022-03-09T13:42:48Z","author_association":"CONTRIBUTOR","body":"> This implicit cast may happen even if you cast 'to_match' to become the same type as `foo.a`.\r\n\r\nI am trying to figure out why this happens, see [the `mzt` repo](https://github.com/aalexandrov/mzt-repos/blob/main/issue_10871/README.md#observations).","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062934058/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064233519","html_url":"https://github.com/MaterializeInc/materialize/issues/10871#issuecomment-1064233519","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871","id":1064233519,"node_id":"IC_kwDOCkIcu84_buov","user":{"login":"aalexandrov","id":1071946,"node_id":"MDQ6VXNlcjEwNzE5NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1071946?v=4","gravatar_id":"","url":"https://api.github.com/users/aalexandrov","html_url":"https://github.com/aalexandrov","followers_url":"https://api.github.com/users/aalexandrov/followers","following_url":"https://api.github.com/users/aalexandrov/following{/other_user}","gists_url":"https://api.github.com/users/aalexandrov/gists{/gist_id}","starred_url":"https://api.github.com/users/aalexandrov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aalexandrov/subscriptions","organizations_url":"https://api.github.com/users/aalexandrov/orgs","repos_url":"https://api.github.com/users/aalexandrov/repos","events_url":"https://api.github.com/users/aalexandrov/events{/privacy}","received_events_url":"https://api.github.com/users/aalexandrov/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T16:14:45Z","updated_at":"2022-03-10T16:14:45Z","author_association":"CONTRIBUTOR","body":"One way to communicate whether a type conversion is (a) _injective_ (i.e an _upcast_), and (b) binary compatible is to use type annotation and a rule-based macro, similar to the way this is defined for unary functions. ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064233519/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065053384","html_url":"https://github.com/MaterializeInc/materialize/pull/11164#issuecomment-1065053384","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164","id":1065053384,"node_id":"IC_kwDOCkIcu84_e2zI","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T12:06:42Z","updated_at":"2022-03-11T12:06:42Z","author_association":"CONTRIBUTOR","body":"Whoops, didn't mean to nerdsnipe you 😁 \r\n\r\nI'd be happy to pick this one up next week (assuming the baby / parental leave doesn't come sooner), thanks for kicking it off! Storing the modifiers as a `Vec<i64>` alongside the existing types is also what I had in mind, and it seems like this gets us close","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065053384/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1049257686","html_url":"https://github.com/MaterializeInc/materialize/issues/10854#issuecomment-1049257686","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10854","id":1049257686,"node_id":"IC_kwDOCkIcu84-imbW","user":{"login":"jkosh44","id":10800303,"node_id":"MDQ6VXNlcjEwODAwMzAz","avatar_url":"https://avatars.githubusercontent.com/u/10800303?v=4","gravatar_id":"","url":"https://api.github.com/users/jkosh44","html_url":"https://github.com/jkosh44","followers_url":"https://api.github.com/users/jkosh44/followers","following_url":"https://api.github.com/users/jkosh44/following{/other_user}","gists_url":"https://api.github.com/users/jkosh44/gists{/gist_id}","starred_url":"https://api.github.com/users/jkosh44/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkosh44/subscriptions","organizations_url":"https://api.github.com/users/jkosh44/orgs","repos_url":"https://api.github.com/users/jkosh44/repos","events_url":"https://api.github.com/users/jkosh44/events{/privacy}","received_events_url":"https://api.github.com/users/jkosh44/received_events","type":"User","site_admin":false},"created_at":"2022-02-23T22:02:40Z","updated_at":"2022-02-23T22:02:40Z","author_association":"CONTRIBUTOR","body":"I don't think we can just special case some scenarios and we will have to handle it gracefully. For example consider the following scenarios:\r\n\r\n- 1 day > 24 hrs\r\n- 2 days > 48 hrs\r\n- x months 1 day > x months 24 hrs\r\n- x months 1 day ?? y months 24 hours","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1049257686/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1057728777","html_url":"https://github.com/MaterializeInc/materialize/issues/11000#issuecomment-1057728777","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11000","id":1057728777,"node_id":"IC_kwDOCkIcu84_C6kJ","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T06:45:54Z","updated_at":"2022-03-03T06:45:54Z","author_association":"MEMBER","body":"> @benesch has a plan for how to get this information in `expr`. He thinks we should eventually do it, but that it would take ~1 month of work. Nikhil, I didn't quite follow the idea when you explained it; would you mind repeating it here or linking to somewhere where it's described?\r\n\r\nSo `sql` mostly has the information about parameter types that we need. See, for example:\r\n\r\nhttps://github.com/MaterializeInc/materialize/blob/7bb6cc0e1117a85e1eeb129f0c9583122f59d574/src/sql/src/func.rs#L1818-L1819\r\n\r\nThat says that `HmacString` is a function that takes three parameters of type `string`, `string`, and `bytes`, while `HmacBytes` is a function that takes three parameters of type `bytes`, `bytes`, and `string`.\r\n\r\nBut there's a bunch of complexity around polymorphic types, which can take many different types as input. For example:\r\n\r\nhttps://github.com/MaterializeInc/materialize/blob/7bb6cc0e1117a85e1eeb129f0c9583122f59d574/src/sql/src/func.rs#L1826\r\n\r\nI don't think we'd want to push that kind of complexity down into `expr`.\r\n\r\nSo my proposal is to do the reverse. Make `HirScalarExpr` generic over some `trait Function`, and let SQL supply the actual function implementations. Then instead of moving parameter type information into `expr`, we actually move return type information into SQL, so it can all be colocated, and then expose that information to `expr` by way of a trait.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1057728777/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061921050","html_url":"https://github.com/MaterializeInc/materialize/issues/11032#issuecomment-1061921050","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032","id":1061921050,"node_id":"IC_kwDOCkIcu84_S6Ea","user":{"login":"jkosh44","id":10800303,"node_id":"MDQ6VXNlcjEwODAwMzAz","avatar_url":"https://avatars.githubusercontent.com/u/10800303?v=4","gravatar_id":"","url":"https://api.github.com/users/jkosh44","html_url":"https://github.com/jkosh44","followers_url":"https://api.github.com/users/jkosh44/followers","following_url":"https://api.github.com/users/jkosh44/following{/other_user}","gists_url":"https://api.github.com/users/jkosh44/gists{/gist_id}","starred_url":"https://api.github.com/users/jkosh44/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkosh44/subscriptions","organizations_url":"https://api.github.com/users/jkosh44/orgs","repos_url":"https://api.github.com/users/jkosh44/repos","events_url":"https://api.github.com/users/jkosh44/events{/privacy}","received_events_url":"https://api.github.com/users/jkosh44/received_events","type":"User","site_admin":false},"created_at":"2022-03-08T15:46:31Z","updated_at":"2022-03-08T15:46:31Z","author_association":"CONTRIBUTOR","body":"Not very urgent, but I'm having trouble figuring out how to create this scenario, probably because I'm not very familiar with portals. I've tried to use cursors like so\r\n```sql\r\nmaterialize=> CREATE TABLE t1(a int);\r\nCREATE TABLE\r\nmaterialize=> CREATE TABLE t2(a int);\r\nCREATE TABLE\r\nmaterialize=> INSERT INTO t1 VALUES (667), (668), (669);\r\nINSERT 0 3\r\nmaterialize=> INSERT INTO t2 VALUES (42), (43), (44);\r\nINSERT 0 3\r\nmaterialize=> BEGIN;\r\nBEGIN\r\nmaterialize=*> DECLARE c1 CURSOR FOR SELECT * FROM t1;\r\nDECLARE CURSOR\r\nmaterialize=*> DECLARE c2 CURSOR FOR SELECT * FROM t2;\r\nDECLARE CURSOR\r\nmaterialize=*> FETCH c1;\r\n  a  \r\n-----\r\n 667\r\n(1 row)\r\n\r\nmaterialize=*> FETCH c1;\r\n  a  \r\n-----\r\n 668\r\n(1 row)\r\n\r\nmaterialize=*> FETCH c2;\r\n a  \r\n----\r\n 42\r\n(1 row)\r\n```\r\n\r\nHowever instead of having multiple in flight peeks, the first `FETCH` of each cursor would completely execute the query and stash the results somewhere. So only the first `FETCH` of each cursor creates a peek which is completed by the time the `FETCH` is complete.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061921050/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062056871","html_url":"https://github.com/MaterializeInc/materialize/issues/11032#issuecomment-1062056871","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032","id":1062056871,"node_id":"IC_kwDOCkIcu84_TbOn","user":{"login":"mjibson","id":41181,"node_id":"MDQ6VXNlcjQxMTgx","avatar_url":"https://avatars.githubusercontent.com/u/41181?v=4","gravatar_id":"","url":"https://api.github.com/users/mjibson","html_url":"https://github.com/mjibson","followers_url":"https://api.github.com/users/mjibson/followers","following_url":"https://api.github.com/users/mjibson/following{/other_user}","gists_url":"https://api.github.com/users/mjibson/gists{/gist_id}","starred_url":"https://api.github.com/users/mjibson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjibson/subscriptions","organizations_url":"https://api.github.com/users/mjibson/orgs","repos_url":"https://api.github.com/users/mjibson/repos","events_url":"https://api.github.com/users/mjibson/events{/privacy}","received_events_url":"https://api.github.com/users/mjibson/received_events","type":"User","site_admin":false},"created_at":"2022-03-08T18:03:17Z","updated_at":"2022-03-08T18:03:17Z","author_association":"CONTRIBUTOR","body":"You can force the peeks to pend using AS OF:\r\n\r\n```DECLARE c1 CURSOR FOR SELECT * FROM t1 AS OF now()+ '5s'```\r\n\r\nBut, hmm, I think that we don't actually execute that (and thus put it into pending) until the first FETCH (due to #6770), and due to #10763 FETCH doesn't know how to timeout a pending peek.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062056871/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062094680","html_url":"https://github.com/MaterializeInc/materialize/issues/11032#issuecomment-1062094680","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11032","id":1062094680,"node_id":"IC_kwDOCkIcu84_TkdY","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-08T18:49:17Z","updated_at":"2022-03-08T18:49:17Z","author_association":"MEMBER","body":"> Not very urgent, but I'm having trouble figuring out how to create this scenario, probably because I'm not very familiar with portals. I've tried to use cursors like so\r\n> \r\n> ```sql\r\n> materialize=> CREATE TABLE t1(a int);\r\n> CREATE TABLE\r\n> materialize=> CREATE TABLE t2(a int);\r\n> CREATE TABLE\r\n> materialize=> INSERT INTO t1 VALUES (667), (668), (669);\r\n> INSERT 0 3\r\n> materialize=> INSERT INTO t2 VALUES (42), (43), (44);\r\n> INSERT 0 3\r\n> materialize=> BEGIN;\r\n> BEGIN\r\n> materialize=*> DECLARE c1 CURSOR FOR SELECT * FROM t1;\r\n> DECLARE CURSOR\r\n> materialize=*> DECLARE c2 CURSOR FOR SELECT * FROM t2;\r\n> DECLARE CURSOR\r\n> materialize=*> FETCH c1;\r\n>   a  \r\n> -----\r\n>  667\r\n> (1 row)\r\n> \r\n> materialize=*> FETCH c1;\r\n>   a  \r\n> -----\r\n>  668\r\n> (1 row)\r\n> \r\n> materialize=*> FETCH c2;\r\n>  a  \r\n> ----\r\n>  42\r\n> (1 row)\r\n> ```\r\n> \r\n> However instead of having multiple in flight peeks, the first `FETCH` of each cursor would completely execute the query and stash the results somewhere. So only the first `FETCH` of each cursor creates a peek which is completed by the time the `FETCH` is complete.\r\n\r\nAhhh. That explains why the old pending peek code, which assumed only one active peek per connection, wasn't actually wrong. There's actually an ancient issue about this, now that it's paging back in: #1031.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062094680/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063177628","html_url":"https://github.com/MaterializeInc/materialize/issues/11137#issuecomment-1063177628","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137","id":1063177628,"node_id":"IC_kwDOCkIcu84_Xs2c","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T17:29:51Z","updated_at":"2022-03-09T17:29:51Z","author_association":"CONTRIBUTOR","body":"@benesch didn't you mention that pr might have been wrong?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063177628/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063638641","html_url":"https://github.com/MaterializeInc/materialize/issues/11137#issuecomment-1063638641","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137","id":1063638641,"node_id":"IC_kwDOCkIcu84_ZdZx","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T03:56:29Z","updated_at":"2022-03-10T03:56:29Z","author_association":"MEMBER","body":"If I did, didn't mean to! That PR is definitely doing a desirable thing. Definitely has some bugs, or exposed some bugs, though.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063638641/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064835194","html_url":"https://github.com/MaterializeInc/materialize/issues/11137#issuecomment-1064835194","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137","id":1064835194,"node_id":"IC_kwDOCkIcu84_eBh6","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T07:08:43Z","updated_at":"2022-03-11T07:08:43Z","author_association":"MEMBER","body":"Unassigning myself from this one! I think we can consider this one a \"don't care\" for now? At least, I'm personally comfortable with this taking .5s instead of .25s because it's not a config that users enable by default. Perhaps it makes @aljoscha or @ruchirK or @danhhz uncomfortable, though, and one of them might want to take a look?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064835194/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065016151","html_url":"https://github.com/MaterializeInc/materialize/issues/11137#issuecomment-1065016151","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137","id":1065016151,"node_id":"IC_kwDOCkIcu84_ettX","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T11:13:49Z","updated_at":"2022-03-11T11:13:49Z","author_association":"CONTRIBUTOR","body":"Moving to the Persistence team then for possible further action.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065016151/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065077390","html_url":"https://github.com/MaterializeInc/materialize/issues/11137#issuecomment-1065077390","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137","id":1065077390,"node_id":"IC_kwDOCkIcu84_e8qO","user":{"login":"aljoscha","id":68551,"node_id":"MDQ6VXNlcjY4NTUx","avatar_url":"https://avatars.githubusercontent.com/u/68551?v=4","gravatar_id":"","url":"https://api.github.com/users/aljoscha","html_url":"https://github.com/aljoscha","followers_url":"https://api.github.com/users/aljoscha/followers","following_url":"https://api.github.com/users/aljoscha/following{/other_user}","gists_url":"https://api.github.com/users/aljoscha/gists{/gist_id}","starred_url":"https://api.github.com/users/aljoscha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aljoscha/subscriptions","organizations_url":"https://api.github.com/users/aljoscha/orgs","repos_url":"https://api.github.com/users/aljoscha/repos","events_url":"https://api.github.com/users/aljoscha/events{/privacy}","received_events_url":"https://api.github.com/users/aljoscha/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T12:39:16Z","updated_at":"2022-03-11T12:39:16Z","author_association":"CONTRIBUTOR","body":"I don't think we care, because so much is in flux right now and all this code will likely change. Which... does make me feel nervous but I have accepted that! :sweat_smile: ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065077390/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058413582","html_url":"https://github.com/MaterializeInc/materialize/pull/10967#issuecomment-1058413582","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967","id":1058413582,"node_id":"IC_kwDOCkIcu84_FhwO","user":{"login":"nharring-adjacent","id":83188116,"node_id":"MDQ6VXNlcjgzMTg4MTE2","avatar_url":"https://avatars.githubusercontent.com/u/83188116?v=4","gravatar_id":"","url":"https://api.github.com/users/nharring-adjacent","html_url":"https://github.com/nharring-adjacent","followers_url":"https://api.github.com/users/nharring-adjacent/followers","following_url":"https://api.github.com/users/nharring-adjacent/following{/other_user}","gists_url":"https://api.github.com/users/nharring-adjacent/gists{/gist_id}","starred_url":"https://api.github.com/users/nharring-adjacent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nharring-adjacent/subscriptions","organizations_url":"https://api.github.com/users/nharring-adjacent/orgs","repos_url":"https://api.github.com/users/nharring-adjacent/repos","events_url":"https://api.github.com/users/nharring-adjacent/events{/privacy}","received_events_url":"https://api.github.com/users/nharring-adjacent/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T19:34:23Z","updated_at":"2022-03-03T19:34:23Z","author_association":"CONTRIBUTOR","body":"Generally speaking is it accurate that this design has a strong 1:1 relationship between shards and worker instances and that resizing workers will therefor always require resharding?\r\n\r\nIn every prior sharded system I have worked on sharding schemes of this type have eventually caused lots of operational pain compared to \"micro-sharding\" and allowing workers to have variable numbers of shards. Minimizing or eliminating the need to reshard data not only simplified general operations but it also opens up the potential for much finer grained load distribution and balancing.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058413582/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060484418","html_url":"https://github.com/MaterializeInc/materialize/pull/10967#issuecomment-1060484418","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967","id":1060484418,"node_id":"IC_kwDOCkIcu84_NbVC","user":{"login":"petrosagg","id":939420,"node_id":"MDQ6VXNlcjkzOTQyMA==","avatar_url":"https://avatars.githubusercontent.com/u/939420?v=4","gravatar_id":"","url":"https://api.github.com/users/petrosagg","html_url":"https://github.com/petrosagg","followers_url":"https://api.github.com/users/petrosagg/followers","following_url":"https://api.github.com/users/petrosagg/following{/other_user}","gists_url":"https://api.github.com/users/petrosagg/gists{/gist_id}","starred_url":"https://api.github.com/users/petrosagg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/petrosagg/subscriptions","organizations_url":"https://api.github.com/users/petrosagg/orgs","repos_url":"https://api.github.com/users/petrosagg/repos","events_url":"https://api.github.com/users/petrosagg/events{/privacy}","received_events_url":"https://api.github.com/users/petrosagg/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T10:43:19Z","updated_at":"2022-03-07T10:43:19Z","author_association":"CONTRIBUTOR","body":"@nharring-adjacent \r\n> Generally speaking is it accurate that this design has a strong 1:1 relationship between shards and worker instances and that resizing workers will therefor always require resharding?\r\n\r\nNo that is not required, only described as an example in this document based on the assumption that we want to always have all workers write out data. See this answer to a similar question: https://github.com/MaterializeInc/materialize/pull/10967#discussion_r820581001","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060484418/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060497534","html_url":"https://github.com/MaterializeInc/materialize/pull/10967#issuecomment-1060497534","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10967","id":1060497534,"node_id":"IC_kwDOCkIcu84_Neh-","user":{"login":"petrosagg","id":939420,"node_id":"MDQ6VXNlcjkzOTQyMA==","avatar_url":"https://avatars.githubusercontent.com/u/939420?v=4","gravatar_id":"","url":"https://api.github.com/users/petrosagg","html_url":"https://github.com/petrosagg","followers_url":"https://api.github.com/users/petrosagg/followers","following_url":"https://api.github.com/users/petrosagg/following{/other_user}","gists_url":"https://api.github.com/users/petrosagg/gists{/gist_id}","starred_url":"https://api.github.com/users/petrosagg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/petrosagg/subscriptions","organizations_url":"https://api.github.com/users/petrosagg/orgs","repos_url":"https://api.github.com/users/petrosagg/repos","events_url":"https://api.github.com/users/petrosagg/events{/privacy}","received_events_url":"https://api.github.com/users/petrosagg/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T10:50:16Z","updated_at":"2022-03-07T10:50:16Z","author_association":"CONTRIBUTOR","body":"> I think this is good content. I have some thoughts about stuff we'll want to spell out eventually, I think, but maybe it is too early idk? Specifically, we'll want to maintain compacted data somewhere. This is part of the \"fast restart\" story, and we can ignore that for now and it's all good. But, there is probably a TBD for \"snapshots of compacted data, and how to manage them\"?\r\n\r\n@frankmcsherry I didn't really follow this. Each shard of a STORAGE collection is backed by a `persist` collection which will (at some point) have compaction driven by the held `since` handles and so we'll get fast restarts as a side effect of the `since` frontier advancing. Maybe I missed it but afaik we haven't talked about fast restarts in a setting were we also holdback `since` to the distant past. Is this something we need to support?\r\n\r\n> Without compaction, are the since frontiers there to ensure that we don't misuse a rendition (e.g. hand out access to it through the metadata before since)?\r\n\r\nThey are there so that STORAGE can enable compaction privately when we have it\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060497534/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054569711","html_url":"https://github.com/MaterializeInc/materialize/pull/10945#issuecomment-1054569711","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945","id":1054569711,"node_id":"IC_kwDOCkIcu84-23Tv","user":{"login":"morsapaes","id":23521087,"node_id":"MDQ6VXNlcjIzNTIxMDg3","avatar_url":"https://avatars.githubusercontent.com/u/23521087?v=4","gravatar_id":"","url":"https://api.github.com/users/morsapaes","html_url":"https://github.com/morsapaes","followers_url":"https://api.github.com/users/morsapaes/followers","following_url":"https://api.github.com/users/morsapaes/following{/other_user}","gists_url":"https://api.github.com/users/morsapaes/gists{/gist_id}","starred_url":"https://api.github.com/users/morsapaes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/morsapaes/subscriptions","organizations_url":"https://api.github.com/users/morsapaes/orgs","repos_url":"https://api.github.com/users/morsapaes/repos","events_url":"https://api.github.com/users/morsapaes/events{/privacy}","received_events_url":"https://api.github.com/users/morsapaes/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T19:03:52Z","updated_at":"2022-02-28T19:03:52Z","author_association":"MEMBER","body":"It's not, there was just a leftover glitch in the 3rd Party documentation page for Redpanda!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054569711/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054573903","html_url":"https://github.com/MaterializeInc/materialize/pull/10945#issuecomment-1054573903","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945","id":1054573903,"node_id":"IC_kwDOCkIcu84-24VP","user":{"login":"ruf-io","id":11527560,"node_id":"MDQ6VXNlcjExNTI3NTYw","avatar_url":"https://avatars.githubusercontent.com/u/11527560?v=4","gravatar_id":"","url":"https://api.github.com/users/ruf-io","html_url":"https://github.com/ruf-io","followers_url":"https://api.github.com/users/ruf-io/followers","following_url":"https://api.github.com/users/ruf-io/following{/other_user}","gists_url":"https://api.github.com/users/ruf-io/gists{/gist_id}","starred_url":"https://api.github.com/users/ruf-io/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ruf-io/subscriptions","organizations_url":"https://api.github.com/users/ruf-io/orgs","repos_url":"https://api.github.com/users/ruf-io/repos","events_url":"https://api.github.com/users/ruf-io/events{/privacy}","received_events_url":"https://api.github.com/users/ruf-io/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T19:09:00Z","updated_at":"2022-02-28T19:09:00Z","author_association":"MEMBER","body":"Fake news. Sorry to get everyone's hopes up!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054573903/reactions","total_count":1,"+1":0,"-1":0,"laugh":1,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054988538","html_url":"https://github.com/MaterializeInc/materialize/pull/10945#issuecomment-1054988538","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10945","id":1054988538,"node_id":"IC_kwDOCkIcu84-4dj6","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-01T04:08:52Z","updated_at":"2022-03-01T04:08:52Z","author_association":"MEMBER","body":"No worries! I'll leave this open so that we can merge it when the time comes.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054988538/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1055713146","html_url":"https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1055713146","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","id":1055713146,"node_id":"IC_kwDOCkIcu84-7Od6","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-01T18:05:08Z","updated_at":"2022-03-01T18:05:08Z","author_association":"MEMBER","body":"Are we sure this is the right direction to go? It is just so, so easy to accidentally drop a future. We're pivoting the coordinator client in the opposite direction: to make it tolerant of being dropped in the middle of any `await` point.\r\n\r\nIs there something concretely that goes wrong if that task gets dropped while awaiting a send into that channel?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1055713146/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1055736553","html_url":"https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1055736553","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","id":1055736553,"node_id":"IC_kwDOCkIcu84-7ULp","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-01T18:32:25Z","updated_at":"2022-03-01T18:32:25Z","author_association":"CONTRIBUTOR","body":"@benesch I agree that making drop-safe futures is better, and using drop-safe futures in the coordinator is the right way to go.\r\n\r\nI experimented with moving the sleep-interval out into the select!, but then the source future could hold the read-lock while the `tick` future tried to get the write lock, which I think is a deadlock?\r\n\r\n2 options to change this is:\r\n- spawn the source future in a tokio-task, that way it can always progress while the tick future is working (this one I don't think is too bad)\r\n- switch the `SimpleSource::start` api to some kind of polling model\r\n\r\n\r\nAs for the `send`, its hard to confirm; I know receiving is always drop-safe, but I think with sending on a bounded channel, dropping the future could case the value trying to be sent to be lost? (https://docs.rs/tokio/latest/tokio/sync/mpsc/struct.Sender.html#method.send)\r\nhttps://docs.rs/tokio/latest/tokio/sync/mpsc/struct.Sender.html#method.reserve could help with this I suppose ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1055736553/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1055976211","html_url":"https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1055976211","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","id":1055976211,"node_id":"IC_kwDOCkIcu84-8OsT","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-01T23:41:25Z","updated_at":"2022-03-01T23:41:35Z","author_association":"CONTRIBUTOR","body":"@benesch the other concrete thing that goes wrong is the tokio::sleep call can be dropped, so you could wait until JUST before the sleep call is done, then get dropped, and the next loop will start over, so your interval can be doubled (an arbitrary number of times)","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1055976211/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1056268603","html_url":"https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1056268603","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","id":1056268603,"node_id":"IC_kwDOCkIcu84-9WE7","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-02T05:30:39Z","updated_at":"2022-03-02T05:30:39Z","author_association":"MEMBER","body":"Ok, sorry, finally sat down and paged all this in this in.\r\n\r\n> I experimented with moving the sleep-interval out into the select!, but then the source future could hold the read-lock while the tick future tried to get the write lock, which I think is a deadlock?\r\n\r\nThis seems like it would work? The source future can already hold the read lock while the tick future will get the write lock... it'll just block, no? It doesn't seem any different to me if you hoist the sleep into the `select` directly and push the rest of `tick` into the body of the select. Unless async/await somehow corrupts the rule, you can't deadlock if there is only one thread.\r\n\r\n> spawn the source future in a tokio-task, that way it can always progress while the tick future is working (this one I don't think is too bad)\r\n\r\nThis also seems like it might just be clearer! A bit of cleanup logic to do, to shut down the tick future when the source future exits, but perhaps better models the situation, since there are two separate futures than can do their work in parallel on two threads.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1056268603/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058387680","html_url":"https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1058387680","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","id":1058387680,"node_id":"IC_kwDOCkIcu84_Fbbg","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T19:03:04Z","updated_at":"2022-03-03T19:03:04Z","author_association":"CONTRIBUTOR","body":"@benesch you are right, there is no deadlock, I added a comment to `Timestamper::start_tx` with a comment about deadlocks (information from https://docs.rs/tokio/latest/tokio/sync/struct.RwLock.html#method.read and https://github.com/tokio-rs/tokio/issues/2849)\r\n\r\nAs for the cancel-safety of `tick`: the `send` call is guaranteed to drop the value that is being sent: https://docs.rs/tokio/latest/tokio/sync/mpsc/struct.Sender.html#cancel-safety, so the options are:\r\n- move the interval out into the `select!` statement, and `tokio::spawn` the `source` future (I think this is still necessary, as if the source future HOLDS the read lock, and we move into the `tick` future, we no longer poll the source future and will block forever trying to obtain the write lock, unless we allow the source future to make progress always (by spawning it) (unless i am really missing something)\r\n- stop using `rwlock`, and instead change `SimpleSource::start` to be some `tick/poll` async method that is passed the current timestamp (this seems more difficult to change)\r\n- Use the `&mut future` solution I have here","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058387680/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058499967","html_url":"https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1058499967","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","id":1058499967,"node_id":"IC_kwDOCkIcu84_F21_","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T21:12:32Z","updated_at":"2022-03-03T21:12:32Z","author_association":"MEMBER","body":"> move the interval out into the select! statement, and tokio::spawn the source future (I think this is still necessary, as if the source future HOLDS the read lock, and we move into the tick future, we no longer poll the source future and will block forever trying to obtain the write lock, unless we allow the source future to make progress always (by spawning it) (unless i am really missing something)\r\n\r\nAh, I see.\r\n\r\nOk, let's back up. It seems like there are two tasks here:\r\n\r\n  * One task that \"runs\" a source. It needs to be provided some type that has `start_tx`, `insert`, `delete`, and `error` methods.\r\n  * Another task that periodically ticks forward the transaction timestamp.\r\n\r\nIt seems like the pain here comes from having this `Timestamp` type that wants to be in _both_ tasks. I think we should just ... not do that, and let each task only own the synchronization primitives it needs. \r\n\r\nIt seems like structuring the code like this would avoid all the hazards?\r\n\r\n```diff\r\ndiff --git a/src/dataflow/src/source/mod.rs b/src/dataflow/src/source/mod.rs\r\nindex 69ac46ed6..e32c3bfa6 100644\r\n--- a/src/dataflow/src/source/mod.rs\r\n+++ b/src/dataflow/src/source/mod.rs\r\n@@ -659,21 +659,16 @@ impl SourceTransaction<'_> {\r\n /// When a transaction is started using [start_tx](Timestamper::start_tx) the internal clock will be\r\n /// frozen and any subsequent rows will be timestamped with the exact same timestamp. The\r\n /// transaction is committed automatically as soon as the transaction object gets dropped.\r\n-pub struct Timestamper {\r\n-    inner: Arc<RwLock<Timestamp>>,\r\n-    sender: EventSender,\r\n-    tick_duration: Duration,\r\n-    now: NowFn,\r\n+pub struct TxnTimestamper {\r\n+    timestamp: Arc<RwLock<Timestamp>>,\r\n+    sender: EventSender\r\n }\r\n \r\n-impl Timestamper {\r\n-    fn new(sender: EventSender, tick_duration: Duration, now: NowFn) -> Self {\r\n-        let ts = now();\r\n+impl TxnTimestamper {\r\n+    fn new(timestamp: Arc<RwLock<Timestamp>>, sender: EventSender) -> Self {\r\n         Self {\r\n-            inner: Arc::new(RwLock::new(ts)),\r\n+            timestamp,\r\n             sender,\r\n-            tick_duration,\r\n-            now,\r\n         }\r\n     }\r\n \r\n@@ -681,7 +676,7 @@ impl Timestamper {\r\n     /// clock while a transaction is active.\r\n     pub async fn start_tx<'a>(&'a self) -> SourceTransaction<'a> {\r\n         SourceTransaction {\r\n-            timestamp: self.inner.read().await,\r\n+            timestamp: self.timestamp.read().await,\r\n             sender: &self.sender,\r\n         }\r\n     }\r\n@@ -699,42 +694,12 @@ impl Timestamper {\r\n     /// Records an error. After this method is called the source will permanently be in an errored\r\n     /// state\r\n     async fn error(&self, err: SourceError) -> anyhow::Result<()> {\r\n-        let timestamp = self.inner.read().await;\r\n+        let timestamp = self.timestamp.read().await;\r\n         self.sender\r\n             .send(Event::Message(*timestamp, Err(err)))\r\n             .await\r\n             .or_else(|_| Err(anyhow!(\"channel closed\")))\r\n     }\r\n-\r\n-    /// Attempts to monotonically increase the current timestamp and provides a Progress message to\r\n-    /// timely.\r\n-    ///\r\n-    /// This method will wait for all current transactions to commit before advancing the clock and\r\n-    /// will cause any new requests for transactions to wait for the tick to complete before\r\n-    /// starting.  This is due to the write-preferring behaviour of the tokio RwLock.\r\n-    async fn tick(&self) -> anyhow::Result<()> {\r\n-        tokio::time::sleep(self.tick_duration).await;\r\n-        let mut timestamp = self.inner.write().await;\r\n-        let mut now: u128 = (self.now)().into();\r\n-\r\n-        // Round to the next greatest self.tick_duration increment.\r\n-        // This is to guarantee that different workers downgrade (without coordination) to the\r\n-        // \"same\" next time\r\n-        now += self.tick_duration.as_millis() - (now % self.tick_duration.as_millis());\r\n-\r\n-        let now: u64 = now\r\n-            .try_into()\r\n-            .expect(\"materialize has existed for more than 500M years\");\r\n-\r\n-        if *timestamp < now {\r\n-            *timestamp = now;\r\n-            self.sender\r\n-                .send(Event::Progress(Some(*timestamp)))\r\n-                .await\r\n-                .or_else(|_| Err(anyhow!(\"channel closed\")))?;\r\n-        }\r\n-        Ok(())\r\n-    }\r\n }\r\n \r\n /// Simple sources must implement this trait. Sources will then get created as part of the\r\n@@ -749,7 +714,7 @@ pub trait SimpleSource {\r\n     ///\r\n     /// Implementors should return an Err(_) if an unrecoverable error is encountered or Ok(()) when\r\n     /// they have finished consuming the upstream data.\r\n-    async fn start(self, timestamper: &Timestamper) -> Result<(), SourceError>;\r\n+    async fn start(self, timestamper: TxnTimestamper) -> Result<(), SourceError>;\r\n }\r\n \r\n /// Creates a source dataflow operator from a connector implementing [SimpleSource](SimpleSource)\r\n@@ -785,26 +750,43 @@ where\r\n \r\n     if active {\r\n         task::spawn(\r\n-            || format!(\"source_simple_timestamper:{}\", id.source_id),\r\n+            || format!(\"source_simple_driver:{}\", id.source_id),\r\n             async move {\r\n-                let timestamper = Timestamper::new(tx, timestamp_frequency, now);\r\n-                let source = connector.start(&timestamper);\r\n-                tokio::pin!(source);\r\n+                let timestamp = Arc::new(RwLock::new(now()));\r\n \r\n-                loop {\r\n-                    tokio::select! {\r\n-                        res = timestamper.tick() => {\r\n-                            if res.is_err() {\r\n-                                break;\r\n-                            }\r\n-                        }\r\n-                        res = &mut source => {\r\n-                            if let Err(err) = res {\r\n-                                let _ = timestamper.error(err).await;\r\n+                let timestamper = task::spawn(\r\n+                    || format!(\"source_simple_timestamp_ticker:{}\", id.source_id),\r\n+                    async move {\r\n+                        loop {\r\n+                            tokio::time::sleep(timestamp_frequency).await;\r\n+                            let mut timestamp = timestamp.write().await;\r\n+                            let mut now: u128 = now().into();\r\n+\r\n+                            // Round to the next greatest self.tick_duration increment.\r\n+                            // This is to guarantee that different workers downgrade (without coordination) to the\r\n+                            // \"same\" next time\r\n+                            now += timestamp_frequency.as_millis() - (now % timestamp_frequency.as_millis());\r\n+\r\n+                            let now: u64 = now\r\n+                                .try_into()\r\n+                                .expect(\"materialize has existed for more than 500M years\");\r\n+\r\n+                            if *timestamp < now {\r\n+                                *timestamp = now;\r\n+                                if let Err(_) = tx.send(Event::Progress(Some(*timestamp))).await {\r\n+                                    return;\r\n+                                }\r\n                             }\r\n-                            break;\r\n                         }\r\n                     }\r\n+                );\r\n+\r\n+                let txn_timestamper = TxnTimestamper::new(Arc::clone(&timestamp), tx.clone());\r\n+                let res = connector.start(txn_timestamper).await;\r\n+                timestamper.abort();\r\n+                if let Err(err) = res {\r\n+                    let timestamp = timestamp.read().await;\r\n+                    let _ = tx.send(Event::Message(*timestamp, Err(err))).await;\r\n                 }\r\n             },\r\n         );\r\n\r\n```\r\n\r\nI didn't even check if the above compiles; probably want to find a way to factor that back into separate functions, too, so it's not all inline in the source rendering.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058499967/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058624860","html_url":"https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1058624860","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","id":1058624860,"node_id":"IC_kwDOCkIcu84_GVVc","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T23:07:52Z","updated_at":"2022-03-03T23:08:02Z","author_association":"CONTRIBUTOR","body":"@benesch spawning the timestamper as a separate task seems very reasonable to me, ill get your code compiling!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1058624860/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1059775202","html_url":"https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1059775202","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","id":1059775202,"node_id":"IC_kwDOCkIcu84_KuLi","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-05T14:31:53Z","updated_at":"2022-03-05T14:31:53Z","author_association":"MEMBER","body":"The errors are:\r\n\r\n```\r\nmaterialized_1   | 2022-03-05T00:05:55.704695Z ERROR panic: JoinHandle polled after completion\r\nmaterialized_1   | thread: tokio:work-0\r\nmaterialized_1   | location: /cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.17.0/src/runtime/task/core.rs:208:22\r\nmaterialized_1   | version: 0.22.1-dev (fee3e6e66154e19a13f500f0a4b7815fea94cc7d)\r\nmaterialized_1   | backtrace:\r\n```\r\n\r\nwhich I think would also go away with the above suggestion!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1059775202/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060893831","html_url":"https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1060893831","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","id":1060893831,"node_id":"IC_kwDOCkIcu84_O_SH","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T16:42:19Z","updated_at":"2022-03-07T16:42:19Z","author_association":"CONTRIBUTOR","body":"@benesch you are totally right about those errors, sorry I am all over the place with this!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060893831/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060939596","html_url":"https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1060939596","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","id":1060939596,"node_id":"IC_kwDOCkIcu84_PKdM","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T17:28:00Z","updated_at":"2022-03-07T17:28:00Z","author_association":"CONTRIBUTOR","body":"@benesch, I think that without the `select!`, if the channel is closed, the timestamper task will panic, but the source future will continue. I guess we expect the source future to die when it hits a dead channel as well?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060939596/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060945115","html_url":"https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1060945115","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","id":1060945115,"node_id":"IC_kwDOCkIcu84_PLzb","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T17:34:10Z","updated_at":"2022-03-07T17:34:10Z","author_association":"MEMBER","body":"> @benesch, I think that without the `select!`, if the channel is closed, the timestamper task will panic, but the source future will continue. I guess we expect the source future to die when it hits a dead channel as well?\r\n\r\nSeems fine to make the source future panic too?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060945115/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060951947","html_url":"https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1060951947","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","id":1060951947,"node_id":"IC_kwDOCkIcu84_PNeL","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T17:41:21Z","updated_at":"2022-03-07T17:41:21Z","author_association":"CONTRIBUTOR","body":"@benesch I think a correct impl of source future will return an error (usually by returning `?` on a `TxnTimestamper` method), and we will exit the task, which I believe is the old behavior. The change is, we might not see this until the source tries to do something, and the timestamper task will just die in the background","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060951947/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060952691","html_url":"https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1060952691","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","id":1060952691,"node_id":"IC_kwDOCkIcu84_PNpz","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T17:42:01Z","updated_at":"2022-03-07T17:42:01Z","author_association":"CONTRIBUTOR","body":"Actually, `panic`-ing is probably worse than jsut ignoring the error in the timestamper task, as it will be noisy whenever we shut down a source","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060952691/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060953875","html_url":"https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1060953875","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10971","id":1060953875,"node_id":"IC_kwDOCkIcu84_PN8T","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T17:43:22Z","updated_at":"2022-03-07T17:43:22Z","author_association":"MEMBER","body":"That sounds good too! I'm in favor of introducing whatever channel protocol\nmakes things most straightforward.\n\nOn Mon, Mar 7, 2022 at 12:42 PM Gus Wynn ***@***.***> wrote:\n\n> Actually, panic-ing is probably worse than jsut ignoring the error in the\n> timestamper task, as it will be noisy whenever we shut down a source\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/MaterializeInc/materialize/pull/10971#issuecomment-1060952691>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAGXSIEA3YDHKAJKVXIVLGTU6Y5XNANCNFSM5PUXAZXQ>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n>\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060953875/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1049922055","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1049922055","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1049922055,"node_id":"IC_kwDOCkIcu84-lIoH","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"created_at":"2022-02-24T14:34:50Z","updated_at":"2022-02-24T14:34:50Z","author_association":"CONTRIBUTOR","body":"Hmm the new test failures here are a little tricky actually. We're actually newly passing some tests that postgres does, but there are some subtleties to work out, going to switch this to a draft for now","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1049922055/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050968981","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1050968981","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1050968981,"node_id":"IC_kwDOCkIcu84-pIOV","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T15:48:13Z","updated_at":"2022-02-25T15:48:13Z","author_association":"CONTRIBUTOR","body":"> Did you sort these out already? Everything seems copacetic now.\r\n\r\nYes! I had a bit of a wayward journey on two of them, but Sean helped out. Learned that we don't guarantee ordering of subqueries getting propagated to projections + that you can stuff an `ORDER BY` inside functions like `array_agg`","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050968981/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051092067","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1051092067","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1051092067,"node_id":"IC_kwDOCkIcu84-pmRj","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T18:27:22Z","updated_at":"2022-02-25T18:27:22Z","author_association":"CONTRIBUTOR","body":"The goal is to merge https://github.com/MaterializeInc/materialize/pull/10734 first, after which we'll want to update this PR to cover a few more cases before merging. We should check that homogenizing functions behave correctly (https://github.com/MaterializeInc/materialize/pull/10734#issuecomment-1049190832), and Sean came up with some subtle handling of character types we'll want to consider.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051092067/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051096190","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1051096190","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1051096190,"node_id":"IC_kwDOCkIcu84-pnR-","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T18:32:47Z","updated_at":"2022-02-25T18:32:47Z","author_association":"MEMBER","body":"Idk, this PR seems like a strict improvement in correctness that's ready to go. Is the concern that it interacts poorly with #10734?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051096190/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051098189","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1051098189","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1051098189,"node_id":"IC_kwDOCkIcu84-pnxN","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T18:35:49Z","updated_at":"2022-02-25T18:35:49Z","author_association":"CONTRIBUTOR","body":"Yeah -- without further changes, it might introduce mishandling of custom types. A bit TBD though... first the other one actually needs to get merged :)","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051098189/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051100492","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1051100492","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1051100492,"node_id":"IC_kwDOCkIcu84-poVM","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T18:39:32Z","updated_at":"2022-02-25T18:39:32Z","author_association":"MEMBER","body":"@benesch Yeah, the situation was that we could merge this or #10734 but merging both introduced behavior that PG disallows. PG e.g. doesn't allow coalescing named composite types with unnamed rows, even with the same schema; the union of these two changes, though, would permit that. So we need to change some of our casting/`guess_best_common_type` rules.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051100492/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051226642","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1051226642","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1051226642,"node_id":"IC_kwDOCkIcu84-qHIS","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T20:26:33Z","updated_at":"2022-02-25T20:26:33Z","author_association":"MEMBER","body":"One hot take, not verified, is that we should just remove all the logic that attempts to coerce between named and anonymous types, and treat them as entirely separate types. Is that roughly what PostgreSQL does?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051226642/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051331204","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1051331204","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1051331204,"node_id":"IC_kwDOCkIcu84-qgqE","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T22:44:11Z","updated_at":"2022-02-25T22:44:11Z","author_association":"MEMBER","body":"@benesch The issue is that casting from an anonymous to a named type requires an assignment cast context, and I believe we're only requiring implicit:\r\n\r\n```sql\r\n-- in PG\r\ncreate type foo as (a int);\r\ncreate table bar (a foo);\r\n-- assignment\r\ninsert into bar values (row(1));\r\nINSERT 0 1\r\n```\r\n\r\nThe annoying thing about this, though, is that polymorphic types _can_ get implicitly cast to other types implicitly:\r\n\r\n```sql\r\n-- in PG\r\nSELECT ARRAY[1::int8] || ARRAY[1::int4];\r\n ?column? \r\n----------\r\n {1,1}\r\n```\r\n\r\n...but just not when one of the types is custom.\r\n\r\nSo, this is all definitely doable, just requires typing.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051331204/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1053813677","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1053813677","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1053813677,"node_id":"IC_kwDOCkIcu84-z-ut","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T02:34:45Z","updated_at":"2022-02-28T02:34:45Z","author_association":"MEMBER","body":"> @benesch The issue is that casting from an anonymous to a named type requires an assignment cast context, and I believe we're only requiring implicit:\r\n> \r\n> ```sql\r\n> -- in PG\r\n> create type foo as (a int);\r\n> create table bar (a foo);\r\n> -- assignment\r\n> insert into bar values (row(1));\r\n> INSERT 0 1\r\n> ```\r\n> \r\n> The annoying thing about this, though, is that polymorphic types _can_ get implicitly cast to other types implicitly:\r\n> \r\n> ```sql\r\n> -- in PG\r\n> SELECT ARRAY[1::int8] || ARRAY[1::int4];\r\n>  ?column? \r\n> ----------\r\n>  {1,1}\r\n> ```\r\n> \r\n> ...but just not when one of the types is custom.\r\n> \r\n> So, this is all definitely doable, just requires typing.\r\n\r\nI didn't quite follow this, @sploiselle! I took a stab at digging in and came up with #10911, #10934, and #10935. Possibly the conversion from `record` -> named row type needs to be made an assignment cast—but as best as I can tell from a quick skim of the [PostgreSQL source](https://github.com/postgres/postgres/blob/667726fbe50f21d7d3ce5d5c5949a45c2496b60f/src/backend/parser/parse_coerce.c#L1012), implicit seems right?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1053813677/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054389877","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1054389877","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1054389877,"node_id":"IC_kwDOCkIcu84-2LZ1","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T15:45:33Z","updated_at":"2022-02-28T15:45:33Z","author_association":"MEMBER","body":"Ah, you're right about the implicit cast. So the \"problem\" with this:\r\n\r\n```\r\nsean=# CREATE TYPE foo AS (a int);\r\nCREATE TYPE\r\nsean=# SELECT coalesce(ROW(1)::foo, ROW(2));\r\nERROR:  COALESCE types foo and record cannot be matched\r\nLINE 1: SELECT coalesce(ROW(1)::foo, ROW(2));\r\n                                     ^\r\n```\r\n\r\nis that named record types' category is \"Composite\" while `record` itself is pseudo.\r\n\r\n```\r\nSELECT pg_typeof(ROW(1));\r\n pg_typeof \r\n-----------\r\n record\r\n\r\nSELECT typcategory FROM pg_type where typname='record';\r\n typcategory \r\n-------------\r\n P\r\n\r\nSELECT typcategory FROM pg_type where typname='foo';\r\n typcategory \r\n-------------\r\n C\r\n C\r\n```\r\n\r\nSo this can be fixed out-of-band of this PR, which means this doesn't need to be blocked (though I'd prefer to land this fix first, which I'll do in a bit).","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054389877/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054400511","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1054400511","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1054400511,"node_id":"IC_kwDOCkIcu84-2N__","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T15:56:15Z","updated_at":"2022-02-28T15:56:15Z","author_association":"MEMBER","body":"> So this can be fixed out-of-band of this PR, which means this doesn't need to be blocked (though I'd prefer to land this fix first, which I'll do in a bit).\r\n\r\nYep, 100%, but I think it requires the large refactor described in #10934 because right now we don't have a way of representing an expression of type `record`.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054400511/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054428555","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1054428555","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1054428555,"node_id":"IC_kwDOCkIcu84-2U2L","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T16:23:18Z","updated_at":"2022-02-28T16:23:18Z","author_association":"MEMBER","body":"@benesch You were way ahead of me! I hadn't read #10934 yet, but you've clearly identified what needs to be done.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054428555/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1048687634","html_url":"https://github.com/MaterializeInc/materialize/issues/10840#issuecomment-1048687634","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840","id":1048687634,"node_id":"IC_kwDOCkIcu84-gbQS","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-02-23T11:30:02Z","updated_at":"2022-02-23T11:30:50Z","author_association":"CONTRIBUTOR","body":"To reproduce:\r\n\r\n1. Clone `https://github.com/philip-stoev/materialize.git`, branch `gh10840-test`\r\n2. In another terminal, start a background task:\r\n```\r\nwhile bash -c \"cargo clean ; cargo build --release\" ; do : ; done\r\n``` \r\n3. Run the test in a loop:\r\n\r\n```\r\nwhile bash -c \"bin/mzcompose --find testdrive down -v ;bin/mzcompose --find testdrive run testdrive-redpanda-ci\" ; do : ; done\r\n```\r\n\r\n4. At some point, the test will become very slow, with each query taking minute to execute. \r\n\r\n5. The container has been instrumented with the tokio console enabled. See `docker ps` to determine which local port was the port 6669 mapped, and connect to it using the tokio-console\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1048687634/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1048734799","html_url":"https://github.com/MaterializeInc/materialize/issues/10840#issuecomment-1048734799","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840","id":1048734799,"node_id":"IC_kwDOCkIcu84-gmxP","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-02-23T12:30:59Z","updated_at":"2022-02-23T12:30:59Z","author_association":"CONTRIBUTOR","body":"This hang also happens with:\r\n```\r\nwhile bash -c \"bin/mzcompose --find persistence down -v ;bin/mzcompose --find persistence run default\" ; do : ; done\r\n```\r\n\r\nthat is, without Redpanda involvement. This, being a persistence test, has some peculiarities:\r\n- 3800 rows in timestamps table\r\n- 6700 files in blob directory\r\n\r\nAlso:\r\n\r\n- there are about 100 tokio tasks with Location `/cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.14.17/src/common/exec.rs:49:21`","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1048734799/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1048906117","html_url":"https://github.com/MaterializeInc/materialize/issues/10840#issuecomment-1048906117","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840","id":1048906117,"node_id":"IC_kwDOCkIcu84-hQmF","user":{"login":"umanwizard","id":1893159,"node_id":"MDQ6VXNlcjE4OTMxNTk=","avatar_url":"https://avatars.githubusercontent.com/u/1893159?v=4","gravatar_id":"","url":"https://api.github.com/users/umanwizard","html_url":"https://github.com/umanwizard","followers_url":"https://api.github.com/users/umanwizard/followers","following_url":"https://api.github.com/users/umanwizard/following{/other_user}","gists_url":"https://api.github.com/users/umanwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/umanwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umanwizard/subscriptions","organizations_url":"https://api.github.com/users/umanwizard/orgs","repos_url":"https://api.github.com/users/umanwizard/repos","events_url":"https://api.github.com/users/umanwizard/events{/privacy}","received_events_url":"https://api.github.com/users/umanwizard/received_events","type":"User","site_admin":false},"created_at":"2022-02-23T15:31:04Z","updated_at":"2022-02-23T15:31:04Z","author_association":"MEMBER","body":"I will take a look if nobody else is","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1048906117/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1049262717","html_url":"https://github.com/MaterializeInc/materialize/issues/10840#issuecomment-1049262717","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840","id":1049262717,"node_id":"IC_kwDOCkIcu84-inp9","user":{"login":"umanwizard","id":1893159,"node_id":"MDQ6VXNlcjE4OTMxNTk=","avatar_url":"https://avatars.githubusercontent.com/u/1893159?v=4","gravatar_id":"","url":"https://api.github.com/users/umanwizard","html_url":"https://github.com/umanwizard","followers_url":"https://api.github.com/users/umanwizard/followers","following_url":"https://api.github.com/users/umanwizard/following{/other_user}","gists_url":"https://api.github.com/users/umanwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/umanwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umanwizard/subscriptions","organizations_url":"https://api.github.com/users/umanwizard/orgs","repos_url":"https://api.github.com/users/umanwizard/repos","events_url":"https://api.github.com/users/umanwizard/events{/privacy}","received_events_url":"https://api.github.com/users/umanwizard/received_events","type":"User","site_admin":false},"created_at":"2022-02-23T22:09:36Z","updated_at":"2022-02-23T22:20:37Z","author_association":"MEMBER","body":"@philip-stoev , I couldn't repro on your branch, because Materialize panics on start, and doesn't print a stack trace.\r\n\r\nAre you still able to repro on top of `v0.21.0-rc2` ? @benesch was hopeful that the fix to clean up librdkafka threads might fix the issue.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1049262717/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1049270832","html_url":"https://github.com/MaterializeInc/materialize/issues/10840#issuecomment-1049270832","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840","id":1049270832,"node_id":"IC_kwDOCkIcu84-ipow","user":{"login":"umanwizard","id":1893159,"node_id":"MDQ6VXNlcjE4OTMxNTk=","avatar_url":"https://avatars.githubusercontent.com/u/1893159?v=4","gravatar_id":"","url":"https://api.github.com/users/umanwizard","html_url":"https://github.com/umanwizard","followers_url":"https://api.github.com/users/umanwizard/followers","following_url":"https://api.github.com/users/umanwizard/following{/other_user}","gists_url":"https://api.github.com/users/umanwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/umanwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umanwizard/subscriptions","organizations_url":"https://api.github.com/users/umanwizard/orgs","repos_url":"https://api.github.com/users/umanwizard/repos","events_url":"https://api.github.com/users/umanwizard/events{/privacy}","received_events_url":"https://api.github.com/users/umanwizard/received_events","type":"User","site_admin":false},"created_at":"2022-02-23T22:20:49Z","updated_at":"2022-02-23T22:20:49Z","author_association":"MEMBER","body":"EDIT: changed to the correct tag name above (`v0.21.0-rc2`)","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1049270832/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054239166","html_url":"https://github.com/MaterializeInc/materialize/issues/10840#issuecomment-1054239166","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840","id":1054239166,"node_id":"IC_kwDOCkIcu84-1mm-","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T13:08:18Z","updated_at":"2022-02-28T13:08:18Z","author_association":"CONTRIBUTOR","body":"#10582 and #10840 may be the same thing after all.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054239166/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054440098","html_url":"https://github.com/MaterializeInc/materialize/issues/10840#issuecomment-1054440098","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840","id":1054440098,"node_id":"IC_kwDOCkIcu84-2Xqi","user":{"login":"umanwizard","id":1893159,"node_id":"MDQ6VXNlcjE4OTMxNTk=","avatar_url":"https://avatars.githubusercontent.com/u/1893159?v=4","gravatar_id":"","url":"https://api.github.com/users/umanwizard","html_url":"https://github.com/umanwizard","followers_url":"https://api.github.com/users/umanwizard/followers","following_url":"https://api.github.com/users/umanwizard/following{/other_user}","gists_url":"https://api.github.com/users/umanwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/umanwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umanwizard/subscriptions","organizations_url":"https://api.github.com/users/umanwizard/orgs","repos_url":"https://api.github.com/users/umanwizard/repos","events_url":"https://api.github.com/users/umanwizard/events{/privacy}","received_events_url":"https://api.github.com/users/umanwizard/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T16:33:43Z","updated_at":"2022-02-28T16:33:43Z","author_association":"MEMBER","body":"I have stopped looking at this, since we determined it not to be a release blocker (I can repro in v0.20.0)","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054440098/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054559775","html_url":"https://github.com/MaterializeInc/materialize/issues/10840#issuecomment-1054559775","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840","id":1054559775,"node_id":"IC_kwDOCkIcu84-204f","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T18:50:12Z","updated_at":"2022-02-28T18:50:12Z","author_association":"MEMBER","body":"@philip-stoev with persistence disabled, I cannot reproduce this on the latest `main`. Can you verify? If so, I think we can close this out, and leave #10582 to track the loss of interactivity when persistence is enabled.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054559775/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054592024","html_url":"https://github.com/MaterializeInc/materialize/issues/10840#issuecomment-1054592024","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840","id":1054592024,"node_id":"IC_kwDOCkIcu84-28wY","user":{"login":"umanwizard","id":1893159,"node_id":"MDQ6VXNlcjE4OTMxNTk=","avatar_url":"https://avatars.githubusercontent.com/u/1893159?v=4","gravatar_id":"","url":"https://api.github.com/users/umanwizard","html_url":"https://github.com/umanwizard","followers_url":"https://api.github.com/users/umanwizard/followers","following_url":"https://api.github.com/users/umanwizard/following{/other_user}","gists_url":"https://api.github.com/users/umanwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/umanwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umanwizard/subscriptions","organizations_url":"https://api.github.com/users/umanwizard/orgs","repos_url":"https://api.github.com/users/umanwizard/repos","events_url":"https://api.github.com/users/umanwizard/events{/privacy}","received_events_url":"https://api.github.com/users/umanwizard/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T19:31:41Z","updated_at":"2022-02-28T19:31:41Z","author_association":"MEMBER","body":"Is there something that we think would have fixed it? I was able to repro a few days ago, also with persistence disabled.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054592024/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054959450","html_url":"https://github.com/MaterializeInc/materialize/issues/10840#issuecomment-1054959450","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10840","id":1054959450,"node_id":"IC_kwDOCkIcu84-4Wda","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-01T03:22:18Z","updated_at":"2022-03-01T03:22:18Z","author_association":"MEMBER","body":"I expect 73fb81d16 to have made a meaningful dent in the issue.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054959450/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060244603","html_url":"https://github.com/MaterializeInc/materialize/pull/11025#issuecomment-1060244603","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025","id":1060244603,"node_id":"IC_kwDOCkIcu84_Mgx7","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T06:44:12Z","updated_at":"2022-03-07T06:44:12Z","author_association":"MEMBER","body":"Just gave this a quick skim, and it all sounds reasonable... but also it sounds a lot like Jepsen?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060244603/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061686785","html_url":"https://github.com/MaterializeInc/materialize/pull/11025#issuecomment-1061686785","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025","id":1061686785,"node_id":"IC_kwDOCkIcu84_SA4B","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-08T11:37:05Z","updated_at":"2022-03-08T11:37:05Z","author_association":"CONTRIBUTOR","body":"Some clarifications in response to @aphyr ' comments in chat. His comments start here https://materializeinc.slack.com/archives/C035TU9QF5W/p1646684216688189 but I am intentionally not pasting them in this public PR in case they contain proprietary information.\r\n\r\n# Reproducilbility\r\n\r\nThe framework will be using Mz and the external containerized services as they are, with all the non-determinism this entails. What I am aiming here for is not byte-by-byte, instruction-by-instruction reproducibility, like Antithesis, but more of a \"human-scale\" reproduciblility which is somewhat akin to general developer-friendliness. What I am after is not increasing the chance that the bug will be reproducible on every run to 100% but increasing the chance that developers will feel compelled to look at the bug, work on it and fix it . Something along the lines of:\r\n- developers should be able to run the test case on their laptop\r\n- it should run using tools they are familiar with, e.g. `mzcompose`, etc.\r\n- it should be possible to use the test case as a regression test with minimum extra developer work\r\n\r\nWhen the FoundationDB presentation came out a long time ago, it appeared that the issues it would find were so convoluted that I did not see which developer would be willing to debug them (pre-processed C++, mocking of I/O, etc, etc.). I assumed that a classical debugger would be useless the way their testing framework takes over the code.\r\n\r\n# Workload Realism\r\n\r\nTrying for realistic, or, at the very least, understandable workloads is also key to developer interest and bug fix productivity. Test cases where a lot of invalid/unrealistic things happen are great for finding edge cases, but then it becomes an uphill battle to convince people to fix those bugs . If the workload can be described in a single sentence and sounds unobjectionally possible to happen at a customer, this gives the bug reports much less resistence.\r\n\r\nBy aiming for a degree of realism you also protect yourself against the situation where tables/ kafka topics / materialized views are dropped and recreated so frequently that they never have the chance to accumulate enough state that would cause them to fall over. So, while abandoning some of the stressfullness of the workload, this framework will bring in:\r\n- the ability for a very long test run to be considered a valid \"longevity test\"\r\n- the ability for a successful run to be representative of the stability of the product when used \"in the wild\", so that it can be used as a qualification test for releases and such.\r\n\r\n# Sequential execution\r\n\r\nThis is a bit of an artifact from our current way of describing tests in python, which are essentially a series of steps that one executes against docker containers sequentially. This is indeed a major limitation that I would like to lift at some point, once I have milked the sequential execution to the max.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061686785/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061986895","html_url":"https://github.com/MaterializeInc/materialize/pull/11025#issuecomment-1061986895","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025","id":1061986895,"node_id":"IC_kwDOCkIcu84_TKJP","user":{"login":"aphyr","id":3748,"node_id":"MDQ6VXNlcjM3NDg=","avatar_url":"https://avatars.githubusercontent.com/u/3748?v=4","gravatar_id":"","url":"https://api.github.com/users/aphyr","html_url":"https://github.com/aphyr","followers_url":"https://api.github.com/users/aphyr/followers","following_url":"https://api.github.com/users/aphyr/following{/other_user}","gists_url":"https://api.github.com/users/aphyr/gists{/gist_id}","starred_url":"https://api.github.com/users/aphyr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aphyr/subscriptions","organizations_url":"https://api.github.com/users/aphyr/orgs","repos_url":"https://api.github.com/users/aphyr/repos","events_url":"https://api.github.com/users/aphyr/events{/privacy}","received_events_url":"https://api.github.com/users/aphyr/received_events","type":"User","site_admin":false},"created_at":"2022-03-08T16:50:19Z","updated_at":"2022-03-08T17:06:30Z","author_association":"NONE","body":"No trade secrets in that discussion! Feel free to talk/repost whatever you like. :-)\r\n\r\n## Reproducibility / Sequential execution\r\n\r\nOn the questions of determinism & concurrency--this is not to to argue one way or the other, but I'd like to echo some of what you've said, offer a little bit of my experience from testing, and touch on some things that might help guide your choices. I bet you've already thought about a lot of this in depth, but perhaps there's one or two things here that might be novel. :-)\r\n\r\nFirst, you've mentioned that the current approach is to execute steps against Docker containers sequentially. Sequential tests are *nice*--they're easy to read & understand, they simplify what I'll call a \"generator\"--the thing that constructs the operations to perform in the test, and they also simplify the \"checker\"--the thing that validates that your history of completed operations is correct. They also have a nice (or frustrating, depending on your perspective) side effect, which is that they tend to make concurrent systems (that would *normally* be highly nondeterministic) much more deterministic, by virtue of getting rid of most or all of the concurrency.\r\n\r\nMy suspicion (and please correct me if I'm wrong) is that the thing you want to test--Materialize, and possibly the composition of Materialize with other systems, like Kafka--is highly concurrent. Each node likely has multiple threads, there are probably multiple nodes, and you've got multiple systems. You may also have internal work queues, periodic tasks, and so on, both inside Materialize and in, say, Kafka poller.\r\n\r\nBut so long as you perform only one operation at a time against this concurrent system, much of that concurrency ought to disappear, right? To *some* extent, yes. But there are some ways in which even a sequential test winds up exhibiting nondeterminism thanks to internal concurrency. For instance, take the following history of operations which are executed in strictly sequential order: one waits for each operation to complete before beginning the next.\r\n\r\n1. Send message `x` to Kafka\r\n2. Query Materialize to see if `x` is present\r\n\r\nShould `x` be present? That depends on whether the Kafka was ready to hand `x` out to Materialize, whether Materialize had polled Kafka in between that time and the query, and whether Materialize's internal processes--differential dataflow, various caches, etc--had processed `x`, and perhaps also whether that processing had propagated to the node being queried.\r\n\r\nThere are a couple of things you can do to mitigate this nondeterminism. One of them is to slow down the request rate so that you're very confident each operation has fully \"percolated\" through these asynchronous, concurrent processes. This makes testing slower, and may mask some classes of bugs which depend on high throughput. Another approach is to have some kind of causality token, so that `2` can be phrased as \"repeatedly query until `x` appears. This restores some degree of determinism, but makes it easy for tests to get \"stuck\" indefinitely.\r\n\r\nThis problem of getting stuck is much harder when you start introducing faults, because faults may render the system unable to process certain operations until the fault is resolved. This also points to another challenge: in distributed systems, even workloads executed by a single thread become *logically concurrent* as soon as any request returns an indeterminate result. For example, imagine this history:\r\n\r\n1. Send `x` to Kafka\r\n2. Send `y` to Kafka\r\n3. Query Materialize to verify that it saw `x`, *then* `y`, in order.\r\n\r\nWhat happens if the write of `x` to Kafka throws a timeout, perhaps because of a GC collection or IO stall in Kafka, or because we injected a network or process fault? We can't assume `x` was written, and we *also* can't assume `x` was *not* written. What do we do? We could bail on the test entirely--but now our test has exploded for frustrating, likely nondeterministic reasons, and hasn't told us anything useful about Materialize. Or we could move on to write `y`--but if we do this, we run several risks. Legal outcomes in Kafka at this point could be:\r\n\r\n1. `[x, y]`\r\n2. `[y]`\r\n3. `[y, x]`\r\n\r\nThe fundamental problem here is that once an operation crashes, we must *assume* it is effectively concurrent with every single later operation in the history. It could be in flight in the network, or replicated to some nodes but not others, or sitting in an in-memory queue somewhere, just waiting to take effect five minutes from now. This tells us that once we allow operations to fail, there is *no such thing* as a truly sequential distributed systems test! In my experience with Jepsen, this kind of indeterminate concurrency is the rule, rather than the exception.\r\n\r\nThis has significant implications for test design. First, even if the generator doesn't produce concurrent operations, the way you record the *outcomes* of those operations needs to have an explicit way to record both indeterminate failures and concurrency. Second, your checker needs to take both of these into account. It has to understand that if the write of `x` is an indeterminate failure, then legal outcomes could be *either* `[x, y]`, or `[y]`. Second, it has to understand that concurrency structure, which allows us to see `[y, x]`.\r\n\r\nSo... what I'd like to encourage you to do here is to plan for concurrency & nondeterminism from the start, rather than trying to retrofit it into the test design at a later time. It's OK to leave the generator sequential, but the thing that records the *history* of operations, and the thing that checks that history to see it its valid, need to be fundamentally concurrency & failure-aware. It's definitely more up-front work, but I think it'll save you headaches down the line. :-)\r\n\r\n## More on reproducibility\r\n\r\nIt sounds like you tried out Antithesis (which I didn't know existed until yesterday) and found it difficult for a few reasons. I might have this wrong, but let me try and repeat what I think you saw:\r\n\r\n1. It did some kind of source code transformation (?) which made it harder to debug\r\n2. The mock IO also complicated debugging\r\n3. It generated issues which seemed unlikely to occur in real life--perhaps with pathological thread/network schedules?\r\n4. It required the use of tools that Materialize developers weren't familiar with\r\n5. It made classical debuggers useless by taking over the structure of the code somehow\r\n\r\nI think these are all valid concerns, and I think your intuition that a \"somewhat, but not entirely\" reproducible test suite might be a good happy medium. While knowing absolutely nothing about `mzcompose`, Rust, or how Materialize is actually built, I've got a few very loose ideas that might help in figuring out... exactly where you want to draw that line. Somewhat reiterating points from our chat discussion...\r\n\r\nA purely opaque-box, end-to-end test like Jepsen (and perhaps mzcompose/Zippy?) avoids issues 1, 2, and 3 by running Real Binaries on Real Computers with Real Networks. That's really nice because when you find a bug, it's something that a real user could see in production. It also means that stacktraces and network traffic look exactly how you'd expect--there's no source code rewriting, injection of probes, etc.\r\n\r\nOn the other hand, there are a couple big drawbacks with this approach. One of them is that it usually involves different processes running on 5-10 nodes. Bugs often manifest *across* multiple nodes, rather than on one--so where does one attach a debugger to see the whole bug? Even if a bug does occur on a single node, it's not clear which one you should attach to. Moreover, if you pause execution via e.g. a breakpoint, it tends to immediately throw the system into a new regime--the other nodes will time out requests to the one that paused, and that can mean the bug disappears when you try to look at it.\r\n\r\nIf a debugger workflow is critical, one thing that you might want to consider is--and perhaps not using Antithesis, but just with some judicious choices about your regular code design--being able to run an entire cluster in a single binary. You can still use wall-clock time, regular network calls, the regular thread scheduler, etc., but the network calls will all go over loopback and back into the same process. That gives you the ability to attach a debugger to *the whole cluster*, with essentially minimal code changes.\r\n\r\nThis will likely still have concurrency issues--if you throw up a breakpoint in one node, that doesn't necessarily pause the others. If you've got a handy-dandy concurrency-aware debugger that's great at pausing all threads and handing off data between them in the right way, that's fantastic. Even if you don't, you can work on those issues piecemeal, and maybe get to a point where it's still meaningful to attach a debugger. \r\n\r\nYou may already have this, but if you don't--the first place to interpose might be the clock! I'd focus on current-time, timeouts, and scheduled tasks. What you want is a clock shim that in normal operation calls `gettimeofday` etc, but in testing allows you to pause/advance time--from tests, from the debugger, etc. Having a clock shim doesn't just help with interactive debugging, but also lets you make time controllable in unit and even integration tests. Tests that used to take a long time can run nearly instantly, and with deterministic results. For an example of this sort of thing, see [Tea-Time](https://github.com/aphyr/tea-time#testing-with-virtual-time).\r\n\r\nA (rigorously used) clock shim also helps you work around a problem with testing in containers--you can't test clock skew!\r\n\r\nThe next place I'd interpose would be the network. One of the big problems with Jepsen (and that you might face injecting faults on top of Docker containers) is that its instruments for interrupting network traffic are \"blunt\"--it can cut off all packets using `iptables`, but that's not particularly good at introducing subtle reorderings, and takes a good deal of time to take effect. You're effectively limited by TCP & application-level timeouts, which constrains how quickly you can inject faults and actually observe phase changes in the system. So if you're willing, consider writing your network layer between nodes so that it has an alternate mode of operation, where the network is just a bunch of in-memory prioqueues, or even unordered sets. This gives you fine-grained control over message omission & reordering, which helps you get into weird corners of the state space that are hard to reach with iptables. And it's a lot easier to implement than you might think! Here's an in-memory network implementation in just [a few hundred lines](https://github.com/jepsen-io/maelstrom/blob/main/src/maelstrom/net.clj#L104-L246).\r\n\r\nTwo other things you can do with a network shim! One, it gets you closer to determinism--you can pick message delivery based on the same random seed you're using for the test as a whole. Second, it lets you get *application-level traces* of network messages, which are *incredibly* useful debugging tools. For instance, here's a trace recorded by [Maelstrom](https://github.com/jepsen-io/maelstrom)'s in-memory network, showing clients (`c4`, `c5`) making requests of transaction coordinators (`n0`, `n1`), which in turn use a linearizable (`lin-kv`) and an eventually consistent (`lww-kv`) storage service for their data.\r\n\r\n![Screenshot from 2022-03-08 11-40-30](https://user-images.githubusercontent.com/3748/157283807-409b5c01-c10b-4d59-8f7a-a7d4171e5bc8.png)\r\n\r\nI've built several systems using these auto-generated Lamport diagrams as a debugging aid, and it's just... oh it's SO useful to be able to see the flow of messages that led to some weird outcome, instead of trying to piece it together from a dozen log files. Not that you have to do all this from the start, but if you're laying groundwork for a new codebase, this might be something to have in mind as a potential goal. :-)\r\n\r\nThe last thing I think I'd tackle would be scheduler interposition--trying to get the thread scheduler itself to be deterministic and driven by the test. I know *of* systems that do this sort of thing--for instance, the [Pulse](http://quviq.com/documentation/pulse/index.html) scheduler for Erlang, which helps you Quickcheck concurrent code. I don't have any experience with this personally though, and I don't know what that would look like for something like Rust.\r\n\r\n## Workload Realism\r\n\r\nThis might be a different story at Materialize, and you know your engineering culture best. That said, I don't think you have to give up hope here! I've reported bugs in roughly 30 DBs over the last 9 years, and I've found that dev teams are generally very willing to fix issues that arise from \"unrealistic\" workloads. And in particular, those engineers often prefer an unrealistic workload that reproduces a bug in, say, 30 seconds, to a realistic workload that takes 10 hours.\r\n\r\nThis doesn't have to be an either-or situation--it's perfectly OK to write realistic workloads too, and also to mix-and-match within a single test. One thing I do in Jepsen is create new keys/tables/topics aggressively (e.g. every few seconds) for a handful of keys, but to let other keys accumulate writes for the entire history of the test. That way you get to explore more codepaths and parts of the state space--some bugs manifest only on first/last writes to some key, whereas others require sustained writes over a certain volume of data or span of time.\r\n\r\nOK, I think I've prattled on far too much! Is any of this novel? Helpful? If you're curious, happy to dive into any of this stuff in depth.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061986895/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062895016","html_url":"https://github.com/MaterializeInc/materialize/pull/11025#issuecomment-1062895016","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025","id":1062895016,"node_id":"IC_kwDOCkIcu84_Wn2o","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T12:57:40Z","updated_at":"2022-03-09T12:57:40Z","author_association":"CONTRIBUTOR","body":"Just to clarify a potential source of confusion:\r\n\r\n- FoundationDB used the approach with heavily instrumented code which I thought would be difficult to debug with standard tools. This approach is described in their original video presentation at https://www.youtube.com/watch?v=4fFDFbi3toc\r\n- The same people then founded Antithesis, but their new approach does not require instrumenting the code . Instead, they use what they call a \"deterministic hypervisor\" to run uninstrumented (or barely instrumented, a C++ library is linked in and that is it). This one is difficult to debug as their deterministic environment does not allow live debugging or replay. You only get logs and possibly core files out of it.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062895016/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062959549","html_url":"https://github.com/MaterializeInc/materialize/pull/11025#issuecomment-1062959549","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025","id":1062959549,"node_id":"IC_kwDOCkIcu84_W3m9","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T14:10:25Z","updated_at":"2022-03-09T14:10:25Z","author_association":"CONTRIBUTOR","body":"@aphyr This has been very useful, thanks! I will make sure to follow all the pointers. My entire plane of being is way more pedestrian than the stuff you describe, so the way I see this is that the heavy-hitting regarding network, clock and scheduler manipulation is left for Jepsen and Antithesis whereas Zippy would be:\r\n\r\n- understandable for mere mortals across the entire QA+development process -- e.g. adding new Actions to perform; test case minimization; reproduction; triage; debugging and creation of a regression test;\r\n- used in the CI with the familiar containerized tooling and reporting;\r\n- used for longevity and release qualification tests;\r\n- provide workloads for Antithesis (as their service is bring-your-own-workload) on top of which they will apply their fault injection operations","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062959549/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062983113","html_url":"https://github.com/MaterializeInc/materialize/pull/11025#issuecomment-1062983113","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11025","id":1062983113,"node_id":"IC_kwDOCkIcu84_W9XJ","user":{"login":"aphyr","id":3748,"node_id":"MDQ6VXNlcjM3NDg=","avatar_url":"https://avatars.githubusercontent.com/u/3748?v=4","gravatar_id":"","url":"https://api.github.com/users/aphyr","html_url":"https://github.com/aphyr","followers_url":"https://api.github.com/users/aphyr/followers","following_url":"https://api.github.com/users/aphyr/following{/other_user}","gists_url":"https://api.github.com/users/aphyr/gists{/gist_id}","starred_url":"https://api.github.com/users/aphyr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aphyr/subscriptions","organizations_url":"https://api.github.com/users/aphyr/orgs","repos_url":"https://api.github.com/users/aphyr/repos","events_url":"https://api.github.com/users/aphyr/events{/privacy}","received_events_url":"https://api.github.com/users/aphyr/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T14:33:48Z","updated_at":"2022-03-09T14:34:03Z","author_association":"NONE","body":"That sounds reasonable! I should mention that Jepsen has no way to do scheduler faults, so that's probably something best left to Antithesis. I like your idea of being able to take these Zippy workloads and run them *under* Antithesis to get more sophisticated faults too--that way you can write tests once and get some of the advantages of each approach. :-)","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062983113/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1059952997","html_url":"https://github.com/MaterializeInc/materialize/issues/11041#issuecomment-1059952997","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041","id":1059952997,"node_id":"IC_kwDOCkIcu84_LZll","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"created_at":"2022-03-06T12:22:03Z","updated_at":"2022-03-06T12:22:03Z","author_association":"MEMBER","body":"The release notes for #10883 are one thing I'd like to call out, as the removal of indexes has the potential to disrupt a variety of user query plans.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1059952997/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060362672","html_url":"https://github.com/MaterializeInc/materialize/issues/11041#issuecomment-1060362672","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041","id":1060362672,"node_id":"IC_kwDOCkIcu84_M9mw","user":{"login":"aljoscha","id":68551,"node_id":"MDQ6VXNlcjY4NTUx","avatar_url":"https://avatars.githubusercontent.com/u/68551?v=4","gravatar_id":"","url":"https://api.github.com/users/aljoscha","html_url":"https://github.com/aljoscha","followers_url":"https://api.github.com/users/aljoscha/followers","following_url":"https://api.github.com/users/aljoscha/following{/other_user}","gists_url":"https://api.github.com/users/aljoscha/gists{/gist_id}","starred_url":"https://api.github.com/users/aljoscha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aljoscha/subscriptions","organizations_url":"https://api.github.com/users/aljoscha/orgs","repos_url":"https://api.github.com/users/aljoscha/repos","events_url":"https://api.github.com/users/aljoscha/events{/privacy}","received_events_url":"https://api.github.com/users/aljoscha/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T09:05:57Z","updated_at":"2022-03-07T09:05:57Z","author_association":"CONTRIBUTOR","body":":eyes: ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060362672/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060405888","html_url":"https://github.com/MaterializeInc/materialize/issues/11041#issuecomment-1060405888","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041","id":1060405888,"node_id":"IC_kwDOCkIcu84_NIKA","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T09:52:56Z","updated_at":"2022-03-07T09:52:56Z","author_association":"CONTRIBUTOR","body":"There has been a regression with user tables after #10883  - https://github.com/MaterializeInc/materialize/issues/11071","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060405888/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060669390","html_url":"https://github.com/MaterializeInc/materialize/issues/11041#issuecomment-1060669390","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041","id":1060669390,"node_id":"IC_kwDOCkIcu84_OIfO","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T13:09:21Z","updated_at":"2022-03-10T12:29:28Z","author_association":"CONTRIBUTOR","body":"There has been a regression with unmaterialized sources after #11041 : #11072","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060669390/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062854307","html_url":"https://github.com/MaterializeInc/materialize/issues/11041#issuecomment-1062854307","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041","id":1062854307,"node_id":"IC_kwDOCkIcu84_Wd6j","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T12:06:58Z","updated_at":"2022-03-09T12:48:41Z","author_association":"CONTRIBUTOR","body":"Regression (OOM) with `CREATE INDEX` in a commit that comes after the PRs listed: #11134 . Note that this requires many indexes **over the same table** to reproduce, so does not really constitute a realistic scenario.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062854307/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062888719","html_url":"https://github.com/MaterializeInc/materialize/issues/11041#issuecomment-1062888719","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041","id":1062888719,"node_id":"IC_kwDOCkIcu84_WmUP","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T12:49:33Z","updated_at":"2022-03-09T12:49:33Z","author_association":"CONTRIBUTOR","body":"Regression (performance) with `CREATE INDEX` and persistent user tables after https://github.com/MaterializeInc/materialize/pull/10883 : #11137 . This one is a realistic scenario, one index per table only.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062888719/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064002058","html_url":"https://github.com/MaterializeInc/materialize/issues/11041#issuecomment-1064002058","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041","id":1064002058,"node_id":"IC_kwDOCkIcu84_a2IK","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T12:27:15Z","updated_at":"2022-03-10T12:27:15Z","author_association":"CONTRIBUTOR","body":"The case where there are many non-identical indexes over the same table has been opened as #11155 . I am going to edit the top-level description of this ticket to list all the regressions in a list form.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064002058/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064837854","html_url":"https://github.com/MaterializeInc/materialize/issues/11041#issuecomment-1064837854","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041","id":1064837854,"node_id":"IC_kwDOCkIcu84_eCLe","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T07:12:21Z","updated_at":"2022-03-11T07:12:21Z","author_association":"MEMBER","body":"@philip-stoev what do you think about calling this closed once we track down https://github.com/MaterializeInc/materialize/issues/11072? #11137 and #11155 don't seem like blockers to me. (#11155 in particular has actually fixed a bug; it's just that fixing that bug has a performance cost until #4887 gets fixed.)","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064837854/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064992131","html_url":"https://github.com/MaterializeInc/materialize/issues/11041#issuecomment-1064992131","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11041","id":1064992131,"node_id":"IC_kwDOCkIcu84_en2D","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T10:42:41Z","updated_at":"2022-03-11T10:42:41Z","author_association":"CONTRIBUTOR","body":"Yes, I would agree. I am happy that all the individual issues have now had they five minutes of fame and are understood.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064992131/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060403037","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1060403037","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1060403037,"node_id":"IC_kwDOCkIcu84_NHdd","user":{"login":"andrioni","id":159177,"node_id":"MDQ6VXNlcjE1OTE3Nw==","avatar_url":"https://avatars.githubusercontent.com/u/159177?v=4","gravatar_id":"","url":"https://api.github.com/users/andrioni","html_url":"https://github.com/andrioni","followers_url":"https://api.github.com/users/andrioni/followers","following_url":"https://api.github.com/users/andrioni/following{/other_user}","gists_url":"https://api.github.com/users/andrioni/gists{/gist_id}","starred_url":"https://api.github.com/users/andrioni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrioni/subscriptions","organizations_url":"https://api.github.com/users/andrioni/orgs","repos_url":"https://api.github.com/users/andrioni/repos","events_url":"https://api.github.com/users/andrioni/events{/privacy}","received_events_url":"https://api.github.com/users/andrioni/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T09:49:30Z","updated_at":"2022-03-07T09:49:30Z","author_association":"CONTRIBUTOR","body":"Under which flags this is running? Is this only for persisted user tables, or all user tables?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060403037/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060403835","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1060403835","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1060403835,"node_id":"IC_kwDOCkIcu84_NHp7","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T09:50:26Z","updated_at":"2022-03-07T09:50:26Z","author_association":"CONTRIBUTOR","body":"All user tables.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060403835/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060646185","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1060646185","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1060646185,"node_id":"IC_kwDOCkIcu84_OC0p","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T12:41:01Z","updated_at":"2022-03-07T12:41:01Z","author_association":"MEMBER","body":"@philip-stoev can you confirm that you are observing this after https://github.com/MaterializeInc/materialize/pull/11050, which did indeed remove some accumulated cruft from table queries (dataflows that used tables were not being closed out).","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060646185/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060647796","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1060647796","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1060647796,"node_id":"IC_kwDOCkIcu84_ODN0","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T12:43:08Z","updated_at":"2022-03-07T12:43:08Z","author_association":"MEMBER","body":"(( Also, the bug it fixed has been around forever. In principle a CREATE/DROP TABLE heavy workload would have noticed it, if you want to mint one of those for the future ))","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060647796/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060673681","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1060673681","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1060673681,"node_id":"IC_kwDOCkIcu84_OJiR","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T13:13:56Z","updated_at":"2022-03-07T13:13:56Z","author_association":"CONTRIBUTOR","body":"@frankmcsherry yes, this is still reproducible after https://github.com/MaterializeInc/materialize/pull/11050.\r\n\r\nR.e. a CREATE/DROP heavy workload, I will take a note and add one.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060673681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060683073","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1060683073","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1060683073,"node_id":"IC_kwDOCkIcu84_OL1B","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T13:23:40Z","updated_at":"2022-03-07T13:23:40Z","author_association":"MEMBER","body":"I just did a local bit of instrumentation and manually piloted around, the list backing a table does not grow without bound, and does seem to compact. The number of dataflows remains constant after many update statements. So, it's nothing immediately obvious, in any case.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060683073/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060715493","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1060715493","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1060715493,"node_id":"IC_kwDOCkIcu84_OTvl","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T13:58:17Z","updated_at":"2022-03-07T13:58:17Z","author_association":"CONTRIBUTOR","body":"Perf profile:\r\n```\r\n+    4.33%     0.00%  jemalloc_bg_thd  libpthread-2.31.so  [.] start_thread                                                                                                                                  ◆\r\n+    4.32%     0.00%  jemalloc_bg_thd  materialized        [.] background_thread_entry                                                                                                                       ▒\r\n+    4.32%     0.00%  jemalloc_bg_thd  materialized        [.] _rjem_je_arena_decay                                                                                                                          ▒\r\n+    4.32%     0.00%  jemalloc_bg_thd  materialized        [.] arena_maybe_decay                                                                                                                             ▒\r\n+    4.32%     0.02%  jemalloc_bg_thd  materialized        [.] arena_decay_to_limit                                                                                                                          ▒\r\n     3.66%     3.57%  timely:work-0    materialized        [.] <mz_repr::row::Row as core::cmp::PartialOrd>::partial_cmp                                                                                     ▒\r\n     3.65%     3.57%  timely:work-1    materialized        [.] <mz_repr::row::Row as core::cmp::PartialOrd>::partial_cmp                                                                                     ▒\r\n     3.65%     3.58%  timely:work-3    materialized        [.] <mz_repr::row::Row as core::cmp::PartialOrd>::partial_cmp                                                                                     ▒\r\n     3.63%     3.55%  timely:work-2    materialized        [.] <mz_repr::row::Row as core::cmp::PartialOrd>::partial_cmp                                                                                     ▒\r\n     2.78%     2.49%  timely:work-0    materialized        [.] differential_dataflow::trace::implementations::merge_batcher::MergeSorter<D,T,R>::merge_by                                                    ▒\r\n     2.76%     2.50%  timely:work-2    materialized        [.] differential_dataflow::trace::implementations::merge_batcher::MergeSorter<D,T,R>::merge_by                                                    ▒\r\n     2.76%     2.49%  timely:work-3    materialized        [.] differential_dataflow::trace::implementations::merge_batcher::MergeSorter<D,T,R>::merge_by                                                    ▒\r\n     2.75%     2.48%  timely:work-1    materialized        [.] differential_dataflow::trace::implementations::merge_batcher::MergeSorter<D,T,R>::merge_by                                                    ▒\r\n+    2.51%     0.02%  jemalloc_bg_thd  materialized        [.] _rjem_je_extent_dalloc_wrapper                                                                                                                ▒\r\n+    2.48%     0.01%  jemalloc_bg_thd  libc-2.31.so        [.] __madvise                                                                                                                                     ▒\r\n+    2.45%     0.00%  jemalloc_bg_thd  [kernel.kallsyms]   [k] entry_SYSCALL_64_after_hwframe                                                                                                                ▒\r\n+    2.45%     0.00%  jemalloc_bg_thd  [kernel.kallsyms]   [k] do_syscall_64                                                                                                                                 ▒\r\n+    2.40%     0.00%  jemalloc_bg_thd  [kernel.kallsyms]   [k] __x64_sys_madvise                                                                                                                             ▒\r\n+    2.39%     0.01%  jemalloc_bg_thd  [kernel.kallsyms]   [k] __do_sys_madvise                                                                                                                              ▒\r\n+    2.36%     0.01%  jemalloc_bg_thd  [kernel.kallsyms]   [k] zap_page_range                                                                                                                                ▒\r\n+    2.28%     0.00%  timely:work-1    [unknown]           [.] 0000000000000000                                                                                                                              ▒\r\n+    2.24%     0.00%  timely:work-0    [unknown]           [.] 0000000000000000                                                                                                                              ▒\r\n+    2.22%     0.00%  timely:work-2    [unknown]           [.] 0000000000000000                                                                                                                              ▒\r\n+    2.22%     0.00%  timely:work-3    [unknown]           [.] 0000000000000000                                                                                                                              ▒\r\n+    1.82%     0.01%  jemalloc_bg_thd  [kernel.kallsyms]   [k] tlb_finish_mmu                                                                                                                                ▒\r\n+    1.82%     0.00%  jemalloc_bg_thd  [kernel.kallsyms]   [k] tlb_flush_mmu                                                                                                                                 ▒\r\n+    1.72%     1.64%  timely:work-0    materialized        [.] <alloc::vec::Vec<T> as timely_container::PushPartitioned>::push_partitioned                                                                   ▒\r\n+    1.68%     1.64%  timely:work-2    materialized        [.] <alloc::vec::Vec<T> as timely_container::PushPartitioned>::push_partitioned                                                                   ▒\r\n     1.66%     1.63%  timely:work-1    materialized        [.] <alloc::vec::Vec<T> as timely_container::PushPartitioned>::push_partitioned                                                                   ▒\r\n     1.65%     1.63%  timely:work-3    materialized        [.] <alloc::vec::Vec<T> as timely_container::PushPartitioned>::push_partitioned                                                                   ▒\r\n+    1.45%     0.01%  jemalloc_bg_thd  materialized        [.] _rjem_je_extents_evict                                                                                                                        ▒\r\n+    1.39%     0.31%  jemalloc_bg_thd  materialized        [.] extent_try_coalesce_impl.isra.0                                                                                                               ▒\r\n     1.38%     1.37%  timely:work-2    materialized        [.] <mz_repr::row::Row as core::clone::Clone>::clone                                                                                              ▒\r\n     1.37%     1.36%  timely:work-0    materialized        [.] <mz_repr::row::Row as core::clone::Clone>::clone                                                                                              ▒\r\n     1.37%     1.36%  timely:work-3    materialized        [.] <mz_repr::row::Row as core::clone::Clone>::clone                                                                                              ▒\r\n     1.37%     1.35%  timely:work-1    materialized        [.] <mz_repr::row::Row as core::clone::Clone>::clone                                                                                              ▒+    4.33%     0.00%  jemalloc_bg_thd  libpthread-2.31.so  [.] start_thread                                                                                                                                  ◆\r\n+    4.32%     0.00%  jemalloc_bg_thd  materialized        [.] background_thread_entry                                                                                                                       ▒\r\n+    4.32%     0.00%  jemalloc_bg_thd  materialized        [.] _rjem_je_arena_decay                                                                                                                          ▒\r\n+    4.32%     0.00%  jemalloc_bg_thd  materialized        [.] arena_maybe_decay                                                                                                                             ▒\r\n+    4.32%     0.02%  jemalloc_bg_thd  materialized        [.] arena_decay_to_limit                                                                                                                          ▒\r\n     3.66%     3.57%  timely:work-0    materialized        [.] <mz_repr::row::Row as core::cmp::PartialOrd>::partial_cmp                                                                                     ▒\r\n     3.65%     3.57%  timely:work-1    materialized        [.] <mz_repr::row::Row as core::cmp::PartialOrd>::partial_cmp                                                                                     ▒\r\n     3.65%     3.58%  timely:work-3    materialized        [.] <mz_repr::row::Row as core::cmp::PartialOrd>::partial_cmp                                                                                     ▒\r\n     3.63%     3.55%  timely:work-2    materialized        [.] <mz_repr::row::Row as core::cmp::PartialOrd>::partial_cmp                                                                                     ▒\r\n     2.78%     2.49%  timely:work-0    materialized        [.] differential_dataflow::trace::implementations::merge_batcher::MergeSorter<D,T,R>::merge_by                                                    ▒\r\n     2.76%     2.50%  timely:work-2    materialized        [.] differential_dataflow::trace::implementations::merge_batcher::MergeSorter<D,T,R>::merge_by                                                    ▒\r\n     2.76%     2.49%  timely:work-3    materialized        [.] differential_dataflow::trace::implementations::merge_batcher::MergeSorter<D,T,R>::merge_by                                                    ▒\r\n     2.75%     2.48%  timely:work-1    materialized        [.] differential_dataflow::trace::implementations::merge_batcher::MergeSorter<D,T,R>::merge_by                                                    ▒\r\n+    2.51%     0.02%  jemalloc_bg_thd  materialized        [.] _rjem_je_extent_dalloc_wrapper                                                                                                                ▒\r\n+    2.48%     0.01%  jemalloc_bg_thd  libc-2.31.so        [.] __madvise                                                                                                                                     ▒\r\n+    2.45%     0.00%  jemalloc_bg_thd  [kernel.kallsyms]   [k] entry_SYSCALL_64_after_hwframe                                                                                                                ▒\r\n+    2.45%     0.00%  jemalloc_bg_thd  [kernel.kallsyms]   [k] do_syscall_64                                                                                                                                 ▒\r\n+    2.40%     0.00%  jemalloc_bg_thd  [kernel.kallsyms]   [k] __x64_sys_madvise                                                                                                                             ▒\r\n+    2.39%     0.01%  jemalloc_bg_thd  [kernel.kallsyms]   [k] __do_sys_madvise                                                                                                                              ▒\r\n+    2.36%     0.01%  jemalloc_bg_thd  [kernel.kallsyms]   [k] zap_page_range                                                                                                                                ▒\r\n+    2.28%     0.00%  timely:work-1    [unknown]           [.] 0000000000000000                                                                                                                              ▒\r\n+    2.24%     0.00%  timely:work-0    [unknown]           [.] 0000000000000000                                                                                                                              ▒\r\n+    2.22%     0.00%  timely:work-2    [unknown]           [.] 0000000000000000                                                                                                                              ▒\r\n+    2.22%     0.00%  timely:work-3    [unknown]           [.] 0000000000000000                                                                                                                              ▒\r\n+    1.82%     0.01%  jemalloc_bg_thd  [kernel.kallsyms]   [k] tlb_finish_mmu                                                                                                                                ▒\r\n+    1.82%     0.00%  jemalloc_bg_thd  [kernel.kallsyms]   [k] tlb_flush_mmu                                                                                                                                 ▒\r\n+    1.72%     1.64%  timely:work-0    materialized        [.] <alloc::vec::Vec<T> as timely_container::PushPartitioned>::push_partitioned                                                                   ▒\r\n+    1.68%     1.64%  timely:work-2    materialized        [.] <alloc::vec::Vec<T> as timely_container::PushPartitioned>::push_partitioned                                                                   ▒\r\n     1.66%     1.63%  timely:work-1    materialized        [.] <alloc::vec::Vec<T> as timely_container::PushPartitioned>::push_partitioned                                                                   ▒\r\n     1.65%     1.63%  timely:work-3    materialized        [.] <alloc::vec::Vec<T> as timely_container::PushPartitioned>::push_partitioned                                                                   ▒\r\n+    1.45%     0.01%  jemalloc_bg_thd  materialized        [.] _rjem_je_extents_evict                                                                                                                        ▒\r\n+    1.39%     0.31%  jemalloc_bg_thd  materialized        [.] extent_try_coalesce_impl.isra.0                                                                                                               ▒\r\n     1.38%     1.37%  timely:work-2    materialized        [.] <mz_repr::row::Row as core::clone::Clone>::clone                                                                                              ▒\r\n     1.37%     1.36%  timely:work-0    materialized        [.] <mz_repr::row::Row as core::clone::Clone>::clone                                                                                              ▒\r\n     1.37%     1.36%  timely:work-3    materialized        [.] <mz_repr::row::Row as core::clone::Clone>::clone                                                                                              ▒\r\n     1.37%     1.35%  timely:work-1    materialized        [.] <mz_repr::row::Row as core::clone::Clone>::clone                                                                                              ▒\r\n     ```","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060715493/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060820217","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1060820217","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1060820217,"node_id":"IC_kwDOCkIcu84_OtT5","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T15:36:32Z","updated_at":"2022-03-07T15:36:32Z","author_association":"MEMBER","body":"I am hopeful that this is the lack of an index on the table. Is someone up for modifying the `Update` feature benchmark to run `CREATE DEFAULT INDEX on t1`, and then re-running the benchmark? If that eliminates the regression, then this is \"in spec\". ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060820217/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060898551","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1060898551","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1060898551,"node_id":"IC_kwDOCkIcu84_PAb3","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T16:47:29Z","updated_at":"2022-03-07T16:47:29Z","author_association":"MEMBER","body":"@philip-stoev: @umanwizard reports that the regression disappears if you create the index on `t1`. So I assert that this is expected! How would you like to update the feature benchmark? We could have two separate tests going forward, `Update` and `UpdateIndexed`? And then we can basically ignore the regression in the `Update` benchmark, as it is essentially testing a new feature (updating an unmaterialized table).","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060898551/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060905425","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1060905425","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1060905425,"node_id":"IC_kwDOCkIcu84_PCHR","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T16:54:49Z","updated_at":"2022-03-07T16:55:12Z","author_association":"MEMBER","body":"Is it expected that things *slow down over time*? Easy queries should take longer w/o indexes, because we can't plan a fast path, but I would have thought it would have been stable slowdown, rather than increasing slowdown. Not sure!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060905425/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060910896","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1060910896","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1060910896,"node_id":"IC_kwDOCkIcu84_PDcw","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-07T17:00:36Z","updated_at":"2022-03-07T17:00:36Z","author_association":"MEMBER","body":"Oh, crap. I didn't read. I saw\r\n\r\n```\r\nMeasurement: 1.6061623096466064\r\nMeasurement: 1.9834446907043457\r\nMeasurement: 2.016334056854248\r\nMeasurement: 2.423788547515869\r\nMeasurement: 2.916515827178955\r\n...\r\nMeasurement: 9.298703670501709\r\nMeasurement: 9.861934185028076\r\nMeasurement: 8.153981685638428\r\nMeasurement: 8.687877178192139\r\nMeasurement: 8.837841987609863\r\nMeasurement: 9.046060562133789\r\nMeasurement: 9.261691808700562\r\n```\r\n\r\nAnd thought the above was v0.22 and the below was `main`. 🙈 Ok, hm. It sure seems like we're leaving dataflows around, eh?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1060910896/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061502872","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1061502872","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1061502872,"node_id":"IC_kwDOCkIcu84_RT-Y","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-08T07:56:40Z","updated_at":"2022-03-08T07:56:40Z","author_association":"CONTRIBUTOR","body":"After adding an index, both the regression in baseline performance and the steady decrease in performance are gone. I am leaving this ticket open as it seems that the steady decrease in performance is a genuine bug to be worked on.\r\n\r\nI have fixed the existing feature benchmark scenario by adding an index to it. I can create an `UpdateUnindexed` scenario after one release has been made.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061502872/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063731626","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1063731626","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1063731626,"node_id":"IC_kwDOCkIcu84_Z0Gq","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T07:07:51Z","updated_at":"2022-03-10T07:07:51Z","author_association":"MEMBER","body":"I'm struggling to reproduce this outside of the feature benchmark. It reproduces with the framework for me, for sure. I contend this should be equivalent to the feature benchmark, but the `UPDATE`s quickly stabilize at about 2s per update:\r\n\r\n```\r\nmaterialize=> create table t (a int);\r\nCREATE TABLE\r\nTime: 9.607 ms\r\nmaterialize=> insert into t select generate_series(1, 1000000);\r\nINSERT 0 1000000\r\nTime: 3213.658 ms (00:03.214)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 1016.441 ms (00:01.016)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 1486.653 ms (00:01.487)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 2044.113 ms (00:02.044)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 1398.076 ms (00:01.398)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 2042.502 ms (00:02.043)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 2020.353 ms (00:02.020)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 2050.025 ms (00:02.050)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 2154.474 ms (00:02.154)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 2036.019 ms (00:02.036)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 2191.394 ms (00:02.191)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 2034.555 ms (00:02.035)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 2269.142 ms (00:02.269)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 2039.082 ms (00:02.039)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 1988.582 ms (00:01.989)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 2049.352 ms (00:02.049)\r\nmaterialize=> update t set a = a + 1000000;\r\nUPDATE 1000000\r\nTime: 2341.916 ms (00:02.342)\r\n```\r\n\r\n@philip-stoev am I missing something? I tried writing a simple testdrive script with the following contents \r\n\r\n```\r\n> SELECT 1\r\n1\r\n\r\n> UPDATE t SET a = a + 1000000\r\n```\r\n\r\nand invoking _that_ repeatedly, and that similarly and inexplicably doesn't surface the slowdown.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063731626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063773923","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1063773923","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1063773923,"node_id":"IC_kwDOCkIcu84_Z-bj","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T08:10:32Z","updated_at":"2022-03-10T08:10:32Z","author_association":"CONTRIBUTOR","body":"@benesch I am able to reproduce the problem with psql alone and your SQL script with and without creating another table+index prior to the table under test. \r\n\r\nI am not sure why you are unable to reproduce it -- my wild guess would be that the feature benchmark framework uses --timestamp-interval 100ms , which, combined with the number of cores on your desktop is causing the timing to be different and sufficient to reproduce. You may also need some more `UPDATE` cycles for the trend to become apparent.\r\n\r\nI am now trying to reproduce on AWS ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063773923/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063794546","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1063794546","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1063794546,"node_id":"IC_kwDOCkIcu84_aDdy","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T08:29:24Z","updated_at":"2022-03-10T08:29:24Z","author_association":"CONTRIBUTOR","body":"The slowdown is very reproducible on a `c5.2xlarge` instance started with `bin/scratch`, even when materialized is started without any command-line options. Execution time goes from 1 second to 13seconds .\r\n\r\nIn addition, giving Mz a bit of idle time after running the updates does not cause the time of the next update to go down.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063794546/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064826097","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1064826097","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1064826097,"node_id":"IC_kwDOCkIcu84_d_Tx","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T06:52:04Z","updated_at":"2022-03-11T06:52:04Z","author_association":"MEMBER","body":"Ohh, I see. This only reproduces when running with multiple workers. I can reproduce just fine now with multiple workers. I must have been running with `-w1` when I tried before.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064826097/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064832346","html_url":"https://github.com/MaterializeInc/materialize/issues/11071#issuecomment-1064832346","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11071","id":1064832346,"node_id":"IC_kwDOCkIcu84_eA1a","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T07:03:41Z","updated_at":"2022-03-11T07:03:41Z","author_association":"MEMBER","body":"Thanks very much for the spot, @philip-stoev! This was an impressive catch for the feature benchmark. Turned out to be a very subtle bug in how `Insert` commands partitioned data: #11169.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064832346/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064992476","html_url":"https://github.com/MaterializeInc/materialize/pull/11169#issuecomment-1064992476","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169","id":1064992476,"node_id":"IC_kwDOCkIcu84_en7c","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T10:43:09Z","updated_at":"2022-03-11T10:43:09Z","author_association":"CONTRIBUTOR","body":"@benesch I am pushing a test for this in your branch, please stand by.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064992476/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065037391","html_url":"https://github.com/MaterializeInc/materialize/pull/11169#issuecomment-1065037391","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11169","id":1065037391,"node_id":"IC_kwDOCkIcu84_ey5P","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T11:43:13Z","updated_at":"2022-03-11T11:43:13Z","author_association":"MEMBER","body":"If it helps to unpick the issue: what is happening behind the scenes is that the updates accumulate until their number has doubled, at which point they are reduced back down through compaction. I could imagine the number of updates is such that the compaction happens at a regular frequency that is lower than the measurement frequency. If you dial around the number of distinct records or the number of updates per round, it might smooth out.\r\n\r\nAlso something we should be comfortable with in our measurements though (non-stationary behavior that remains below some fixed bound).","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065037391/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061387530","html_url":"https://github.com/MaterializeInc/materialize/pull/11070#issuecomment-1061387530","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11070","id":1061387530,"node_id":"IC_kwDOCkIcu84_Q30K","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-08T04:13:47Z","updated_at":"2022-03-08T04:13:47Z","author_association":"MEMBER","body":"This ended up being quite a bit less important than I expected, but I believe it is still a nice simplification, if someone would like to take a look!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1061387530/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1055334302","html_url":"https://github.com/MaterializeInc/materialize/pull/10913#issuecomment-1055334302","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10913","id":1055334302,"node_id":"IC_kwDOCkIcu84-5x-e","user":{"login":"petrosagg","id":939420,"node_id":"MDQ6VXNlcjkzOTQyMA==","avatar_url":"https://avatars.githubusercontent.com/u/939420?v=4","gravatar_id":"","url":"https://api.github.com/users/petrosagg","html_url":"https://github.com/petrosagg","followers_url":"https://api.github.com/users/petrosagg/followers","following_url":"https://api.github.com/users/petrosagg/following{/other_user}","gists_url":"https://api.github.com/users/petrosagg/gists{/gist_id}","starred_url":"https://api.github.com/users/petrosagg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/petrosagg/subscriptions","organizations_url":"https://api.github.com/users/petrosagg/orgs","repos_url":"https://api.github.com/users/petrosagg/repos","events_url":"https://api.github.com/users/petrosagg/events{/privacy}","received_events_url":"https://api.github.com/users/petrosagg/received_events","type":"User","site_admin":false},"created_at":"2022-03-01T11:33:53Z","updated_at":"2022-03-01T11:39:01Z","author_association":"CONTRIBUTOR","body":"@danhhz \r\n\r\n>  I understand how this reduces complexity in storage, but in our conversation on Friday I didn't see anything that we couldn't accomplish by storage piloting around something that's much closer to the current persist.\r\n\r\nI did some more thinking on this point and tried to sketch out what STORAGE would have to do if persist collections were single writer. I came up with the following design that maintains the single writer constraint of `persist` and has the advantage that is simple at the expense of excessive writing.\r\n\r\nImagine every time a worker initializes a persist writer it writes in a brand new persistent collection and we never resume writing a preexisting collection. This makes restarting CLUSTERs and HA setups trivial since all they do is each write to their own private persistent collection. The reason for never resuming is because it is hard to ensure that the previous writer is really gone and not temporarily timing out, which would lead to concurrent writes when these old writers come back online and we have resumed from a new process in the meantime. Does this sound right to you? Maybe there is an easier solution that I'm not thinking about.\r\n\r\nSo now readers are tasked with monitoring a dynamic list of persist collections than can grow when a new process is started and shrink when a persist collection is deemed unnecessary. Each such list has its own `since` and `upper` frontiers and readers can choose to follow one of them until it falls behind too much (like in the proposal above). \r\n\r\nI think the above is a potential path forward with the downside that we'll be always storing as many copies of the data (and performing its associated maintenance work) as the HA replication factor and that would require a significant engineering effort to optimize if choose to do so in the future.\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1055334302/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050508966","html_url":"https://github.com/MaterializeInc/materialize/issues/10870#issuecomment-1050508966","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870","id":1050508966,"node_id":"IC_kwDOCkIcu84-nX6m","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T04:23:57Z","updated_at":"2022-02-25T04:23:57Z","author_association":"MEMBER","body":"TBH this seems like a bug in PostgreSQL!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050508966/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050772382","html_url":"https://github.com/MaterializeInc/materialize/issues/10870#issuecomment-1050772382","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10870","id":1050772382,"node_id":"IC_kwDOCkIcu84-oYOe","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T11:27:47Z","updated_at":"2022-02-25T11:27:47Z","author_association":"MEMBER","body":"That's a more sensible take, @benesch. This reminded me of was our conversation about how long to carry around `CoercibleScalarExpr`s, and this seemed like a thread to pull on to figure out how that's handled in PG.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050772382/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062703846","html_url":"https://github.com/MaterializeInc/materialize/pull/11132#issuecomment-1062703846","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132","id":1062703846,"node_id":"IC_kwDOCkIcu84_V5Lm","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T09:07:53Z","updated_at":"2022-03-09T09:08:04Z","author_association":"MEMBER","body":"I'm off to bed, but perhaps we can nerdsnipe @petrosagg or @guswynn into debugging the inscrutable futures error!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062703846/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062711430","html_url":"https://github.com/MaterializeInc/materialize/pull/11132#issuecomment-1062711430","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132","id":1062711430,"node_id":"IC_kwDOCkIcu84_V7CG","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T09:16:01Z","updated_at":"2022-03-09T09:16:01Z","author_association":"MEMBER","body":"Never mind. Frank found it!","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062711430/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062896380","html_url":"https://github.com/MaterializeInc/materialize/pull/11132#issuecomment-1062896380","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11132","id":1062896380,"node_id":"IC_kwDOCkIcu84_WoL8","user":{"login":"frankmcsherry","id":5741500,"node_id":"MDQ6VXNlcjU3NDE1MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5741500?v=4","gravatar_id":"","url":"https://api.github.com/users/frankmcsherry","html_url":"https://github.com/frankmcsherry","followers_url":"https://api.github.com/users/frankmcsherry/followers","following_url":"https://api.github.com/users/frankmcsherry/following{/other_user}","gists_url":"https://api.github.com/users/frankmcsherry/gists{/gist_id}","starred_url":"https://api.github.com/users/frankmcsherry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frankmcsherry/subscriptions","organizations_url":"https://api.github.com/users/frankmcsherry/orgs","repos_url":"https://api.github.com/users/frankmcsherry/repos","events_url":"https://api.github.com/users/frankmcsherry/events{/privacy}","received_events_url":"https://api.github.com/users/frankmcsherry/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T12:59:31Z","updated_at":"2022-03-09T12:59:31Z","author_association":"MEMBER","body":"The intent is that this PR is \"harmless\", though it does add a new flag to `materialized` and I have no clue what the right process for that is (ideally: no one knows about it other than us). No rush to merge it at all, but interested to discuss if it is a sane path forward (essentially: trying to re-unite `materialized` and `coordd`).","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062896380/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063177628","html_url":"https://github.com/MaterializeInc/materialize/issues/11137#issuecomment-1063177628","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137","id":1063177628,"node_id":"IC_kwDOCkIcu84_Xs2c","user":{"login":"guswynn","id":5404303,"node_id":"MDQ6VXNlcjU0MDQzMDM=","avatar_url":"https://avatars.githubusercontent.com/u/5404303?v=4","gravatar_id":"","url":"https://api.github.com/users/guswynn","html_url":"https://github.com/guswynn","followers_url":"https://api.github.com/users/guswynn/followers","following_url":"https://api.github.com/users/guswynn/following{/other_user}","gists_url":"https://api.github.com/users/guswynn/gists{/gist_id}","starred_url":"https://api.github.com/users/guswynn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guswynn/subscriptions","organizations_url":"https://api.github.com/users/guswynn/orgs","repos_url":"https://api.github.com/users/guswynn/repos","events_url":"https://api.github.com/users/guswynn/events{/privacy}","received_events_url":"https://api.github.com/users/guswynn/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T17:29:51Z","updated_at":"2022-03-09T17:29:51Z","author_association":"CONTRIBUTOR","body":"@benesch didn't you mention that pr might have been wrong?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063177628/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063638641","html_url":"https://github.com/MaterializeInc/materialize/issues/11137#issuecomment-1063638641","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137","id":1063638641,"node_id":"IC_kwDOCkIcu84_ZdZx","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T03:56:29Z","updated_at":"2022-03-10T03:56:29Z","author_association":"MEMBER","body":"If I did, didn't mean to! That PR is definitely doing a desirable thing. Definitely has some bugs, or exposed some bugs, though.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1063638641/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064835194","html_url":"https://github.com/MaterializeInc/materialize/issues/11137#issuecomment-1064835194","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137","id":1064835194,"node_id":"IC_kwDOCkIcu84_eBh6","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T07:08:43Z","updated_at":"2022-03-11T07:08:43Z","author_association":"MEMBER","body":"Unassigning myself from this one! I think we can consider this one a \"don't care\" for now? At least, I'm personally comfortable with this taking .5s instead of .25s because it's not a config that users enable by default. Perhaps it makes @aljoscha or @ruchirK or @danhhz uncomfortable, though, and one of them might want to take a look?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064835194/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065016151","html_url":"https://github.com/MaterializeInc/materialize/issues/11137#issuecomment-1065016151","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137","id":1065016151,"node_id":"IC_kwDOCkIcu84_ettX","user":{"login":"philip-stoev","id":1279722,"node_id":"MDQ6VXNlcjEyNzk3MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1279722?v=4","gravatar_id":"","url":"https://api.github.com/users/philip-stoev","html_url":"https://github.com/philip-stoev","followers_url":"https://api.github.com/users/philip-stoev/followers","following_url":"https://api.github.com/users/philip-stoev/following{/other_user}","gists_url":"https://api.github.com/users/philip-stoev/gists{/gist_id}","starred_url":"https://api.github.com/users/philip-stoev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philip-stoev/subscriptions","organizations_url":"https://api.github.com/users/philip-stoev/orgs","repos_url":"https://api.github.com/users/philip-stoev/repos","events_url":"https://api.github.com/users/philip-stoev/events{/privacy}","received_events_url":"https://api.github.com/users/philip-stoev/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T11:13:49Z","updated_at":"2022-03-11T11:13:49Z","author_association":"CONTRIBUTOR","body":"Moving to the Persistence team then for possible further action.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065016151/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065077390","html_url":"https://github.com/MaterializeInc/materialize/issues/11137#issuecomment-1065077390","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11137","id":1065077390,"node_id":"IC_kwDOCkIcu84_e8qO","user":{"login":"aljoscha","id":68551,"node_id":"MDQ6VXNlcjY4NTUx","avatar_url":"https://avatars.githubusercontent.com/u/68551?v=4","gravatar_id":"","url":"https://api.github.com/users/aljoscha","html_url":"https://github.com/aljoscha","followers_url":"https://api.github.com/users/aljoscha/followers","following_url":"https://api.github.com/users/aljoscha/following{/other_user}","gists_url":"https://api.github.com/users/aljoscha/gists{/gist_id}","starred_url":"https://api.github.com/users/aljoscha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aljoscha/subscriptions","organizations_url":"https://api.github.com/users/aljoscha/orgs","repos_url":"https://api.github.com/users/aljoscha/repos","events_url":"https://api.github.com/users/aljoscha/events{/privacy}","received_events_url":"https://api.github.com/users/aljoscha/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T12:39:16Z","updated_at":"2022-03-11T12:39:16Z","author_association":"CONTRIBUTOR","body":"I don't think we care, because so much is in flux right now and all this code will likely change. Which... does make me feel nervous but I have accepted that! :sweat_smile: ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065077390/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065053384","html_url":"https://github.com/MaterializeInc/materialize/pull/11164#issuecomment-1065053384","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11164","id":1065053384,"node_id":"IC_kwDOCkIcu84_e2zI","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"created_at":"2022-03-11T12:06:42Z","updated_at":"2022-03-11T12:06:42Z","author_association":"CONTRIBUTOR","body":"Whoops, didn't mean to nerdsnipe you 😁 \r\n\r\nI'd be happy to pick this one up next week (assuming the baby / parental leave doesn't come sooner), thanks for kicking it off! Storing the modifiers as a `Vec<i64>` alongside the existing types is also what I had in mind, and it seems like this gets us close","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1065053384/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062938532","html_url":"https://github.com/MaterializeInc/materialize/issues/11130#issuecomment-1062938532","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/11130","id":1062938532,"node_id":"IC_kwDOCkIcu84_Wyek","user":{"login":"jkosh44","id":10800303,"node_id":"MDQ6VXNlcjEwODAwMzAz","avatar_url":"https://avatars.githubusercontent.com/u/10800303?v=4","gravatar_id":"","url":"https://api.github.com/users/jkosh44","html_url":"https://github.com/jkosh44","followers_url":"https://api.github.com/users/jkosh44/followers","following_url":"https://api.github.com/users/jkosh44/following{/other_user}","gists_url":"https://api.github.com/users/jkosh44/gists{/gist_id}","starred_url":"https://api.github.com/users/jkosh44/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkosh44/subscriptions","organizations_url":"https://api.github.com/users/jkosh44/orgs","repos_url":"https://api.github.com/users/jkosh44/repos","events_url":"https://api.github.com/users/jkosh44/events{/privacy}","received_events_url":"https://api.github.com/users/jkosh44/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T13:48:01Z","updated_at":"2022-03-09T13:48:01Z","author_association":"CONTRIBUTOR","body":"Yeah I think this is related to #5302, though I probably won't get to it until the later half of that issue.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062938532/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050006367","html_url":"https://github.com/MaterializeInc/materialize/issues/10871#issuecomment-1050006367","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871","id":1050006367,"node_id":"IC_kwDOCkIcu84-ldNf","user":{"login":"wangandi","id":5522362,"node_id":"MDQ6VXNlcjU1MjIzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/5522362?v=4","gravatar_id":"","url":"https://api.github.com/users/wangandi","html_url":"https://github.com/wangandi","followers_url":"https://api.github.com/users/wangandi/followers","following_url":"https://api.github.com/users/wangandi/following{/other_user}","gists_url":"https://api.github.com/users/wangandi/gists{/gist_id}","starred_url":"https://api.github.com/users/wangandi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wangandi/subscriptions","organizations_url":"https://api.github.com/users/wangandi/orgs","repos_url":"https://api.github.com/users/wangandi/repos","events_url":"https://api.github.com/users/wangandi/events{/privacy}","received_events_url":"https://api.github.com/users/wangandi/received_events","type":"User","site_admin":false},"created_at":"2022-02-24T16:00:33Z","updated_at":"2022-02-24T16:00:33Z","author_association":"MEMBER","body":"The current workaround for users is that they should call `explain <query>` and see if there are implicit casts in the plan. If yes, create an index for `column::<type that column has been cast into>`.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050006367/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1057655567","html_url":"https://github.com/MaterializeInc/materialize/issues/10871#issuecomment-1057655567","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871","id":1057655567,"node_id":"IC_kwDOCkIcu84_CosP","user":{"login":"wangandi","id":5522362,"node_id":"MDQ6VXNlcjU1MjIzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/5522362?v=4","gravatar_id":"","url":"https://api.github.com/users/wangandi","html_url":"https://github.com/wangandi","followers_url":"https://api.github.com/users/wangandi/followers","following_url":"https://api.github.com/users/wangandi/following{/other_user}","gists_url":"https://api.github.com/users/wangandi/gists{/gist_id}","starred_url":"https://api.github.com/users/wangandi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wangandi/subscriptions","organizations_url":"https://api.github.com/users/wangandi/orgs","repos_url":"https://api.github.com/users/wangandi/repos","events_url":"https://api.github.com/users/wangandi/events{/privacy}","received_events_url":"https://api.github.com/users/wangandi/received_events","type":"User","site_admin":false},"created_at":"2022-03-03T04:28:49Z","updated_at":"2022-03-08T15:38:45Z","author_association":"MEMBER","body":"## Task Breakdown\r\n\r\nWill edit this comment as I have more details.\r\n\r\n### Outline\r\n\r\nIndexes are used in 3 cases:\r\n- Filters of the form `<expr> = constant`.\r\n- Differential joins.\r\n- Delta joins.\r\n\r\nFor each of the 3 cases, we have to consider 2 subcases:\r\n- A: the cast does not change the underlying binary representation.\r\n- B: the cast does change the underlying binary representation.\r\n\r\n#### Case 1A and 1B: Filters of the form `<expr> = constant`.\r\n\r\nIf the predicate involves a downcast, e.g. `castint64toint32(<col>)=1::int32`, the entire query will error if any row in `<col>` cannot be downcast. Thus, it is simply not possible to use an index on `(<col>)` to speed up this query because we will need to do a full scan of the index in order to see whether or not the query should error.\r\n\r\nIf the predicate involves an upcast, e.g. `castint32toint64(<col>) = 1::int64`, the way to allow an index on `<col>` to be used is to downcast both sides of the equality: `<col> = 1::int32`. If downcasting the constant results in an error, then instead of propagating the error, we should transform the entire sub-relation into a zero-row constant. \r\n\r\nOptimization can theoretically handle the entirety of this case, but there is the issue that the code that selects indexes to use with filters of the form `<expr>=constant` currently lives in the MIR => LIR code. https://github.com/MaterializeInc/materialize/blob/47cc5960aa004de48fe09bbb5bb174a69f1d86aa/src/dataflow-types/src/plan/mod.rs#L442\r\n\r\nI think that the selection of indexes to use with filters of the form `<expr>=constant` should be moved to be the last transform in the MIR => MIR physical optimization block. (Incidentally, by having all index selection happen in the transform crate, this will unblock https://github.com/MaterializeInc/materialize/issues/4887#issuecomment-845278946.) The MIR => LIR code still needs to keep the code that detects if a filter can be sped up using an index since filter evaluation using an index is rendered differently from normal filter evaluation. \r\n\r\n#### Case 2B & Case 3B: Joins where columns with different underlying representations are compared\r\n\r\nThis is conceptually easy. Joins are already designed to run filters and projects between join stages. \r\nThe following diagram shows how differential join currently works. \r\n<img width=\"1404\" alt=\"Screen Shot 2022-03-03 at 1 41 27 PM\" src=\"https://user-images.githubusercontent.com/5522362/156960750-846b0676-a56e-4863-82d3-657dc6a94f8e.png\">\r\nThus, all we need to do is change everywhere that says \"Filter + Project\" and \"Cast + Filter + Project\".\r\n\r\nSpecifically, \r\n* If we need to upcast to use an existing arrangement, we just need to upcast the input collection.\r\n* If we need to downcast to use an existing arrangement, we need to filter away values that would error before running the downcast. This behavior is already built into dataflow rendering; `MapFilterProject` evaluates filters before maps if the filter does not depend on a value produced by the map,  https://github.com/MaterializeInc/materialize/blob/9611cc69528eee6228fe17e931340b1bb91e5684/src/expr/src/linear.rs#L1317\r\n* We should make sure that rows coming out of the join are of the expected types. \r\n\r\nHowever, this requires\r\n1) the optimization team to change [join_implementation.rs](https://github.com/MaterializeInc/materialize/blob/main/src/transform/src/join_implementation.rs) so it can select an index on `<col>` when the join constraint specifies `cast(<col>)`. \r\n2) the dataflow team to modify the [join rendering code](https://github.com/MaterializeInc/materialize/tree/main/src/dataflow-types/src/plan/join) to be able to infer, based on the indexes selected by optimization, in between which stages casts + filters would go.\r\n\r\nBoth of these tasks are non-trivial. It is likely that if we take on this task, both teams will consider handling delta joins will be a separate task from handling differential joins. Before starting, optimization and dataflow should what optimization should communicate to dataflow. It is possible that `MirRelationExpr` will have to be modified to convey more detailed information about the join that it currently does; if so, we should also take the opportunity to think about how the modified `MirRelationExpr` could support #7476.\r\n\r\n#### Case 2A & Case 3A: Joins where columns with the same underlying representations are compared\r\n\r\nThis is doable entirely on the optimization side:\r\n1) Do the same change to [join_implementation.rs](https://github.com/MaterializeInc/materialize/blob/main/src/transform/src/join_implementation.rs) as needed for the Case 2B + Case3B\r\n2) Teach the [`MapFilterProject` struct](https://github.com/MaterializeInc/materialize/blob/main/src/expr/src/linear.rs) that upcasts that don't change the underlying representation are no-ops and downcasts that change the underlying representation are filters.  ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1057655567/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062934058","html_url":"https://github.com/MaterializeInc/materialize/issues/10871#issuecomment-1062934058","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871","id":1062934058,"node_id":"IC_kwDOCkIcu84_WxYq","user":{"login":"aalexandrov","id":1071946,"node_id":"MDQ6VXNlcjEwNzE5NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1071946?v=4","gravatar_id":"","url":"https://api.github.com/users/aalexandrov","html_url":"https://github.com/aalexandrov","followers_url":"https://api.github.com/users/aalexandrov/followers","following_url":"https://api.github.com/users/aalexandrov/following{/other_user}","gists_url":"https://api.github.com/users/aalexandrov/gists{/gist_id}","starred_url":"https://api.github.com/users/aalexandrov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aalexandrov/subscriptions","organizations_url":"https://api.github.com/users/aalexandrov/orgs","repos_url":"https://api.github.com/users/aalexandrov/repos","events_url":"https://api.github.com/users/aalexandrov/events{/privacy}","received_events_url":"https://api.github.com/users/aalexandrov/received_events","type":"User","site_admin":false},"created_at":"2022-03-09T13:42:48Z","updated_at":"2022-03-09T13:42:48Z","author_association":"CONTRIBUTOR","body":"> This implicit cast may happen even if you cast 'to_match' to become the same type as `foo.a`.\r\n\r\nI am trying to figure out why this happens, see [the `mzt` repo](https://github.com/aalexandrov/mzt-repos/blob/main/issue_10871/README.md#observations).","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1062934058/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064233519","html_url":"https://github.com/MaterializeInc/materialize/issues/10871#issuecomment-1064233519","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10871","id":1064233519,"node_id":"IC_kwDOCkIcu84_buov","user":{"login":"aalexandrov","id":1071946,"node_id":"MDQ6VXNlcjEwNzE5NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1071946?v=4","gravatar_id":"","url":"https://api.github.com/users/aalexandrov","html_url":"https://github.com/aalexandrov","followers_url":"https://api.github.com/users/aalexandrov/followers","following_url":"https://api.github.com/users/aalexandrov/following{/other_user}","gists_url":"https://api.github.com/users/aalexandrov/gists{/gist_id}","starred_url":"https://api.github.com/users/aalexandrov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aalexandrov/subscriptions","organizations_url":"https://api.github.com/users/aalexandrov/orgs","repos_url":"https://api.github.com/users/aalexandrov/repos","events_url":"https://api.github.com/users/aalexandrov/events{/privacy}","received_events_url":"https://api.github.com/users/aalexandrov/received_events","type":"User","site_admin":false},"created_at":"2022-03-10T16:14:45Z","updated_at":"2022-03-10T16:14:45Z","author_association":"CONTRIBUTOR","body":"One way to communicate whether a type conversion is (a) _injective_ (i.e an _upcast_), and (b) binary compatible is to use type annotation and a rule-based macro, similar to the way this is defined for unary functions. ","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1064233519/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1049922055","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1049922055","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1049922055,"node_id":"IC_kwDOCkIcu84-lIoH","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"created_at":"2022-02-24T14:34:50Z","updated_at":"2022-02-24T14:34:50Z","author_association":"CONTRIBUTOR","body":"Hmm the new test failures here are a little tricky actually. We're actually newly passing some tests that postgres does, but there are some subtleties to work out, going to switch this to a draft for now","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1049922055/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050968981","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1050968981","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1050968981,"node_id":"IC_kwDOCkIcu84-pIOV","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T15:48:13Z","updated_at":"2022-02-25T15:48:13Z","author_association":"CONTRIBUTOR","body":"> Did you sort these out already? Everything seems copacetic now.\r\n\r\nYes! I had a bit of a wayward journey on two of them, but Sean helped out. Learned that we don't guarantee ordering of subqueries getting propagated to projections + that you can stuff an `ORDER BY` inside functions like `array_agg`","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1050968981/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051092067","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1051092067","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1051092067,"node_id":"IC_kwDOCkIcu84-pmRj","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T18:27:22Z","updated_at":"2022-02-25T18:27:22Z","author_association":"CONTRIBUTOR","body":"The goal is to merge https://github.com/MaterializeInc/materialize/pull/10734 first, after which we'll want to update this PR to cover a few more cases before merging. We should check that homogenizing functions behave correctly (https://github.com/MaterializeInc/materialize/pull/10734#issuecomment-1049190832), and Sean came up with some subtle handling of character types we'll want to consider.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051092067/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051096190","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1051096190","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1051096190,"node_id":"IC_kwDOCkIcu84-pnR-","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T18:32:47Z","updated_at":"2022-02-25T18:32:47Z","author_association":"MEMBER","body":"Idk, this PR seems like a strict improvement in correctness that's ready to go. Is the concern that it interacts poorly with #10734?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051096190/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051098189","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1051098189","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1051098189,"node_id":"IC_kwDOCkIcu84-pnxN","user":{"login":"pH14","id":785446,"node_id":"MDQ6VXNlcjc4NTQ0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/785446?v=4","gravatar_id":"","url":"https://api.github.com/users/pH14","html_url":"https://github.com/pH14","followers_url":"https://api.github.com/users/pH14/followers","following_url":"https://api.github.com/users/pH14/following{/other_user}","gists_url":"https://api.github.com/users/pH14/gists{/gist_id}","starred_url":"https://api.github.com/users/pH14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pH14/subscriptions","organizations_url":"https://api.github.com/users/pH14/orgs","repos_url":"https://api.github.com/users/pH14/repos","events_url":"https://api.github.com/users/pH14/events{/privacy}","received_events_url":"https://api.github.com/users/pH14/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T18:35:49Z","updated_at":"2022-02-25T18:35:49Z","author_association":"CONTRIBUTOR","body":"Yeah -- without further changes, it might introduce mishandling of custom types. A bit TBD though... first the other one actually needs to get merged :)","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051098189/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051100492","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1051100492","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1051100492,"node_id":"IC_kwDOCkIcu84-poVM","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T18:39:32Z","updated_at":"2022-02-25T18:39:32Z","author_association":"MEMBER","body":"@benesch Yeah, the situation was that we could merge this or #10734 but merging both introduced behavior that PG disallows. PG e.g. doesn't allow coalescing named composite types with unnamed rows, even with the same schema; the union of these two changes, though, would permit that. So we need to change some of our casting/`guess_best_common_type` rules.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051100492/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051226642","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1051226642","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1051226642,"node_id":"IC_kwDOCkIcu84-qHIS","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T20:26:33Z","updated_at":"2022-02-25T20:26:33Z","author_association":"MEMBER","body":"One hot take, not verified, is that we should just remove all the logic that attempts to coerce between named and anonymous types, and treat them as entirely separate types. Is that roughly what PostgreSQL does?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051226642/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051331204","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1051331204","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1051331204,"node_id":"IC_kwDOCkIcu84-qgqE","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"created_at":"2022-02-25T22:44:11Z","updated_at":"2022-02-25T22:44:11Z","author_association":"MEMBER","body":"@benesch The issue is that casting from an anonymous to a named type requires an assignment cast context, and I believe we're only requiring implicit:\r\n\r\n```sql\r\n-- in PG\r\ncreate type foo as (a int);\r\ncreate table bar (a foo);\r\n-- assignment\r\ninsert into bar values (row(1));\r\nINSERT 0 1\r\n```\r\n\r\nThe annoying thing about this, though, is that polymorphic types _can_ get implicitly cast to other types implicitly:\r\n\r\n```sql\r\n-- in PG\r\nSELECT ARRAY[1::int8] || ARRAY[1::int4];\r\n ?column? \r\n----------\r\n {1,1}\r\n```\r\n\r\n...but just not when one of the types is custom.\r\n\r\nSo, this is all definitely doable, just requires typing.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1051331204/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1053813677","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1053813677","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1053813677,"node_id":"IC_kwDOCkIcu84-z-ut","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T02:34:45Z","updated_at":"2022-02-28T02:34:45Z","author_association":"MEMBER","body":"> @benesch The issue is that casting from an anonymous to a named type requires an assignment cast context, and I believe we're only requiring implicit:\r\n> \r\n> ```sql\r\n> -- in PG\r\n> create type foo as (a int);\r\n> create table bar (a foo);\r\n> -- assignment\r\n> insert into bar values (row(1));\r\n> INSERT 0 1\r\n> ```\r\n> \r\n> The annoying thing about this, though, is that polymorphic types _can_ get implicitly cast to other types implicitly:\r\n> \r\n> ```sql\r\n> -- in PG\r\n> SELECT ARRAY[1::int8] || ARRAY[1::int4];\r\n>  ?column? \r\n> ----------\r\n>  {1,1}\r\n> ```\r\n> \r\n> ...but just not when one of the types is custom.\r\n> \r\n> So, this is all definitely doable, just requires typing.\r\n\r\nI didn't quite follow this, @sploiselle! I took a stab at digging in and came up with #10911, #10934, and #10935. Possibly the conversion from `record` -> named row type needs to be made an assignment cast—but as best as I can tell from a quick skim of the [PostgreSQL source](https://github.com/postgres/postgres/blob/667726fbe50f21d7d3ce5d5c5949a45c2496b60f/src/backend/parser/parse_coerce.c#L1012), implicit seems right?","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1053813677/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054389877","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1054389877","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1054389877,"node_id":"IC_kwDOCkIcu84-2LZ1","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T15:45:33Z","updated_at":"2022-02-28T15:45:33Z","author_association":"MEMBER","body":"Ah, you're right about the implicit cast. So the \"problem\" with this:\r\n\r\n```\r\nsean=# CREATE TYPE foo AS (a int);\r\nCREATE TYPE\r\nsean=# SELECT coalesce(ROW(1)::foo, ROW(2));\r\nERROR:  COALESCE types foo and record cannot be matched\r\nLINE 1: SELECT coalesce(ROW(1)::foo, ROW(2));\r\n                                     ^\r\n```\r\n\r\nis that named record types' category is \"Composite\" while `record` itself is pseudo.\r\n\r\n```\r\nSELECT pg_typeof(ROW(1));\r\n pg_typeof \r\n-----------\r\n record\r\n\r\nSELECT typcategory FROM pg_type where typname='record';\r\n typcategory \r\n-------------\r\n P\r\n\r\nSELECT typcategory FROM pg_type where typname='foo';\r\n typcategory \r\n-------------\r\n C\r\n C\r\n```\r\n\r\nSo this can be fixed out-of-band of this PR, which means this doesn't need to be blocked (though I'd prefer to land this fix first, which I'll do in a bit).","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054389877/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054400511","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1054400511","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1054400511,"node_id":"IC_kwDOCkIcu84-2N__","user":{"login":"benesch","id":882976,"node_id":"MDQ6VXNlcjg4Mjk3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/882976?v=4","gravatar_id":"","url":"https://api.github.com/users/benesch","html_url":"https://github.com/benesch","followers_url":"https://api.github.com/users/benesch/followers","following_url":"https://api.github.com/users/benesch/following{/other_user}","gists_url":"https://api.github.com/users/benesch/gists{/gist_id}","starred_url":"https://api.github.com/users/benesch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benesch/subscriptions","organizations_url":"https://api.github.com/users/benesch/orgs","repos_url":"https://api.github.com/users/benesch/repos","events_url":"https://api.github.com/users/benesch/events{/privacy}","received_events_url":"https://api.github.com/users/benesch/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T15:56:15Z","updated_at":"2022-02-28T15:56:15Z","author_association":"MEMBER","body":"> So this can be fixed out-of-band of this PR, which means this doesn't need to be blocked (though I'd prefer to land this fix first, which I'll do in a bit).\r\n\r\nYep, 100%, but I think it requires the large refactor described in #10934 because right now we don't have a way of representing an expression of type `record`.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054400511/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054428555","html_url":"https://github.com/MaterializeInc/materialize/pull/10868#issuecomment-1054428555","issue_url":"https://api.github.com/repos/MaterializeInc/materialize/issues/10868","id":1054428555,"node_id":"IC_kwDOCkIcu84-2U2L","user":{"login":"sploiselle","id":19260003,"node_id":"MDQ6VXNlcjE5MjYwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/19260003?v=4","gravatar_id":"","url":"https://api.github.com/users/sploiselle","html_url":"https://github.com/sploiselle","followers_url":"https://api.github.com/users/sploiselle/followers","following_url":"https://api.github.com/users/sploiselle/following{/other_user}","gists_url":"https://api.github.com/users/sploiselle/gists{/gist_id}","starred_url":"https://api.github.com/users/sploiselle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sploiselle/subscriptions","organizations_url":"https://api.github.com/users/sploiselle/orgs","repos_url":"https://api.github.com/users/sploiselle/repos","events_url":"https://api.github.com/users/sploiselle/events{/privacy}","received_events_url":"https://api.github.com/users/sploiselle/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T16:23:18Z","updated_at":"2022-02-28T16:23:18Z","author_association":"MEMBER","body":"@benesch You were way ahead of me! I hadn't read #10934 yet, but you've clearly identified what needs to be done.","reactions":{"url":"https://api.github.com/repos/MaterializeInc/materialize/issues/comments/1054428555/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}
